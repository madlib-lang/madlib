# Should use alpine:3.13 to get ghc 8.8.4
FROM ubuntu:20.04 as build-stage

# install ghc and cabal
RUN apt-get update
RUN apt-get install -y software-properties-common
RUN add-apt-repository -y ppa:hvr/ghc
RUN apt-get update
RUN apt-get install -y cabal-install-3.2 ghc-8.8.4
ENV PATH="/opt/cabal/bin:/opt/ghc/bin:$PATH"

# install common dependencies
RUN apt-get install -y curl llvm-9 zip wget automake libtool clang gcc-9 g++-9 libstdc++-9-dev libc++abi-9-dev

# install stack
RUN curl -sSL https://get.haskellstack.org/ | sh
ENV PATH="/root/.local/bin:$PATH"

# tell stack to use the global ghc, installing GHC with stack fails
RUN stack config set system-ghc --global true
ENV PATH="$(stack path --bin-path):$PATH"

# run the build
COPY . .

# note: this needs to happen here as we need the resolved from the stack.yml or else stack
# will download a new ghc version, which we want to avoid.
RUN stack install alex happy

# build runtime libs
RUN ./scripts/build-runtime-libs
RUN CPLUS_INCLUDE_PATH=/usr/include/c++/9:/usr/include/x86_64-linux-gnu/c++/9:/usr/include/ ./runtime/compile-runtime

# # install libuv
# RUN wget https://github.com/libuv/libuv/archive/refs/tags/v1.42.0.zip
# RUN unzip v1.42.0.zip -d libuv
# RUN cd libuv/libuv-1.42.0 && sh autogen.sh && ./configure && make && make install
# RUN cp libuv/libuv-1.42.0/.libs/libuv.a runtime/lib/libuv.a
# RUN cp -R libuv/libuv-1.42.0/include runtime/

# # install libgc
# RUN wget https://github.com/ivmai/bdwgc/archive/refs/tags/v8.2.0.zip
# RUN unzip v8.2.0.zip -d libgc
# RUN cd libgc/bdwgc-8.2.0 && ./autogen.sh && ./configure --enable-static && make -j
# RUN cp libgc/bdwgc-8.2.0/.libs/libgc.a runtime/lib/libgc.a
# RUN cp -R libgc/bdwgc-8.2.0/include runtime/


# build command example to be used
# clang++ -static ./build/HelloWorld.o -L./runtime/lib/ -L./runtime/build/ -lruntime -lgc -luv -pthread -ldl

RUN stack build --jobs 1 --flag madlib:static

# RUN stack build --jobs 1 --flag madlib:static --ghc-options='-fPIC'
