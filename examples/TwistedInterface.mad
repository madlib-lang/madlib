import IO from "IO"
import {} from "String"
import { zip, reduce } from "List"



interface StaticTest fn params expected {
  staticEquals :: fn -> params -> expected -> String
}

instance StaticTest (a -> b) a b {
  staticEquals = (fn, param, expected) =>
    fn(param) == expected ? "GOOD" : "NO GOOD"
}

instance StaticTest (a -> b -> c) (<a, b>) c {
  staticEquals = (fn, param, expected) => where(param) is <a, b>:
    fn(a, b) == expected ? "GOOD" : "NO GOOD"
}

instance StaticTest fn param expected => StaticTest fn (List param) (List expected) {
  staticEquals = (fn, params, expecteds) => reduce(mappend, "", map(where is <p, e>:  staticEquals(fn, p, e), zip(params, expecteds)))
}


staticEqualsMany :: StaticTest fn params expected => fn -> List params -> List expected -> String
staticEqualsMany = (fn, params, es) => reduce(mappend, "", map(where is <p, e>:  staticEquals(fn, p, e), zip(params, es)))

inc = (a) => a + 1
add = (a, b) => a + b

staticEquals(add, <1, 2>, 3) |> IO.log
staticEquals(inc, 1, 2) |> IO.log

staticEquals(add, [<1, 2>, <5, 2>], [3, 8]) |> IO.log

