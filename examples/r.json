{
  "modules": [
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Monad.mad",
      "description": "",
      "expressions": [
        {
          "name": "andDo",
          "description": "",
          "example": "",
          "since": "",
          "type": "m a -> m b -> m a"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Maybe.mad",
      "description": "",
      "expressions": [
        {
          "name": "chain",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> Maybe b) -> Maybe a -> Maybe b"
        },
        {
          "name": "fromMaybe",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> Maybe a -> a"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/MonadWriter.mad",
      "description": "",
      "expressions": [
        
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Applicative.mad",
      "description": "",
      "expressions": [
        
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/LcovDotInfo.mad",
      "description": "",
      "expressions": [
        {
          "name": "getPath",
          "description": "",
          "example": "",
          "since": "",
          "type": "{ das :: List LcovLine, fndas :: List LcovLine, fnf :: LcovLine, fnh :: LcovLine, fns :: List LcovLine, lf :: LcovLine, lh :: LcovLine, sf :: LcovLine, tn :: LcovLine } -> String"
        },
        {
          "name": "parseLcov",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> List { das :: List LcovLine, fndas :: List LcovLine, fnf :: LcovLine, fnh :: LcovLine, fns :: List LcovLine, lf :: LcovLine, lh :: LcovLine, sf :: LcovLine, tn :: LcovLine }"
        },
        {
          "name": "stringify",
          "description": "",
          "example": "",
          "since": "",
          "type": "List { das :: List LcovLine, fndas :: List LcovLine, fnf :: LcovLine, fnh :: LcovLine, fns :: List LcovLine, lf :: LcovLine, lh :: LcovLine, sf :: LcovLine, tn :: LcovLine } -> String"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/String.mad",
      "description": "",
      "expressions": [
        {
          "name": "show",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> String"
        },
        {
          "name": "replace",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> String -> String -> String"
        },
        {
          "name": "split",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> String -> List String"
        },
        {
          "name": "lines",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> List String"
        },
        {
          "name": "mapChars",
          "description": "",
          "example": "",
          "since": "",
          "type": "(String -> String) -> String -> String"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Binary.mad",
      "description": "",
      "expressions": [
        
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Identity.mad",
      "description": "",
      "expressions": [
        {
          "name": "runIdentity",
          "description": "",
          "example": "",
          "since": "",
          "type": "Identity a -> a"
        },
        {
          "name": "runIdentityT",
          "description": "",
          "example": "",
          "since": "",
          "type": "IdentityT m a -> m a"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Math.mad",
      "description": "",
      "expressions": [
        {
          "name": "add",
          "description": "",
          "example": "",
          "since": "",
          "type": "Number -> Number -> Number"
        },
        {
          "name": "substract",
          "description": "",
          "example": "",
          "since": "",
          "type": "Number -> Number -> Number"
        },
        {
          "name": "multiply",
          "description": "",
          "example": "",
          "since": "",
          "type": "Number -> Number -> Number"
        },
        {
          "name": "divide",
          "description": "",
          "example": "",
          "since": "",
          "type": "Number -> Number -> Number"
        },
        {
          "name": "mod",
          "description": "",
          "example": "",
          "since": "",
          "type": "Number -> Number -> Number"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/TestTools.mad",
      "description": "",
      "expressions": [
        {
          "name": "test",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> (String -> Wish AssertionError String) -> Wish String String"
        },
        {
          "name": "assertEquals",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> a -> Wish AssertionError String"
        },
        {
          "name": "runTests",
          "description": "",
          "example": "",
          "since": "",
          "type": "List (Wish String String) -> ()"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Semigroup.mad",
      "description": "",
      "expressions": [
        
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/WriterT.mad",
      "description": "",
      "expressions": [
        {
          "name": "runWriterT",
          "description": "",
          "example": "",
          "since": "",
          "type": "WriterT a m b -> m <b, a>"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Tuple.mad",
      "description": "",
      "expressions": [
        {
          "name": "fst",
          "description": "",
          "example": "",
          "since": "",
          "type": "<a, b> -> a"
        },
        {
          "name": "snd",
          "description": "",
          "example": "",
          "since": "",
          "type": "<a, b> -> b"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/System.mad",
      "description": "",
      "expressions": [
        {
          "name": "exec",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> Wish CommandError String"
        },
        {
          "name": "spawn",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> Wish CommandError Number"
        },
        {
          "name": "getArgs",
          "description": "",
          "example": "",
          "since": "",
          "type": "Wish String (List String)"
        },
        {
          "name": "getEnv",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> Wish String String"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Reader.mad",
      "description": "",
      "expressions": [
        {
          "name": "run",
          "description": "",
          "example": "",
          "since": "",
          "type": "Reader a b -> a -> b"
        },
        {
          "name": "map",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> b) -> Reader c a -> Reader c b"
        },
        {
          "name": "chain",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> Reader b c) -> Reader b a -> Reader b c"
        },
        {
          "name": "ask",
          "description": "",
          "example": "",
          "since": "",
          "type": "Reader a a"
        },
        {
          "name": "asks",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> b) -> Reader a b"
        },
        {
          "name": "of",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> Reader b a"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/List.mad",
      "description": "List utility functions.\\nIn this module you'll find everything that is related to List and make working with lists convenient.",
      "expressions": [
        {
          "name": "singleton",
          "description": "Constructor function that creates a list with length 1. It takes an item of any type, and returns a List of that type.",
          "example": "singleton(1)   // [1]\nsingleton(\"1\") // [\"1\"]",
          "since": "0.0.5",
          "type": "a -> List a"
        },
        {
          "name": "unlines",
          "description": "Flattens a List String into a String, by adding line returns between the items in the List.",
          "example": "",
          "since": "0.0.5",
          "type": "List String -> String"
        },
        {
          "name": "intercalate",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "a -> List a -> List a"
        },
        {
          "name": "join",
          "description": "Alias for intercalate",
          "example": "",
          "since": "0.0.5",
          "type": "a -> List a -> List a"
        },
        {
          "name": "mapWithIndex",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "(a -> Number -> b) -> List a -> List b"
        },
        {
          "name": "concat",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "List a -> List a -> List a"
        },
        {
          "name": "append",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "a -> List a -> List a"
        },
        {
          "name": "last",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "List a -> a"
        },
        {
          "name": "init",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "List a -> List a"
        },
        {
          "name": "nth",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "Number -> List a -> Maybe a"
        },
        {
          "name": "reduceR",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "(a -> b -> a) -> a -> List b -> a"
        },
        {
          "name": "reduceL",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "(a -> b -> a) -> a -> List b -> a"
        },
        {
          "name": "reduce",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "(a -> b -> a) -> a -> List b -> a"
        },
        {
          "name": "filter",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "(a -> Boolean) -> List a -> List a"
        },
        {
          "name": "find",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "(a -> Boolean) -> List a -> Maybe a"
        },
        {
          "name": "len",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "List a -> Number"
        },
        {
          "name": "reject",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "(a -> Boolean) -> List a -> List a"
        },
        {
          "name": "slice",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "Number -> Number -> List a -> List a"
        },
        {
          "name": "isEmpty",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "List a -> Boolean"
        },
        {
          "name": "uniqueBy",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "(a -> a -> Boolean) -> List a -> List a"
        },
        {
          "name": "flatten",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "List (List a) -> List a"
        },
        {
          "name": "zip",
          "description": "",
          "example": "",
          "since": "0.0.5",
          "type": "List a -> List b -> List <a, b>"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Either.mad",
      "description": "",
      "expressions": [
        {
          "name": "mapRight",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> b) -> Either c a -> Either c b"
        },
        {
          "name": "mapLeft",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> b) -> Either a c -> Either b c"
        },
        {
          "name": "isLeft",
          "description": "",
          "example": "",
          "since": "",
          "type": "Either a b -> Boolean"
        },
        {
          "name": "fromRight",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> Either b a -> a"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Http.mad",
      "description": "",
      "expressions": [
        {
          "name": "get",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> Wish a Response"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/WriterReader.mad",
      "description": "",
      "expressions": [
        {
          "name": "run",
          "description": "",
          "example": "",
          "since": "",
          "type": "WriterReader a b c -> b -> <c, List a>"
        },
        {
          "name": "of",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> WriterReader b c a"
        },
        {
          "name": "chain",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> WriterReader b c d) -> WriterReader b c a -> WriterReader b c d"
        },
        {
          "name": "andDo",
          "description": "",
          "example": "",
          "since": "",
          "type": "WriterReader a b c -> WriterReader a b d -> WriterReader a b c"
        },
        {
          "name": "asks",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> b) -> WriterReader c a b"
        },
        {
          "name": "tell",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> WriterReader a b ()"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Function.mad",
      "description": "",
      "expressions": [
        {
          "name": "complement",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> Boolean) -> a -> Boolean"
        },
        {
          "name": "always",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> b -> a"
        },
        {
          "name": "identity",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> a"
        },
        {
          "name": "equals",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> a -> Boolean"
        },
        {
          "name": "ifElse",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> Boolean) -> (a -> b) -> (a -> b) -> a -> b"
        },
        {
          "name": "when",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> Boolean) -> (a -> a) -> a -> a"
        },
        {
          "name": "not",
          "description": "",
          "example": "",
          "since": "",
          "type": "Boolean -> Boolean"
        },
        {
          "name": "flip",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> b -> c) -> b -> a -> c"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/FileSystem.mad",
      "description": "",
      "expressions": [
        {
          "name": "writeFile",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> Data -> Wish a String"
        },
        {
          "name": "readFile",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> Wish a String"
        },
        {
          "name": "exists",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> Wish a String"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/IO.mad",
      "description": "",
      "expressions": [
        {
          "name": "log",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> a"
        },
        {
          "name": "trace",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> a -> a"
        },
        {
          "name": "err",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> a"
        },
        {
          "name": "warn",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> a"
        },
        {
          "name": "inspect",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> a"
        },
        {
          "name": "table",
          "description": "",
          "example": "",
          "since": "",
          "type": "List { cols :: List <String, String>, id :: String } -> a -> a"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Show.mad",
      "description": "",
      "expressions": [
        
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Json.mad",
      "description": "",
      "expressions": [
        {
          "name": "string",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> Either String String"
        },
        {
          "name": "number",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> Either String Number"
        },
        {
          "name": "boolean",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> Either String Boolean"
        },
        {
          "name": "dict",
          "description": "",
          "example": "",
          "since": "",
          "type": "(String -> Either String a) -> String -> Either String (Dictionary String a)"
        },
        {
          "name": "list",
          "description": "",
          "example": "",
          "since": "",
          "type": "(String -> Either String a) -> String -> Either String (List a)"
        },
        {
          "name": "map1",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> b) -> (String -> Either String a) -> String -> Either String b"
        },
        {
          "name": "map2",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> b -> c) -> (String -> Either String a) -> (String -> Either String b) -> String -> Either String c"
        },
        {
          "name": "map3",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> b -> c -> d) -> (String -> Either String a) -> (String -> Either String b) -> (String -> Either String c) -> String -> Either String d"
        },
        {
          "name": "map4",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> b -> c -> d -> e) -> (String -> Either String a) -> (String -> Either String b) -> (String -> Either String c) -> (String -> Either String d) -> String -> Either String e"
        },
        {
          "name": "map5",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> b -> c -> d -> e -> f) -> (String -> Either String a) -> (String -> Either String b) -> (String -> Either String c) -> (String -> Either String d) -> (String -> Either String e) -> String -> Either String f"
        },
        {
          "name": "maybe",
          "description": "",
          "example": "",
          "since": "",
          "type": "(String -> Either String a) -> String -> Either String (Maybe a)"
        },
        {
          "name": "lazy",
          "description": "",
          "example": "",
          "since": "",
          "type": "(() -> String -> Either String a) -> String -> Either String a"
        },
        {
          "name": "field",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> (String -> Either String a) -> String -> Either String a"
        },
        {
          "name": "parse",
          "description": "",
          "example": "",
          "since": "",
          "type": "(String -> Either String a) -> String -> Either String a"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/HitPoint.mad",
      "description": "",
      "expressions": [
        {
          "name": "getHitPoints",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> List HitPoint"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/MonadTrans.mad",
      "description": "",
      "expressions": [
        
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Monoid.mad",
      "description": "",
      "expressions": [
        
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Number.mad",
      "description": "",
      "expressions": [
        {
          "name": "fromString",
          "description": "",
          "example": "",
          "since": "",
          "type": "String -> Maybe Number"
        },
        {
          "name": "formatDecimal",
          "description": "",
          "example": "",
          "since": "",
          "type": "Number -> Number -> String"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Dictionary.mad",
      "description": "",
      "expressions": [
        {
          "name": "fromList",
          "description": "",
          "example": "",
          "since": "",
          "type": "List <a, b> -> Dictionary a b"
        },
        {
          "name": "empty",
          "description": "",
          "example": "",
          "since": "",
          "type": "Dictionary a b"
        },
        {
          "name": "insert",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> b -> Dictionary a b -> Dictionary a b"
        },
        {
          "name": "get",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> Dictionary a b -> Maybe b"
        },
        {
          "name": "keys",
          "description": "",
          "example": "",
          "since": "",
          "type": "Dictionary a b -> List a"
        },
        {
          "name": "values",
          "description": "",
          "example": "",
          "since": "",
          "type": "Dictionary a b -> List b"
        },
        {
          "name": "len",
          "description": "",
          "example": "",
          "since": "",
          "type": "Dictionary a b -> Number"
        },
        {
          "name": "mapWithKey",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> b -> c) -> Dictionary a b -> Dictionary a c"
        },
        {
          "name": "merge",
          "description": "",
          "example": "",
          "since": "",
          "type": "Dictionary a b -> Dictionary a b -> Dictionary a b"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/MonadState.mad",
      "description": "",
      "expressions": [
        
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/StateT.mad",
      "description": "",
      "expressions": [
        {
          "name": "runStateT",
          "description": "",
          "example": "",
          "since": "",
          "type": "StateT a m b -> a -> m <b, a>"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Wish.mad",
      "description": "",
      "expressions": [
        {
          "name": "mapRej",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> b) -> Wish a c -> Wish b c"
        },
        {
          "name": "chainRej",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> Wish b c) -> Wish a c -> Wish b c"
        },
        {
          "name": "good",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> Wish b a"
        },
        {
          "name": "bad",
          "description": "",
          "example": "",
          "since": "",
          "type": "a -> Wish a b"
        },
        {
          "name": "parallel",
          "description": "",
          "example": "",
          "since": "",
          "type": "List (Wish a b) -> Wish a (List b)"
        },
        {
          "name": "fulfill",
          "description": "",
          "example": "",
          "since": "",
          "type": "(a -> b) -> (c -> d) -> Wish a c -> ()"
        },
        {
          "name": "after",
          "description": "",
          "example": "",
          "since": "",
          "type": "Number -> a -> Wish b a"
        }
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Functor.mad",
      "description": "",
      "expressions": [
        
      ]
    },
    {
      "path": "/Users/a.boeglin/Code/madlib/prelude/__internal__/Boolean.mad",
      "description": "",
      "expressions": [
        
      ]
    }
  ]
}
