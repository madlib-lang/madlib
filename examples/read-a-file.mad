#- import fsPromises from 'fs/promises' -#
#- import path from 'path' -#

inc :: Number -> Number
inc = (z) => (z + 1)

log :: a -> a
log = (a) => (
  #- {console.log(a); return a;} -#
)

cool = 5
// cool!
cool |> inc |> log

warn :: a -> a
warn = (a) => (#- {console.warn(a); return a;} -#)

type Future e a = Bad e
                | Good a

readFile :: a -> Future e a
readFile = (x) => (#- fsPromises.readFile(path.resolve(process.cwd(), x), 'utf8') -#)

map :: (a -> b) -> Future e a -> Future e b
map = (f , x) => (#- x.then(f) -#)

barf :: (e -> f) -> Future e a -> Future f a
barf = (f, x) => (#- x.catch(f) -#)

run :: (e -> f) -> (a -> b) -> String -> ()
run = (bad, good, x) => (#- readFile(x).catch(bad).then(good) -#) 

readFile("package.yaml") |> barf(warn) |> map(log)
// run(warn, log, "package.yaml")
