// import {} from "Functor"

// export type Location = Loc Number Number Number

export type Parser a = Parser (String -> List <a, String>)
// export type Parser a = Parser (String -> Location -> <List <a, String>, Location>)

pure = (a) => Parser((s) => [<a, s>])

parse :: Parser a -> String -> List <a, String>
parse = (parser, input) => {
  parseFn = where(parser)
    is Parser ffn: ffn
  return parseFn(input)
}


mm1 = (d, f) => where(d)
is [a, b] : [f(a), f(b)]
is [a, b]: [a, b]

mm2 = (d, f) => where(d)
is a : f(a)
is _: 3

// type Maybe a = Just a | Nothing

// dd = (x) => where(x)
// is Nothing: false
// is Just a : a

// mm = (f, m) => Parser((s) => where(parse(m, s))
mm = (d, f) => where(d)
is [<a, b>] : [<f(a), b>]
is e: e
// )

// p = mm((x) => x + 1, pure(1))



// instance Functor Parser {
//   map = (f, m) => Parser((s, l) => where(parse(m, s, l))
//   // is <[], loc>: <[], loc>
//   is <[<a, b>], loc>: <[<f(a), b>], loc>
//   is eyooo: eyooo
//   )
// }