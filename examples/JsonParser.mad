import J from "JsonParser"
import IO from "IO"
import { Right } from "Either"
import type { Maybe } from "Maybe"
import { Just } from "Maybe"

type Parsed = Parsed({ field1 :: Maybe Parsed, field2 :: Boolean })

input :: String
input = `
{
  "field1": {
    "field1": {
      "field1": {
        "field2": true
      },
      "field2": false
    },
    "field2": true
  },
  "field2": false
}
`

parser :: J.Parser Parsed
parser = J.map2(
  (field1, field2) => Parsed({
    field1: field1,
    field2: field2
  }),
  J.field("field1", J.maybe(J.lazy((_) => parser))),
  J.field("field2", J.boolean)
)


where(J.parse(parser, input)) {
  Right(Parsed({ field1: Just(Parsed(choco)) })) =>
    IO.log(choco)

  or =>
    IO.log(or)
}
