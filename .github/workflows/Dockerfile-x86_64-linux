# FROM alpine:3.13.0 as build-musl-runtime

# RUN apk add --update git wget unzip cmake linux-headers musl-dev build-base libuv-static bash nasm zlib-dev zlib-static perl automake m4 autoconf

# COPY . .

# # build runtime
# RUN TARGET="MUSL_X64" ./scripts/build-runtime-libs
# RUN cp /usr/lib/libuv.a runtime/lib/
# RUN TARGET="MUSL_X64" CXX="g++" ./scripts/build-runtime



FROM ubuntu:20.04 as build-stage

# # install common dependencies
# RUN apt update --fix-missing
# # DEBIAN_FRONTEND=noninteractive is necessary to skip geographical questions asked when installing cmake
# RUN DEBIAN_FRONTEND=noninteractive apt install --fix-missing -y curl llvm-12 zip wget automake libtool clang gcc-9 g++-9 libstdc++-9-dev libc++abi-9-dev unzip cmake git nasm perl build-essential libffi-dev libffi7 libgmp-dev libgmp10 libncurses-dev libncurses5 libtinfo5

RUN apt-get update -y

RUN DEBIAN_FRONTEND=noninteractive apt-get install -y lcov clang-12 llvm-12 nasm curl zip wget automake libtool unzip cmake git perl build-essential libffi-dev libffi7 libgmp-dev libgmp10 libncurses-dev libncurses5 libtinfo5

RUN echo "Setup Haskell"
RUN curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
RUN ~/.ghcup/bin/ghcup install 8.10.7
RUN ~/.ghcup/bin/ghcup install cabal 3.4.0.0
RUN ~/.ghcup/bin/ghcup install stack 2.7.3
RUN ~/.ghcup/bin/ghcup set 8.10.7
RUN ~/.ghcup/bin/ghcup set cabal 3.4.0.0
RUN ~/.ghcup/bin/ghcup set stack 2.7.3

# install stack
RUN curl -sSL https://get.haskellstack.org/ | sh
ENV PATH="/root/.local/bin:$PATH"

# tell stack to use the global ghc, installing GHC with stack fails
RUN stack config set system-ghc --global true
ENV PATH="$(stack path --bin-path):$PATH"

# setup node and rollup
RUN curl -sL https://deb.nodesource.com/setup_14.x | bash -
RUN apt-get install -y nodejs
RUN npm i -g rollup@2.62.0 @rollup/plugin-node-resolve

# run the build
COPY . .

# note: this needs to happen here as we need the resolved field from the stack.yml or else stack
# will download a new ghc version, which we want to avoid.
RUN stack install alex happy

RUN stack build --jobs 1

# build runtime
RUN TARGET="LINUX_X64" ./scripts/build-runtime-libs
RUN AR="llvm-ar-12" TARGET="LINUX_X64" CPLUS_INCLUDE_PATH="/usr/include/c++/9:/usr/include/x86_64-linux-gnu/c++/9:/usr/include/" ./scripts/build-runtime


# build the js tools ( test-runner and package-installer )
RUN ./scripts/build

RUN cp "$(stack path --dist-dir)/build/madlib/madlib" .


FROM scratch AS export-stage
COPY --from=build-stage ./madlib /
COPY --from=build-stage ./runtime /runtime
COPY --from=build-stage ./tools/package-installer/dist/package-installer.js /package-installer.js
