import {} from "./Functor"


/**
 * Applicative is useful to sequence computations and combine their results. It
 * is best used in combination with Functor's map function.
 *
 * @since 0.2.0
 * @example
 * pipe(
 *   map((a, b) => a + b),
 *   ap($, Just(4))
 * )(Just(3))
 * // output: Just(7)
 * // in this example we can see how we can extend map and make it work with a
 * // binary function.
 */
interface Functor m => Applicative m {
  ap :: m (a -> b) -> m a -> m b
  pure :: a -> m a
}


liftA2 :: Applicative f => (a -> b -> c) -> f a -> f b -> f c
export liftA2 = (f, x1, x2) => pipe(
  map(f),
  ap($, x2)
)(x1)


liftA3 :: Applicative f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d
export liftA3 = (f, x1, x2, x3) => pipe(
  map(f),
  ap($, x2),
  ap($, x3)
)(x1)
