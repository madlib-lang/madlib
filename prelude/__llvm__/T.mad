import IO from "./IO"
import {} from "./Number"
import {} from "./String"
import {} from "./Boolean"
import { filter, reject, reverse, len } from "./List"

IO.prettyLog([32, 133, 412])


IO.prettyLog("Hello world!")
IO.prettyLog(32)
IO.prettyLog(true)

IO.prettyLog(len([32, 133, 412]))
IO.prettyLog(["one string", "another one"])
IO.prettyLog([true, false, false, false, true, false])
IO.prettyLog(([] :: List Number))


instance Show { x :: Number, y :: Number } {
  show = (position) =>
    `{ x: ${show(position.x)}, y: ${show(position.y)} }`
}

instance PrettyShow { x :: Number, y :: Number } {
  ppShow = (position) =>
    `{ x: ${ppShow(position.x)}, y: ${ppShow(position.y)} }`
}

instance Show a => Show { stuff :: a } {
  show = (withStuff) => `{ stuff: ${show(withStuff.stuff)} }`
}

instance (Show a, Show b) => Show { x :: a, y :: b } {
  show = (pos) => `{ x: ${show(pos.x)}, y: ${show(pos.y)} }`
}

IO.log(show({ stuff: false }))

IO.log(show({ x: 3, y: 4 }))


reversed = reverse([1, 2, 3, 4, 5, 6])
IO.prettyLog(reversed)

filtered = filter((x) => x > 2, [1, 2, 3, 4, 5, 6])
IO.prettyLog(filtered)

// rejected = reject((x) => x > 2, [1, 2, 3, 4, 5, 6])
// IO.prettyLog(rejected)

IO.prettyLog(!!true)
IO.prettyLog(!!!true)
IO.prettyLog(!false)



inc = (a) => {
  b = "1"
  b = b ++ a
  return a ++ b
}

IO.prettyLog(inc("4"))

makeCounter :: () -> (() -> String)
makeCounter = (_) => {
  count = "0"

  return (_) => {
    count = count ++ "1"
    return count
  }
}

counter = makeCounter(())

IO.prettyLog(counter(()))
IO.prettyLog(counter(()))
IO.prettyLog(counter(()))


makeGrower :: () -> (Number -> List Number)
makeGrower = (_) => {
  initial = []

  return (n) => {
    initial = [...initial, n]
    return initial
  }
}

grower = makeGrower(())
grower(1)
grower(2)
grower(3)
grower(4)
IO.prettyLog(grower(10))
IO.prettyLog(grower(21))


makeCounterWithRec :: () -> (() -> { a :: Number })
makeCounterWithRec = (_) => {
  count = { a: 0 }

  return (_) => {
    count = { a: count.a + 1 }
    return count
  }
}

c2 = makeCounterWithRec(())
c2(())
c2(())
c2(())
IO.prettyLog(c2(()).a)
