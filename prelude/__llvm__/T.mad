import IO from "./IO"
import {} from "./Integer"
import {} from "./Float"
import { Just, Nothing } from "./Maybe"
import {} from "./String"
import {} from "./Boolean"
import { filter, reject, reverse, len } from "./List"
import {} from "./Byte"


IO.prettyLog("Hello world!")
IO.prettyLog(32)
IO.prettyLog(true)

IO.prettyLog(len([32, 133, 412]))
IO.prettyLog(["one string", "another one"])
IO.prettyLog([true, false, false, false, true, false])
IO.prettyLog(([] :: List Integer))

instance Show a => Show { stuff :: a } {
  show = (withStuff) => `{ stuff: ${show(withStuff.stuff)} }`
}

instance (Show a, Show b) => Show { x :: a, y :: b } {
  show = (pos) => `{ x: ${show(pos.x)}, y: ${show(pos.y)} }`
}

IO.log(show({ stuff: false }))

IO.log(show({ x: 3, y: 4 }))

IO.prettyLog([1, 2, 3])

reversed = reverse([1, 2, 3, 4, 5, 6])
IO.prettyLog(reversed)

filtered = filter((x) => x > 2, [1, 2, 3, 4, 5, 6])
IO.prettyLog(filtered)

rejected = reject((x) => x > 2, [1, 2, 3, 4, 5, 6])
IO.prettyLog(rejected)


IO.prettyLog((127 :: Byte))
IO.prettyLog(([127, 245, 11, 90, 2, 255] :: List Byte))




maybe = do {
  oneDotOne <- Just(1.1)
  jus2 = oneDotOne + 4
  return of(jus2)
}

where(maybe) {
  Just(x) =>
    IO.prettyLog(x)
}



makeInverter :: () -> (() -> Boolean)
makeInverter = (_) => {
  initial = false

  return (_) => {
    initial = !initial
    return initial
  }
}

inverter = makeInverter(())
IO.prettyLog(inverter(()))
IO.prettyLog(inverter(()))
IO.prettyLog(inverter(()))



makeCounter :: () -> (() -> String)
makeCounter = (_) => {
  count = ""

  innerCounter = (_) => {
    return (_) => {
      count = count ++ "1"
      return count
    }
  }

  return innerCounter(())
}

counter = makeCounter(())

IO.prettyLog(counter(()))
IO.prettyLog(counter(()))
counter2 = makeCounter(())
IO.prettyLog(counter2(()))
IO.prettyLog(counter(()))
IO.prettyLog(counter(()))
IO.prettyLog(counter2(()))
IO.prettyLog(counter2(()))
IO.prettyLog(counter2(()))


makeGrower :: () -> (Integer -> List Integer)
makeGrower = (_) => {
  initial = []

  return (n) => {
    initial = [...initial, n]
    return initial
  }
}

grower = makeGrower(())
grower(1)
grower(2)
grower(3)
grower(4)
IO.prettyLog(grower(10))
IO.prettyLog(grower(21))


makeCounterWithRec :: () -> (() -> Integer)
makeCounterWithRec = (_) => {
  count = { a: 0 }

  return (_) => {
    count = { a: count.a + 1 }
    return count.a
  }
}

c2 = makeCounterWithRec(())
c2(())
c2(())
c2(())
IO.prettyLog(c2(()))




inc = (a) => {
  b = "1"
  b = b ++ a
  return a ++ b
}

IO.prettyLog(inc("4"))


IO.prettyLog(2.2 == 2.2)
IO.prettyLog("2.2" == "2.2")
IO.prettyLog("2.2" == "2.4")



IO.prettyLog(true == true)


IO.prettyLog([1, 2, 3] == [1, 2, 3])
IO.prettyLog([1, 2, 3] == [1, 2, 3.3])


IO.prettyLog(Nothing == Nothing)
IO.prettyLog(Just(4) == Just(4))


moreThan15 = (a) => a >= 15

IO.prettyLog(moreThan15(15))

IO.prettyLog({ x: 4 } == { x: 4 })
IO.prettyLog({ xs: [1, 2, 3] } == { xs: [1, 2, 3, 4] })

rec = { x: 4 }
IO.prettyLog(rec == rec)


IO.prettyLog({ y: 4 } != { y: 5 })


cmp = (a, b) => a != b
IO.prettyLog(cmp(3, 4))

IO.prettyLog(cmp(true, false))

IO.prettyLog(cmp({ name: "John" }, { name: "John" }))



IO.prettyLog("ok" != "ok")
IO.prettyLog("ok" != "ok2")
