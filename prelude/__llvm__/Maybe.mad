import {} from "./Monad"


export type Maybe a
  = Just(a)
  | Nothing


instance Functor Maybe {
  map = (f) => where {
    Just(x) => Just(f(x))

    Nothing => Nothing
  }
}


instance Applicative Maybe {
  pure = Just

  ap = (mf, mx) => where(#[mf, mx]) {
    #[Just(f), Just(x)] => pure(f(x))

    _ => Nothing
  }
}


instance Monad Maybe {
  of = pure

  chain = (f, m) => (where(m) {
    Just(x) => f(x)

    Nothing => Nothing
  })
}
