import { yellow } from "./PrettyShow"
// import List from "./List"


showByte :: Byte -> String
showByte = extern "__byteToStr__"


instance Show Byte {
  show = showByte
}


instance PrettyShow Byte {
  ppShow = pipe(show, yellow)
}


// showWith :: (a -> String) -> List a -> String
// showWith = (with, list) => {
//   processItems = (processed, items) => where(items) {
//     [first, second, ...rest] =>
//       processItems(processed ++ with(first) ++ " ", List.push(second, rest))

//     [last] =>
//       processed ++ with(last)

//     [] =>
//       ""
//   }

//   return processItems("", list)
// }

// instance Show (List Byte) {
//   show = showWith(show)
// }

