import IO from "./IO"
import {} from "./List"
import {} from "./Tuple"
import {} from "./Integer"

/**
 * Dictionary represents a key - value data structure.
 *
 * @since 0.0.5
 */

dictConstructor :: List #[k, v] -> Dictionary k v
dictConstructor = extern "madlib__dictionary__typeConstructor"

Dictionary :: List #[k, v] -> Dictionary k v
Dictionary = dictConstructor

where(Dictionary([#[1, 4]])) {
  Dictionary(items) =>
    IO.log(show(items))
}


where({{ 1: 4, 2: 7 }}) {
  Dictionary(items) =>
    IO.log(show(items))
}





/**
 * Creates a Dictionary from a list of <key, value> tuples
 *
 * @since 0.0.5
 * @example
 * fromList([#["one", 2], #["two", 2]])
 * fromList([#["a", 2], #["b", 2], #["c", 3]])
 */
// fromList :: List (#[k, v]) -> Dictionary k v
// export fromList = pipe(
//   L.uniqueBy((a, b) => T.fst(a) == T.fst(b)),
//   Dictionary
// )

// /**
//  * The empty Dictionary
//  *
//  * @since 0.0.5
//  */
// empty :: Dictionary k v
// export empty = fromList([])


// /**
//  * Inserts a value into the Dictionary at a given key.
//  * However, if the key already exists, it updates the value at that key.
//  *
//  * @since 0.0.5
//  * @example
//  * insert(1, 2, empty)              // fromList([#[1, 2]])
//  * insert(1, 7, fromList([#[1, 2]])) // fromList([#[1, 7]])
//  */
// insert :: k -> v -> Dictionary k v -> Dictionary k v
// export insert = (k, v, m) => where(m) {
//   Dictionary(items) =>
//     L.reject(
//       (item) => where(item) {
//         #[kk, _] => kk == k
//       },
//       items
//     )
//     |> L.append(#[k, v])
//     |> Dictionary
// }

// /**
//  * Get a value from a Dictionary given a key.
//  *
//  * @since 0.0.5
//  * @example
//  * get("john", fromList([#["john", { age: 32 }]])) // Just({ age: 32 })
//  * get("paul", fromList([#["john", { age: 32 }]])) // Nothing
//  */
// get :: k -> Dictionary k v -> Maybe v
// export get = (k) => where {
//   Dictionary(items) => pipe(
//     L.find((item) => where(item) {
//       #[kk, _] => k == kk
//     }),
//     map(T.snd)
//   )(items)
// }


// /**
//  * List all keys in a Dictionary
//  *
//  * @since 0.0.5
//  * @example
//  * keys(fromList([#[true, "Go for it"], #[false, "NOGO"]])) // [true, false]
//  */
// keys :: Dictionary k v -> List k
// export keys = (m) => where(m) {
//   Dictionary(items) => map(T.fst, items)
// }

// /**
//  * List all values in a Dictionary
//  *
//  * @since 0.0.5
//  * @example
//  * values(fromList([#[true, "Go for it"], #[false, "NOGO"]])) // ["Go for it", "NOGO"]
//  */
// values :: Dictionary k v -> List v
// export values = (m) => where(m) {
//   Dictionary(items) => map(T.snd, items)
// }


// /**
//  * Enumerate the number of keys in a Dictionary
//  *
//  * @since 0.0.5
//  * @example
//  * len(fromList([#["Sidney", 3], #["New York", 18], #["London", 2]])) // 3
//  */
// len :: Dictionary k v -> Number
// export len = (m) => (m |> keys |> L.len)


// /**
//  * Map over a Dictionary with a function that takes the value and transforms it.
//  *
//  * @since 0.0.5
//  * @example
//  * map((x) => x / 2, fromList([#["Sidney", 3], #["New York", 18], #["London", 2]]))
//  * // fromList([#["Sidney", 1.5], #["New York", 9], #["London", 1]])
//  */
// instance Functor (Dictionary k) {
//   map = (fn) => where {
//     Dictionary(items) => map((i) => #[T.fst(i), fn(T.snd(i))], items) |> fromList
//   }
// }

// /**
//  * Map over a Dictionary with a function that takes the key and value and returns the new value. 
//  *
//  * @since 0.0.5
//  * @example
//  * mapWithKey(
//  *   (city, x) => city == "Sidney" ? 9 : x / 2,
//  *   fromList([#["Sidney", 3], #["New York", 18], #["London", 2]])
//  * )
//  * // fromList([#["Sidney", 9], #["New York", 9], #["London", 1]])
//  */
// mapWithKey :: (k -> v -> w) -> Dictionary k v -> Dictionary k w
// export mapWithKey = (fn) => where {
//   Dictionary(items) => map((i) => #[T.fst(i), fn(T.fst(i), T.snd(i))], items) |> fromList
// }

// /**
//  * Combine two Dictionaries together.
//  *
//  * @since 0.0.5
//  */
// merge :: Dictionary k v -> Dictionary k v -> Dictionary k v
// export merge = (a, b) => where(#[a, b]) {
//   #[Dictionary(itemsA), Dictionary(itemsB)] => L.concat(itemsA, itemsB) |> fromList
// }