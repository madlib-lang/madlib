import type { Wish } from "Wish"
import type { Error } from "__IOError__"

import { Wish } from "Wish"
import Error from "__IOError__"

export type Error

#iftarget js

#-
{Node}
import prelude_directory_fs from "fs"
{/Node}
-#

/**
 * Reads a directory and returns a Wish containing the file entries
 * of the directory at the path given as parameter.
 *
 * @since 0.13.0
 * @example
 * fulfill(
 *   IO.log,
 *   IO.log,
 *   read("/")
 * )
 * // ["bin", "dev", "etc", "home", "opt", "tmp", "usr"]
 */
read :: String -> Wish Error (List String)
export read = (path) => Wish((bad, good) => #- {
  prelude_file_fs.readdir(path, (err, files) => {
    if (err) {
      bad({ __constructor: "UnknownError", __args: [] })
    } else {
      if (files.length === 0) {
        good(null);
      } else {
        let result = {}
        let current = result
        files.forEach(f => {
          current = current.n = { v: f, n: null }
        })
        good(result.n);
      }
    }
  })
} -#)

#elseif llvm

readFFI :: String -> (Integer -> List String -> {}) -> {}
readFFI = extern "madlib__directory__read"

/**
 * Reads a directory and returns a Wish containing the file entries
 * of the directory at the path given as parameter.
 *
 * @since 0.13.0
 * @example
 * fulfill(
 *   IO.log,
 *   IO.log,
 *   read("/")
 * )
 * // ["bin", "dev", "etc", "home", "opt", "tmp", "usr"]
 */
read :: String -> Wish Error (List String)
export read = (path) => Wish((bad, good) =>
  readFFI(
    path,
    (libuvError, result) =>
      libuvError != 0
        ? bad(Error.fromLibuvError(libuvError))
        : good(result)
  )
)

#endif
