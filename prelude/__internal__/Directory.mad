import type { Wish } from "Wish"
import type { IOError } from "IOError"

import { Wish } from "Wish"
import IOError from "IOError"

#iftarget js

#-
{Node}
import fs from "fs"
{/Node}
-#

read :: String -> Wish IOError (List String)
export read = (path) => Wish((bad, good) => #- {
  fs.readdir(path, (err, files) => {
    if (err) {
      bad(IOError.UnknownError);
    } else {
      if (files.length === 0) {
        good(null);
      } else {
        let result = {}
        let current = result
        files.forEach(f => {
          current = current.n = { v: f, n: null }
        })
        good(result.n);
      }
    }
  })
} -#)

#elseif llvm

readFFI :: String -> (Integer -> List String -> {}) -> {}
readFFI = extern "madlib__directory__read"

read :: String -> Wish IOError (List String)
export read = (path) => Wish((bad, good) =>
  readFFI(
    path,
    (libuvError, result) =>
      libuvError != 0
        ? bad(IOError.fromLibuvError(libuvError))
        : good(result)
  )
)

#endif
