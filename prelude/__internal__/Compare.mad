export alias ComparisonResult = Number

export MORE = 1
export LESS = -1
export EQUAL = 0

interface Comparable a {
  compare :: a -> a -> ComparisonResult
}

instance Comparable Number {
  compare = (a, b) => a > b ? MORE : a == b ? EQUAL : LESS
}

instance Comparable String {
  compare = (a, b) => #- a > b ? MORE : a == b ? EQUAL : LESS -#
}

instance Comparable Boolean {
  compare = (a, b) => where(<a, b>) {
    <true, false> => MORE
    <false, true> => LESS
    _ => EQUAL
  }
}


gt :: Comparable a => a -> a -> Boolean
export gt = (a, b) => compare(a, b) == MORE

ge :: Comparable a => a -> a -> Boolean
export ge = (a, b) => compare(a, b) >= EQUAL

lt :: Comparable a => a -> a -> Boolean
export lt = (a, b) => compare(a, b) == LESS

le :: Comparable a => a -> a -> Boolean
export le = (a, b) => compare(a, b) <= EQUAL
