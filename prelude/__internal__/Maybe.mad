import {} from "Monad"
import {} from "Show"


/**
 * Maybe is one of the major data types in functional programming and serves to
 * represent and encapsulate values which may not exist.
 * 
 * Whereas other languages may use values like `null` / `nil` / `undefined`, Madlib provides this monadic
 * structure to encapsulate uncertainty in a computationally safe way.
 */


/**
 * The Maybe type is used to model uncertain values. It is ideal for values which may not exist,
 * and is used to provide safety and certainty when calculating against potentially uncertain or incorrect inputs.
 *
 * @since 0.0.5
 * @example
 * Just(3)     // Just(3) :: Maybe Number
 * Just(false) // Just(false) :: Maybe Boolean
 * Nothing     // Nothing :: Maybe a
 */
export type Maybe a
  = Just a
  | Nothing


/**
 * Map over a given Maybe, returning either Just the transformed value
 * (in the case of successful computation) or Nothing.
 *
 * @since 0.0.6
 * @example
 * map((x) => x + 1, Just(0)) // Just(1)
 * map((x) => x + 1, Nothing) // Nothing
 */
instance Functor Maybe {
  map = (f) => where
    is Just x : Just(f(x))
    is Nothing: Nothing
}


/**
 * Apply Maybe a function to Maybe a value.
 * If either is Nothing, return Nothing.
 *
 * @since 0.0.6
 * @example
 * ap(Just((x) => x + 1), Just(0)) // Just(1)
 * ap(Just((x) => x + 1), Nothing) // Nothing
 * ap(Nothing, Just(3))            // Nothing
 */
instance Applicative Maybe {
  pure = Just
  ap = (mf, mx) => where(<mf, mx>)
    is <Just f, Just x>: pure(f(x))
    is _               : Nothing
}


/**
 * Use `chain` to avoid a double-wrapped Maybe.
 * Instead of a Just of a Just, `chain` will flatten the contained transformation to be only one Monad deep.
 *
 * @since 0.0.6
 * @example
 * chain((x) => Just(x + 1), Just(1)) // Just(2)
 */
instance Monad Maybe {
  of = pure
  chain = (f, m) => (where(m) {
    is Just x : f(x)
    is Nothing: Nothing
  })
}


/**
 * Use `show` to transform a Maybe to a string. 
 *
 * @since 0.0.6
 * @example
 * show(Just(3))                   // "Just 3"
 * show((Nothing :: Maybe Number)) // "Nothing"
 */
instance Show a => Show (Maybe a) {
  show = where
    is Just a : "Just " ++ show(a)
    is Nothing: "Nothing"
}


/**
 * Extricate the value contained in a Just, or the given fallback value if given a Nothing
 *
 * @since 0.0.5
 * @example
 * fromMaybe(3, Just(4)) // 4
 * fromMaybe(3, Nothing) // 3
 */
fromMaybe :: a -> Maybe a -> a
export fromMaybe = (or) => where
  is Just a : a
  is Nothing: or
