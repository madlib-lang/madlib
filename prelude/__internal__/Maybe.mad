import _ from "Functor"
import __ from "Show"

export type Maybe a
  = Just a
  | Nothing

type User = LoggedIn String Number
          | Anonymous

u1 = LoggedIn("Matt")
u2 = Anonymous

o = u1(19)

getName :: User -> String
getName = (user) => where(user)
  is LoggedIn name _: name
  is Anonymous      : "Somebody"

instance Functor Maybe {
  map = (f) => where
    is Just x : Just(f(x))
    is Nothing: Nothing
}

instance Show a => Show (Maybe a) {
  show = where
    is Just a : "Just " ++ show(a)
    is Nothing: "Nothing"
}

chain :: (a -> Maybe b) -> Maybe a -> Maybe b
export chain = (f, m) => (where(m) {
  is Just x : f(x)
  is Nothing: Nothing
})

fromMaybe :: a -> Maybe a -> a
export fromMaybe = (or) => where
  is Just a : a
  is Nothing: or
