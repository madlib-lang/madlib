import {} from "Monoid"
import {} from "Show"

instance Semigroup String {
  assoc = (a, b) => a ++ b
}

instance Monoid String {
  mempty = ""
  mappend = (a, b) => a ++ b
}

instance Show String {
  show = (a) => a
}

replace :: String -> String -> String -> String
export replace = (regex, replacing, input) => (#-
  input.replace(new RegExp(regex), replacing)
-#)

split :: String -> String -> List String
export split = (separator, str) => (#- str.split(separator) -#)

lines :: String -> List String
export lines = split("\n")

mapChars :: (String -> String) -> String -> String
export mapChars = (f, s) => #- s.split("").map(f).join("") -#
