import {} from "Monoid"
import {} from "Show"
import type { Maybe } from "Maybe"
import { Just, Nothing } from "Maybe"

instance Semigroup String {
  assoc = (a, b) => a ++ b
}

instance Monoid String {
  mempty = ""
  mappend = (a, b) => a ++ b
}

instance Show String {
  show = (a) => a
}

toLower :: String -> String
export toLower = (s) => #- s.toLowerCase() -#

toUpper :: String -> String
export toUpper = (s) => #- s.toUpperCase() -#

replace :: String -> String -> String -> String
export replace = (regex, replacing, input) => (#-
  input.replace(new RegExp(regex), replacing)
-#)

split :: String -> String -> List String
export split = (separator, str) => (#- str.split(separator) -#)

lines :: String -> List String
export lines = split("\n")

mapChars :: (String -> String) -> String -> String
export mapChars = (f, s) => #- s.split("").map(f).join("") -#

slice :: Number -> Number -> String -> String
export slice = (start, end, s) => #- s.slice(start, end) -#

isEmpty :: String -> Boolean
export isEmpty = (s) => #- !s -#

nthChar :: Number -> String -> Maybe String
export nthChar = (n, s) => #-{
  const c = s[n]
  return !!c ? Just(c) : Nothing
}-#

firstChar :: String -> Maybe String
export firstChar = nthChar(0)

lastChar :: String -> Maybe String
export lastChar = (s) => nthChar(len(s) - 1, s)

drop :: Number -> String -> String
export drop = (n, s) => slice(n, len(s), s)

dropLast :: Number -> String -> String
export dropLast = (n, s) => slice(0, -n, s)

/**
 * Returns true if the character is a letter, false otherwise. Note that if the
 * input contains more than one character, false is returned.
 */
isLetter :: String -> Boolean
export isLetter = (s) => #-{
  if (s.length !== 1) {
    return false
  }

  return RegExp(/^\p{L}/,'u').test(s)
}-#

len :: String -> Number
export len = (s) => #- s.length -#

/**
 * Returns true if the character is a digit, false otherwise. Note that if the
 * input contains more than one character, false is returned.
 */
isDigit :: String -> Boolean
export isDigit = (s) => len(s) != 1
  ? false
  : s == "0" ||
    s == "1" ||
    s == "2" ||
    s == "3" ||
    s == "4" ||
    s == "5" ||
    s == "6" ||
    s == "7" ||
    s == "8" ||
    s == "9"

repeat :: Number -> String -> String
export repeat = (n, s) => #- s.repeat(n) -#

match :: String -> String -> Boolean
export match = (regex, input) => #- input.match(regex) -#
