import type { Maybe } from "Maybe"
import {} from "Monoid"
import List from "List"

#iftarget js

import { Just, Nothing } from "Maybe"
import { MORE, LESS, EQUAL } from "Compare"

#endif



instance Semigroup String {
  assoc = (a, b) => a ++ b
}

instance Monoid String {
  mempty = ""
  mconcat = (a, b) => a ++ b
}

#iftarget js

instance Comparable String {
  compare = (a, b) => #- a > b ? MORE : a === b ? EQUAL : LESS -#
}

#elseif llvm

import type { ComparisonResult } from "Compare"

stringCompare :: String -> String -> ComparisonResult
stringCompare = extern "madlib__string__compare"

instance Comparable String {
  compare = stringCompare
}

#endif


#iftarget js

toLower :: String -> String
export toLower = (s) => #- s.toLowerCase() -#

toUpper :: String -> String
export toUpper = (s) => #- s.toUpperCase() -#

#elseif llvm

toLower :: String -> String
export toLower = extern "madlib__string__toLower"

toUpper :: String -> String
export toUpper = extern "madlib__string__toUpper"

#endif


#iftarget js

replace :: String -> String -> String -> String
export replace = (regex, replacing, input) => (#-
  input.replace(new RegExp(regex), replacing)
-#)

#elseif llvm

replace :: String -> String -> String -> String
export replace = extern "madlib__string__replace"

#endif


#iftarget js

split :: String -> String -> List String
export split = (separator, str) => #- {
  const items = str.split(separator)

  if (items.length === 0) {
    return null
  }

  let current = {}
  let output = current
  items.forEach((item) => {
    current = current.n = {}
    current.v = item
  })
  current.n = null

  return output.n
} -#

#elseif llvm

split :: String -> String -> List String
export split = extern "madlib__string__split"

#endif

lines :: String -> List String
export lines = split("\n")


/**
 * Joins a list with a separator and returns a String.
 *
 * IMPORTANT:
 * When coming from JS, beware that there is a small difference with Array.prototype.join.
 * In JS, join relies on its dynamic nature and accepts any type as being valid, and transforms it
 * to a string for you. In Madlib you need to provide an instance of Show for your custom types, and
 * for Madlib types (eg. tuples, List, Boolean, Maybe) it uses the Show instance defined for them.
 *
 * @since 0.0.5
 * @example
 * join(" and ", ["cats", "dogs"])   // "cats and dogs"
 * join("", ["one", "two", "three"]) // "onetwothree"
 */
join :: String -> List String -> String
export join = (a, xs) => pipe(
  List.intersperse(a),
  List.reduce(mconcat, "")
)(xs)


/**
 * Transform a List of Strings into a single String,
 * by adding newlines between each item in the List.
 *
 * @since 0.0.5
 * @example
 * unlines(["line1", "line2", "line3"]) // "line1\nline2\nline3"
 */
unlines :: List String -> String
export unlines = join("\n")


#iftarget js

toList :: String -> List Char
export toList = (str) => #- {
  let result = {}
  let current = result
  str.split('').forEach(c => {
    current = current.n = { v: c, n: null }
  })
  return result.n
} -#


fromList :: List Char -> String
export fromList = (list) => #- {
  let chars = []
  while (list !== null) {
    chars.push(list.v)
    list = list.n
  }
  return chars.join('')
} -#

#elseif llvm

toList :: String -> List Char
export toList = extern "madlib__string__toList"


fromList :: List Char -> String
export fromList = extern "madlib__string__fromList"

#endif


#iftarget js

mapChars :: (Char -> Char) -> String -> String
export mapChars = (f, s) => #- s.split("").map(f).join("") -#

#elseif llvm

mapChars :: (Char -> Char) -> String -> String
export mapChars = extern "madlib__string__mapChars"

#endif


filterChars :: (Char -> Boolean) -> String -> String
export filterChars = (predicate, s) => pipe(
  toList,
  List.filter(predicate),
  fromList
)(s)


reduceChars :: (a -> Char -> a) -> a -> String -> a
export reduceChars = (f, initial, s) => pipe(
  toList,
  List.reduce(f, initial)
)(s)


#iftarget js

slice :: Integer -> Integer -> String -> String
export slice = (start, end, s) => #- s.slice(start, end === 0 ? s.length : end) -#

#elseif llvm

slice :: Integer -> Integer -> String -> String
export slice = extern "madlib__string__slice"

#endif

isEmpty :: String -> Boolean
export isEmpty = (s) => s == ""


drop :: Integer -> String -> String
export drop = (n, s) => slice(n, 0, s)


dropLast :: Integer -> String -> String
export dropLast = (n, s) => slice(0, -n, s)


take :: Integer -> String -> String
export take = (n, s) => slice(0, n, s)


takeLast :: Integer -> String -> String
export takeLast = (n, s) => slice(-n, 0, s)


#iftarget js

// TODO: implement llvm version
charAt :: Integer -> String -> Maybe Char
export charAt = (n, s) => #-{
  const c = s[n]
  return !!c ? Just(c) : Nothing
}-#

#elseif llvm

charAt :: Integer -> String -> Maybe Char
export charAt = extern "madlib__string__charAt"

#endif

firstChar :: String -> Maybe Char
export firstChar = charAt(0)

lastChar :: String -> Maybe Char
export lastChar = (s) => charAt(length(s) - 1, s)

#iftarget js

trim :: String -> String
export trim = (s) => #- s.trim() -#

trimStart :: String -> String
export trimStart = (s) => #- s.trimStart() -#

trimEnd :: String -> String
export trimEnd = (s) => #- s.trimEnd() -#

#elseif llvm

trim :: String -> String
export trim = extern "madlib__string__trim"

trimStart :: String -> String
export trimStart = extern "madlib__string__trimStart"

trimEnd :: String -> String
export trimEnd = extern "madlib__string__trimEnd"

#endif


#iftarget js

length :: String -> Integer
export length = (s) => #- s.length -#

#elseif llvm

length :: String -> Integer
export length = extern "madlib__string__length"

#endif

repeat :: Char -> Integer -> String
export repeat = (c, n) => pipe(
  List.repeat(c),
  fromList
)(n)

#iftarget js

match :: String -> String -> Boolean
export match = (regex, input) => #- input.match(regex) -#

#elseif llvm

match :: String -> String -> Boolean
export match = extern "madlib__string__match"

#endif

#iftarget js

pushChar :: Char -> String -> String
export pushChar = (c, s) => #- c + s -#

appendChar :: Char -> String -> String
export appendChar = (c, s) => #- s + c -#

#elseif llvm

pushChar :: Char -> String -> String
export pushChar = extern "madlib__string__pushChar"

appendChar :: Char -> String -> String
export appendChar = extern "madlib__string__appendChar"

#endif

// TODO: add the following
// dropWhile
// takeWhile
// reverse
