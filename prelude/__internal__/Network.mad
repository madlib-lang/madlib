import type { Maybe } from "Maybe"

import Byte from "Byte"
import List from "List"
import { Just, Nothing } from "Maybe"
import Short from "Short"
import String from "String"



alias RawNetworkInterfaceFragment = {
  ipv4 :: Maybe String,
  ipv4Mask :: Maybe String,
  ipv6 :: Maybe String,
  ipv6Mask :: Maybe String,
  isInternal :: Boolean,
  name :: String,
}

export type IpV4 = IpV4(Short, Short, Short, Short)

export alias InterfaceAddress = {
  ipv4 :: Maybe IpV4,
  ipv4Mask :: Maybe IpV4,
  ipv6 :: Maybe String,
  ipv6Mask :: Maybe String,
  isInternal :: Boolean,
}

export alias Interface = { addresses :: List InterfaceAddress, name :: String }

readNetworkInterfacesFFI :: {} -> List RawNetworkInterfaceFragment
readNetworkInterfacesFFI = extern "madlib__network__readNetworkInterfaces"


makeInterfaceAddress = (formattedFragment) => (
  {
    isInternal: formattedFragment.isInternal,
    ipv4: formattedFragment.ipv4,
    ipv4Mask: formattedFragment.ipv4Mask,
    ipv6: formattedFragment.ipv6,
    ipv6Mask: formattedFragment.ipv6Mask,
  }
)


ipv4FromString :: String -> Maybe IpV4
ipv4FromString = (src) => pipe(
  String.split("."),
  map(scan),
  where {
    [Just(a), Just(b), Just(c), Just(d)] =>
      Just(IpV4(a, b, c, d))

    _ =>
      Nothing
  },
)(src)


getInterfaces :: {} -> List Interface
export getInterfaces = () => pipe(
  map(
    (fragment) => (
      {
        ...fragment,
        ipv4: chain(ipv4FromString, fragment.ipv4),
        ipv4Mask: chain(ipv4FromString, fragment.ipv4Mask),
      }
    ),
  ),
  List.reduce(
    (result, addr) => List.upsertWith(
      (entry) => entry.name == addr.name,
      where {
        Just({ name, addresses }) =>
          { name, addresses: [makeInterfaceAddress(addr), ...addresses] }

        Nothing =>
          { name: addr.name, addresses: [makeInterfaceAddress(addr)] }
      },
      result,
    ),
    [],
  ),
)(readNetworkInterfacesFFI())
