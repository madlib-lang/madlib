import W from "Wish"


export type CommandError = CommandError Number String

#- import { exec as execJs, spawn as spawnJs } from "child_process" -#

exec :: String -> W.Wish CommandError String
export exec = (command) => W.Wish((bad, good) => #- {
    execJs(command, (err, stdout, stderr) => {
      if (err) {
        bad(CommandError(err.code, err.message))
      }
      else {
        good(stdout)
      }
    })
  }
-#)

spawn :: String -> W.Wish CommandError Number
export spawn = (command) => W.Wish((bad, good) => #- {
    const split = command.split(" ")
    const spawned = spawnJs(split[0], split.slice(1));

    spawned.stdout.on('data', (data) => {
      process.stdout.write(data.toString());
    });

    spawned.stderr.on('data', (data) => {
      process.stderr.write(data.toString());
    });

    spawned.on('close', (code) => {
      if (code === 0) {
        good(0);
      }
      else {
        bad(code)
      }
    })
  }
-#)


getArgs :: W.Wish String (List String)
export getArgs = of(#-process.argv.slice(2)-#)

getEnv :: String -> W.Wish String String
export getEnv = (name) => (#- {
  const envVar = process.env[name];
  return envVar === undefined ? W.bad("Not found") : W.good(envVar)
} -#)
