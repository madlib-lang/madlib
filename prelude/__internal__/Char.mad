import {} from "Show"
import String from "String"

#iftarget js

import { MORE, LESS, EQUAL } from "Compare"

instance Comparable Char {
  compare = (a, b) => #- a > b ? MORE : a === b ? EQUAL : LESS -#
}

#elseif llvm

import type { ComparisonResult } from "Compare"
import {} from "Compare"

charCompare :: Char -> Char -> ComparisonResult
charCompare = extern "madlib__char__compare"

instance Comparable Char {
  compare = charCompare
}

#endif

#iftarget js

instance Show Char {
  show = (x) => #- x -#
}

#elseif llvm

showChar :: Char -> String
showChar = extern "madlib__char__internal__show"

instance Show Char {
  show = showChar
}

#endif

/**
 * Returns true if the character is a digit, false otherwise.
 */
isDigit :: Char -> Boolean
export isDigit = (s) =>
  s == '0' ||
  s == '1' ||
  s == '2' ||
  s == '3' ||
  s == '4' ||
  s == '5' ||
  s == '6' ||
  s == '7' ||
  s == '8' ||
  s == '9'


/**
 * Returns true if the character is a letter, false otherwise. Note that if the
 * input contains more than one character, false is returned.
 */
isLetter :: Char -> Boolean
export isLetter = (c) => pipe(
  show,
  String.match("[a-zA-Z]+")
)(c)


#iftarget js

toLower :: Char -> Char
export toLower = (c) => #- c.toLowerCase() -#

toUpper :: Char -> Char
export toUpper = (c) => #- c.toUpperCase() -#

#elseif llvm

toLower :: Char -> Char
export toLower = extern "madlib__char__toLower"

toUpper :: Char -> Char
export toUpper = extern "madlib__char__toUpper"

#endif
