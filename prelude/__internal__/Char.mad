import {} from "Show"

#iftarget js

import { MORE, LESS, EQUAL } from "Compare"

instance Comparable Char {
  compare = (a, b) => #- a > b ? MORE : a === b ? EQUAL : LESS -#
}

#elseif llvm

import type { ComparisonResult } from "Compare"
import {} from "Compare"

charCompare :: Char -> Char -> ComparisonResult
charCompare = extern "madlib__char__compare"

instance Comparable Char {
  compare = charCompare
}

#endif

#iftarget js

instance Show Char {
  show = (x) => #- x -#
}

#elseif llvm

showChar :: Char -> String
showChar = extern "madlib__char__internal__show"

instance Show Char {
  show = showChar
}

#endif

/**
 * Returns true if the character is a digit, false otherwise.
 */
isDigit :: Char -> Boolean
export isDigit = (s) =>
  s == '0' ||
  s == '1' ||
  s == '2' ||
  s == '3' ||
  s == '4' ||
  s == '5' ||
  s == '6' ||
  s == '7' ||
  s == '8' ||
  s == '9'


// TODO: reconsider this and how we want to implement it
/**
 * Returns true if the character is a letter, false otherwise. Note that if the
 * input contains more than one character, false is returned.
 */
// isLetter :: String -> Boolean
// export isLetter = (s) => #-{
//   if (s.length !== 1) {
//     return false
//   }

//   return RegExp(/^\p{L}/,'u').test(s)
// }-#
