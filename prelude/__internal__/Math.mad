/**
 * Sum two numbers
 *
 * @since 0.0.5
 */
add :: Number a => a -> a -> a
export add = (a, b) => (a + b)

/**
 * Calculate the difference between two numbers
 *
 * @since 0.0.5
 */
subtract :: Number a => a -> a -> a
export subtract = (a, b) => (a - b)

/**
 * Return the product of two numbers
 *
 * @since 0.0.5
 */
multiply :: Number a => a -> a -> a
export multiply = (a, b) => (a * b)

/**
 * Calculate how many times a number can be contained in another number
 *
 * @since 0.0.5
 */
divide :: Float -> Float -> Float
export divide = (a, b) => (a / b)


/**
 * Return the euclidean division of one number by another
 *
 * @since 0.0.5
 */
mod :: Integer -> Integer -> Integer
export mod = (a, b) => (a % b)


#iftarget js

/**
 * Find the number which, when multiplied by itself equals the given number. 
 *
 * @since 0.0.5
 */
sqrt :: Float -> Float
export sqrt = (n) => #- { return Math.sqrt(n) } -#

round :: Float -> Float
export round = (n) => #- { return Math.round(n) } -#

ceil :: Float -> Float
export ceil = (n) => #- { return Math.ceil(n) } -#

floor :: Float -> Float
export floor = (n) => #- { return Math.floor(n) } -#

pow :: Float -> Float -> Float
export pow = (a, b) => #- { return Math.pow(a, b) } -#

random :: a -> Float
export random = #- Math.random -#

sin :: Float -> Float
export sin = (x) => #- { return Math.sin(x) } -#

cos :: Float -> Float
export cos = (x) => #- { return Math.cos(x) } -#

tan :: Float -> Float
export tan = (x) => #- { return Math.tan(x) } -#

atan :: Float -> Float
export atan = (x) => #- { return Math.atan(x) } -#

atan2 :: Float -> Float -> Float
export atan2 = (x, y) => #- { return Math.atan2(x, y) } -#

#elseif llvm

sqrt :: Float -> Float
export sqrt = extern "madlib__math__sqrt"

round :: Float -> Float
export round = extern "madlib__math__round"

ceil :: Float -> Float
export ceil = extern "madlib__math__ceil"

floor :: Float -> Float
export floor = extern "madlib__math__floor"

pow :: Float -> Float -> Float
export pow = extern "madlib__math__pow"

random :: a -> Float
export random = extern "madlib__math__random"

sin :: Float -> Float
export sin = extern "madlib__math__sin"

cos :: Float -> Float
export cos = extern "madlib__math__cos"

tan :: Float -> Float
export tan = extern "madlib__math__tan"

atan :: Float -> Float
export atan = extern "madlib__math__atan"

atan2 :: Float -> Float -> Float
export atan2 = extern "madlib__math__atan2"

#endif


/**
 * Find the result of a number times itself
 *
 * @since 0.0.5
 */
square :: Number a => a -> a
export square = (n) => n * n


/**
 * Returns the smallest number from the two given
 * @since 0.12.0
 */
min :: Comparable a => a -> a -> a
export min = (a, b) => a > b ? b : a


/**
 * Returns the biggest number from the two given
 * @since 0.12.0
 */
max :: Comparable a => a -> a -> a
export max = (a, b) => a > b ? a : b


abs :: (Number a, Comparable a) => a -> a
export abs = (a) => a < 0 ? -a : a
