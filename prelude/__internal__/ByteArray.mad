// TODO: Add filter, ap and chain

#iftarget llvm

fromList :: List Byte -> ByteArray
export fromList = extern "madlib__bytearray__fromList"

toList :: ByteArray -> List Byte
export toList = extern "madlib__bytearray__toList"

fromString :: String -> ByteArray
export fromString = extern "madlib__bytearray__fromString"

toString :: ByteArray -> String
export toString = extern "madlib__bytearray__toString"

length :: ByteArray -> Integer
export length = extern "madlib__bytearray__length"

concat :: ByteArray -> ByteArray -> ByteArray
export concat = extern "madlib__bytearray__concat"

mapBytes :: (Byte -> Byte) -> ByteArray -> ByteArray
export mapBytes = extern "madlib__bytearray__map"

reduce :: (Byte -> Byte -> a) -> a -> ByteArray -> a
export reduce = extern "madlib__bytearray__reduce"

#elseif js

toString :: ByteArray -> String
export toString = (byteArray) => #- new TextDecoder().decode(byteArray) -#

fromString :: String -> ByteArray
export fromString = (str) => #- new TextEncoder().encode(str) -#

toList :: ByteArray -> List Byte
export toList = (byteArray) => #- {
  if (byteArray.length === 0) {
    return null
  }

  let current = {}
  let result = current
  byteArray.forEach((byte) => {
    current = current.n = { v: byte, n: null }
  })
  return result.n
} -#

fromList :: List Byte -> ByteArray
export fromList = (bytes) => #- {
  let bytesArray = []
  while (bytes !== null) {
    bytesArray.push(bytes.v)
    bytes = bytes.n
  }
  return Uint8Array.from(bytesArray)
} -#

concat :: ByteArray -> ByteArray -> ByteArray
export concat = (byteArray1, byteArray2) => #- {
  const result = new Uint8Array(byteArray1.length + byteArray2.length);
  result.set(byteArray1);
  result.set(byteArray2, byteArray1.length);
  return result;
} -#

mapBytes :: (Byte -> Byte) -> ByteArray -> ByteArray
export mapBytes = (f, byteArray) => #- byteArray.map(f) -#

reduce :: (Byte -> Byte -> a) -> a -> ByteArray -> a
export reduce = (f, initialValue, byteArray) => #- byteArray.reduce((a, b) => f(a)(b), initialValue) -#

/**
 * Returns the length of a ByteArray.
 *
 * @since 0.7.0
 */
length :: ByteArray -> Integer
export length = (byteArray) => #- byteArray.length -#

#endif

empty :: ByteArray
export empty = fromList([])
