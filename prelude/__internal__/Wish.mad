import _ from "Monad"

export type Wish e a = Wish ((e -> f) -> (a -> b) -> ())


instance Functor (Wish e) {
  map = (f, m) => Wish((badCB, goodCB) =>
    where(m)
      is Wish run: run(badCB, (x) => (goodCB(f(x))))
  )
}

instance Applicative (Wish e) {
  pure = (a) => Wish((_, goodCB) => goodCB(a))

  ap = (mf, m) => Wish((badCB, goodCB) => where(<mf, m>)
    is <Wish runMF, Wish runM>:
      runM(
        badCB,
        (x) => runMF(
          badCB,
          (f) => goodCB(f(x))
        )
      )
  )
}

instance Monad (Wish e) {
  of = pure

  chain = (f, m) => Wish((badCB, goodCB) =>
    where(m) 
      is Wish run:
        run(badCB, (x) =>
          where(f(x))
            is Wish r: r(badCB, goodCB)
        )
  )
}


mapRej :: (e -> f) -> Wish e a -> Wish f a
export mapRej = (f, m) => (
  Wish((badCB, goodCB) => (
    where(m) {
      is Wish run: run((x) => (badCB(f(x))), goodCB)
    }
  ))
)


chainRej :: (e -> Wish f a) -> Wish e a -> Wish f a
export chainRej = (f, m) => (
  Wish((badCB, goodCB) => (
    where(m) {
      is Wish run: run((x) => (
        where(f(x)) {
          is Wish r: r(badCB, goodCB)
        }
      ), goodCB)
    }
  ))
)


good :: a -> Wish e a
export good = (a) => Wish((_, goodCB) => goodCB(a))

bad :: e -> Wish e a
export bad = (e) => (
  Wish((badCB, _) => (badCB(e)))
)


getWishFn = where is Wish run: run

parallel :: List (Wish e a) -> Wish e (List a)
export parallel = (wishes) => (
  Wish((badCB, goodCB) => (#- {
    const l = wishes.length
    let ko = false;
    let ok = 0;
    const out = new Array(l);
    const next = j => (j === l && goodCB(out))
    const fork = (w, j) => (getWishFn(w)(
      e => ko || (badCB(e), ko = true),
      x => ko || (out[j] = x, next(++ok))
    ));
    wishes.forEach(fork);

    if (l === 0) {
      goodCB([])
    }
  } -#))
)


fulfill :: (e -> f) -> (a -> b) -> Wish e a -> ()
export fulfill = (badCB, goodCB, m) => {
  where(m) {
    is Wish run: #- setTimeout(() => run(badCB, goodCB), 0); -#
  }

  return ()
}


after :: Number -> a -> Wish e a
export after = (time, a) => Wish((_, goodCB) => #- {
  setTimeout(() => goodCB(a), time);
} -#)
