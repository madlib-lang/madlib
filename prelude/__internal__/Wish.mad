import {} from "Monad"
import {} from "Bifunctor"
import { sortBy, length } from "List"
import Tuple from "Tuple"
import {} from "Number"


/**
 * Wish represents an async computation that needs to be fulfilled. It is
 * cold and will only be run when fulfilled.
 */

export type Wish e a = Wish((e -> f) -> (a -> b) -> {})

/**
 * The functor instance of Wish provides a way to map over the value it contains.
 *
 * @since 0.0.5
 * @example
 * map((x) => x + 1, good(3)) // good(4)
 * map((x) => x + 1, bad(3))  // bad(3)
 */
instance Functor (Wish e) {
  map = (f, m) => Wish((badCB, goodCB) => where(m) {
    Wish(run) =>
      run(badCB, (x) => (goodCB(f(x))))
  })
}


instance Applicative (Wish e) {
  pure = (a) => Wish((_, goodCB) => goodCB(a))

  ap = (mf, m) => Wish((badCB, goodCB) => where(#[mf, m]) {
    #[Wish(runMF), Wish(runM)] =>
      runM(
        badCB,
        (x) => runMF(
          badCB,
          (f) => goodCB(f(x))
        )
      )
    }
  )
}

instance Monad (Wish e) {
  of = pure

  chain = (f, m) => Wish((badCB, goodCB) => where(m) {
    Wish(run) => run(badCB, (x) => where(f(x)) { Wish(r) => r(badCB, goodCB) })
  })
}

instance Bifunctor Wish {
  bimap = (leftF, rightF, m) => Wish((badCB, goodCB) => where(m) {
    Wish(run) => run(pipe(leftF, badCB), pipe(rightF, goodCB))
  })

  mapFirst = mapRej
  mapSecond = map
}


/**
 * Maps over the rejected value.
 *
 * @since 0.0.5
 * @example
 * mapRej((x) => x + 1, bad(3))  // bad(4)
 * mapRej((x) => x + 1, good(3)) // good(3)
 */
mapRej :: (e -> f) -> Wish e a -> Wish f a
export mapRej = (f, m) =>
  Wish((badCB, goodCB) =>
    where(m) { Wish(run) => run((x) => (badCB(f(x))), goodCB) }
  )


/**
 * Chains over the rejected value.
 *
 * @since 0.0.5
 * @example
 * chainRej((x) => good(x + 1), bad(3)) // good(4)
 */
chainRej :: (e -> Wish f a) -> Wish e a -> Wish f a
export chainRej = (f, m) => Wish((badCB, goodCB) =>
  where(m) {
    Wish(run) => run((x) => (
      where(f(x)) {
        Wish(r) => r(badCB, goodCB)
      }
    ), goodCB)
  }
)


bichain :: (a -> Wish c d) -> (b -> Wish c d) -> Wish a b -> Wish c d
export bichain = (badF, goodF, m) => Wish((badCB, goodCB) =>
  where(m) {
    Wish(run) =>
      run(
        (x) => where(badF(x)) { Wish(r) => r(badCB, goodCB) },
        (x) => where(goodF(x)) { Wish(r) => r(badCB, goodCB) }
      )
  }
)


good :: a -> Wish e a
export good = (a) => Wish((_, goodCB) => goodCB(a))

bad :: e -> Wish e a
export bad = (e) => Wish((badCB, _) => badCB(e))


parallelN :: Integer -> List (Wish e a) -> Wish e (List a)
export parallelN = (concurrent, wishes) => Wish((badCB, goodCB) => {
  amountOfWishesToProcess = length(wishes)
  ko = false
  ok = 0
  runningWishes = 0
  wishesNotStarted = wishes
  indexOfLastStartedWish = 0

  result :: List #[Integer, a]
  result = []

  fork :: Integer -> List (Wish e a) -> {}
  fork = (index, ws) => where(ws) {
    [wish, ...nextWishes] =>
      do {
        wishesNotStarted = nextWishes
        runningWishes = runningWishes + 1
        indexOfLastStartedWish = indexOfLastStartedWish + 1

        where(wish) {
          Wish(run) =>
            run(
              (err) =>
                if (!ko) do {
                  ko = true
                  return badCB(err)
                },
              (x) => {
                result = [#[index, x], ...result]
                ok = ok + 1
                runningWishes = runningWishes - 1
                return ok == amountOfWishesToProcess
                  ? pipe(
                      sortBy((a, b) => compare(Tuple.fst(a), Tuple.fst(b))),
                      map(Tuple.snd),
                      goodCB
                    )(result)
                  : fork(indexOfLastStartedWish + 1, wishesNotStarted)
              }
            )
        }

        if (concurrent < 0 || runningWishes < concurrent) {
          fork(indexOfLastStartedWish, wishesNotStarted)
        }
      }

    [] =>
      amountOfWishesToProcess == 0
        ? goodCB([])
        : {}
  }

  return fork(0, wishes)
})


parallel :: List (Wish e a) -> Wish e (List a)
export parallel = parallelN(-1)


discardError :: (e -> a) -> Wish e a -> Wish {} a
export discardError = (recover, wish) => Wish((_, goodCB) => where(wish) {
  Wish(run) =>
    run(pipe(recover, goodCB), goodCB)
})


#iftarget js

fulfill :: (e -> f) -> (a -> b) -> Wish e a -> {}
export fulfill = (badCB, goodCB, m) => {
  where(m) {
    Wish(run) => #- setTimeout(() => run(badCB)(goodCB), 0); -#
  }

  return {}
}


after :: Integer -> a -> Wish e a
export after = (time, a) => Wish((_, goodCB) => #- {
  setTimeout(() => goodCB(a), time);
} -#)

#elseif llvm

fulfill :: (e -> f) -> (a -> b) -> Wish e a -> {}
export fulfill = (badCB, goodCB, m) => {
  where(m) {
    Wish(run) =>
      setTimeout(() => run(badCB, goodCB), 0)
  }

  return {}
}


setTimeout :: ({} -> a) -> Integer -> {}
setTimeout = extern "__setTimeout__"


after :: Integer -> a -> Wish e a
export after = (time, a) => Wish((_, goodCB) => setTimeout(() => goodCB(a), time))

#endif
