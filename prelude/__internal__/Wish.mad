import {} from "Monad"
import {} from "Bifunctor"


/**
 * Wish represents an async computation that needs to be fulfilled. It is
 * cold and will only be run when fulfilled.
 */

export type Wish e a = Wish ((e -> f) -> (a -> b) -> ())

/**
 * The functor instance of Wish provides a way to map over the value it contains.
 *
 * @since 0.0.5
 * @example
 * map((x) => x + 1, good(3)) // good(4)
 * map((x) => x + 1, bad(3))  // bad(3)
 */
instance Functor (Wish e) {
  map = (f, m) => Wish((badCB, goodCB) =>
    where(m) { Wish run => run(badCB, (x) => (goodCB(f(x)))) }
  )
}


instance Applicative (Wish e) {
  pure = (a) => Wish((_, goodCB) => goodCB(a))

  ap = (mf, m) => Wish((badCB, goodCB) => where(<mf, m>) {
    <Wish runMF, Wish runM> =>
      runM(
        badCB,
        (x) => runMF(
          badCB,
          (f) => goodCB(f(x))
        )
      )
    }
  )
}

instance Monad (Wish e) {
  of = pure

  chain = (f, m) => Wish((badCB, goodCB) => where(m) {
    Wish run => run(badCB, (x) => where(f(x)) { Wish r => r(badCB, goodCB) })
  })
}

instance Bifunctor Wish {
  bimap = (leftF, rightF, m) => Wish((badCB, goodCB) => where(m) {
    Wish run => run(pipe(leftF, badCB), pipe(rightF, goodCB))
  })

  mapFirst = mapRej
  mapSecond = map
}


/**
 * Maps over the rejected value.
 *
 * @since 0.0.5
 * @example
 * mapRej((x) => x + 1, bad(3))  // bad(4)
 * mapRej((x) => x + 1, good(3)) // good(3)
 */
mapRej :: (e -> f) -> Wish e a -> Wish f a
export mapRej = (f, m) => (
  Wish((badCB, goodCB) => (
    where(m) { Wish run => run((x) => (badCB(f(x))), goodCB) }
  ))
)

/**
 * Chains over the rejected value.
 *
 * @since 0.0.5
 * @example
 * chainRej((x) => good(x + 1), bad(3)) // good(4)
 */
chainRej :: (e -> Wish f a) -> Wish e a -> Wish f a
export chainRej = (f, m) => (
  Wish((badCB, goodCB) => (
    where(m) {
      Wish run => run((x) => (
        where(f(x)) {
          Wish r => r(badCB, goodCB)
        }
      ), goodCB)
    }
  ))
)

bichain :: (a -> Wish c d) -> (b -> Wish c d) -> Wish a b -> Wish c d
export bichain = (badF, goodF, m) => Wish((badCB, goodCB) =>
  where(m) {
    Wish run =>
      run(
        (x) => where(badF(x)) { Wish r => r(badCB, goodCB) },
        (x) => where(goodF(x)) { Wish r => r(badCB, goodCB) }
      )
  }
)


good :: a -> Wish e a
export good = (a) => Wish((_, goodCB) => goodCB(a))

bad :: e -> Wish e a
export bad = (e) => Wish((badCB, _) => badCB(e))



getWishFn = where { Wish run => run }

parallel :: List (Wish e a) -> Wish e (List a)
export parallel = (wishes) => (
  Wish((badCB, goodCB) => (#- {
    const l = wishes.length
    let ko = false;
    let ok = 0;
    const out = new Array(l);
    const next = j => (j === l && goodCB(out))
    const fork = (w, j) => (getWishFn(w)(
      e => ko || (badCB(e), ko = true))
      (x => ko || (out[j] = x, next(++ok))
    ));
    wishes.forEach(fork);

    if (l === 0) {
      goodCB([])
    }
  } -#))
)


fulfill :: (e -> f) -> (a -> b) -> Wish e a -> ()
export fulfill = (badCB, goodCB, m) => {
  where(m) {
    Wish run => #- setTimeout(() => run(badCB)(goodCB), 0); -#
  }

  return ()
}


after :: Number -> a -> Wish e a
export after = (time, a) => Wish((_, goodCB) => #- {
  setTimeout(() => goodCB(a), time);
} -#)
