import { assertEquals, test } from "Test"
import Set from "./Set"


test("fromList", (_) =>
  assertEquals(show(Set.fromList([2, 1, 1])), "Set([1, 2])")
)

test("toList", (_) =>
  assertEquals(Set.toList(Set.fromList([2, 1, 1])), [1, 2])
)

test("insert", (_) =>
  assertEquals(Set.insert(1, Set.fromList([0, 2])), Set.fromList([0, 1, 2]))
)

test("insert - double", (_) =>
  assertEquals(Set.insert(2, Set.fromList([0, 2])), Set.fromList([0, 2]))
)

test("insert - after", (_) =>
  assertEquals(Set.insert(3, Set.fromList([0, 2])), Set.fromList([0, 2, 3]))
)

test("insert - before", (_) =>
  assertEquals(Set.insert(-1, Set.fromList([0, 2])), Set.fromList([-1, 0, 2]))
)

test("map", (_) =>
  assertEquals(map((x) => x * 2, Set.fromList([1, 2, 3])), Set.fromList([2, 4, 6]))
)

test("filter", (_) =>
  assertEquals(Set.filter((x) => x < 3, Set.fromList([1, 2, 3])), Set.fromList([1, 2]))
)

test("reduce", (_) =>
  assertEquals(Set.reduce((a, b) => a + b, 0, Set.fromList([1, 2, 3])), 6)
)

test("merge", (_) =>
  assertEquals(Set.merge(Set.fromList([1, 3, 5]), Set.fromList([2, 3, 6])), Set.fromList([1, 2, 3, 5, 6]))
)

test("includes - yes", (_) =>
  assertEquals(Set.includes(7, Set.fromList([2193, 7])), true)
)

test("includes - no", (_) =>
  assertEquals(Set.includes(7, Set.fromList([2193, 71])), false)
)
