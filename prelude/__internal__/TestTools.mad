import HP from "HitPoint"
import W from "Wish"
import IO from "IO"
import S from "String"
import System from "System"
import L from "List"
import F from "Function"
import FS from "FileSystem"
import N from "Number"
import Maybe from "Maybe"
import T from "Tuple"
import Lcov from "LcovDotInfo"
import { andDo } from "Monad"


colorString :: String -> String -> String
colorString = (color, v) => color ++ v ++"\x1b[0m"

red = colorString("\x1b[31m")
green = colorString("\x1b[32m")


type AssertionError = AssertionError a a


addFunctionHit :: String -> String -> Lcov.LcovInfo -> Lcov.LcovInfo
addFunctionHit = (astPath, name, lcov) =>
  map((section) => Lcov.getPath(section) == astPath
      ? map(where
          is Lcov.FNDA count n: n == name ? Lcov.FNDA(count + 1, n) : Lcov.FNDA(count, n)
          is x           : x
          , section.fndas
        ) |> (updatedFdnas) => ({ ...section, fndas: updatedFdnas })
      : section
    , lcov
  )

addLineHit :: String -> Number -> Lcov.LcovInfo -> Lcov.LcovInfo
addLineHit = (astPath, line, lcov) =>
  map(
    (section) =>
        Lcov.getPath(section) == astPath
          ? map(where
              is Lcov.DA l count: l == line ? Lcov.DA(l, count + 1) : Lcov.DA(l, count)
              is x         : x
              , section.das
            ) |> (updatedDas) => ({ ...section, das: updatedDas })
          : section
    , lcov
  )

updateLh :: Lcov.LcovSection -> Lcov.LcovSection
updateLh = (section) => (
  L.reduceR(
    (total, da) =>
      where(da)
        is Lcov.DA _ count: count > 0 ? total + 1 : total
    , 0
    , section.das
  ) |> (counted) => ({ ...section, lh: Lcov.LH(counted) })
)

collectLh :: Lcov.LcovInfo -> Lcov.LcovInfo
collectLh = (lcov) => map(updateLh, lcov)

updateFnh :: Lcov.LcovSection -> Lcov.LcovSection
updateFnh = (section) => (
  L.reduceR(
    (total, da) =>
      where(da)
        is Lcov.FNDA count _: count > 0 ? total + 1 : total
    , 0
    , section.fndas
  ) |> (counted) => ({ ...section, fnh: Lcov.FNH(counted) })
)

collectFnh :: Lcov.LcovInfo -> Lcov.LcovInfo
collectFnh = (lcov) => map(updateFnh, lcov)

collect :: List (HP.HitPoint) -> Lcov.LcovInfo -> Lcov.LcovInfo
collect = (hps, lcov) =>
  L.reduceL(
    (currLcov) => where
      is HP.FunctionHit astPath name: addFunctionHit(astPath, name, currLcov)
      is HP.LineHit astPath line: addLineHit(astPath, line, currLcov),
    lcov,
    hps
  ) |> collectLh |> collectFnh


buildRow :: String -> Number -> Number -> IO.Row
buildRow = (name, lines, functions) => {
  formattedLines = N.formatDecimal(2, lines) ++ "%"
  formattedFunctions = N.formatDecimal(2, functions) ++ "%"
  coloredName = lines > 75 ? green(name) : red(name)

  return { id: coloredName
         , cols: [<"lines", formattedLines>, <"functions", formattedFunctions>]
         }
}

allRow :: Lcov.LcovInfo -> IO.Row
allRow = (lcov) =>
  L.reduceR(
    (total, section) =>
        where(section)
          is { lf: Lcov.LF found, lh: Lcov.LH hit, fnf: Lcov.FNF ffound, fnh: Lcov.FNH fhit }:
            { lf: total.lf + found, lh: total.lh + hit, fnf: total.fnf + ffound, fnh: total.fnh + fhit }
    , { lf: 0, lh: 0, fnf: 0, fnh: 0 }
    , lcov
  ) |> (total) => <100 * total.lh / total.lf, 100 * total.fnh / total.fnf>
    |> (total) => buildRow("All", T.fst(total), T.snd(total))

computePercents :: Number -> Number -> Number
computePercents = (hit, found) => found == 0
  ? 100
  : 100 * hit / found

generateTable :: Lcov.LcovInfo -> List IO.Row
generateTable = (lcov) =>
  map(where
    is { sf: Lcov.SF path, lf: Lcov.LF found, lh: Lcov.LH hit, fnf: Lcov.FNF ffound, fnh: Lcov.FNH fhit }:
      <computePercents(hit, found), computePercents(fhit, ffound)>
        |> (t) => buildRow(path, T.fst(t), T.fst(t))
    , lcov
  ) |> (table) => L.concat([allRow(lcov)], table)

stdoutReport :: Lcov.LcovInfo -> List IO.Row
stdoutReport = (lcov) => generateTable(lcov)

collectCoverage :: List HP.HitPoint -> W.Wish e (List IO.Row)
export collectCoverage = (hitPoints) =>
  FS.readFile(".coverage/lcov.info")
    |> map(Lcov.parseLcov)
    |> map(collect(hitPoints))
    |> chain((lcov) =>
         of(lcov)
           |> map(Lcov.stringify)
           |> map(FS.TextData)
           |> chain(FS.writeFile(".coverage/lcov.info"))
           |> andDo(of(stdoutReport(lcov)))
       )

formatSuccessOutput = (description, result) => green("\u2713 " ++ description)

formatFailureOutput :: String -> AssertionError -> W.Wish String String
formatFailureOutput = (description, result) =>
  where(result)
    is AssertionError expected actual:
      W.bad(
        red("\u00d7 " ++ description)
        ++ "\n  expected:\n    "
        ++ #- green(JSON.stringify(expected)) -#
        ++ "\n  actual:\n    "
        ++ #- red(JSON.stringify(actual)) -#
      )

#-
const generateId = () => Math.random().toString().substr(2, 10)
-#

test :: String -> (String -> W.Wish AssertionError String) -> ()
export test = (description, testImpl) => {
  id = #- generateId() -#
  #- process.send({ reportType: "TEST_START", id }) -#

  pipe(
    (run) => run(description),
    map(formatSuccessOutput(description)),
    W.chainRej(formatFailureOutput(description)),
    W.fulfill(reportBad(id), reportGood(id))
  )(testImpl)

  return ()
}

reportBad :: String -> String -> ()
reportBad = (id, err) => #-{
  process.send({ reportType: "TEST_FAIL", message: err, id, hitPoints: __getHPs() })
}-#

reportGood :: String -> String -> ()
reportGood = (id, good) => #- process.send({ reportType: "TEST_SUCCESS", message: good, id,  hitPoints: __getHPs() }) -#

assertEquals :: a -> a -> W.Wish AssertionError String
export assertEquals = (actual, expected) => actual == expected
  ? of("")
  : W.bad(AssertionError(expected, actual))

isCoverageEnabled :: W.Wish String Boolean
isCoverageEnabled = pipe(
  System.getEnv,
  map(F.equals("on")),
  W.chainRej(F.always(of(false)))
)("COVERAGE_MODE")

displayResults :: <List String, List IO.Row> -> List IO.Row
displayResults = (results) => {
  map(IO.log, T.fst(results))
  return F.when(
    F.complement(L.isEmpty),
    pipe(
      (x) => {
        IO.log("\n--------------------------------------------------------------------------------")
        return x
      },
      (x) => {
        IO.log("\nCOVERAGE REPORT:")
        return x
      },
      IO.table(T.snd(results))
    )
  )(T.snd(results))
}
