import HP from "HitPoint"
import W from "Wish"
import IO from "IO"
import S from "String"
import System from "System"
import L from "List"
import F from "Function"
import FS from "FileSystem"
import N from "Number"
import T from "Tuple"
import Lcov from "LcovDotInfo"
import { andDo } from "Monad"
import { TextData } from "Data"
import Context from "HitPointContext"

colorString :: String -> String -> String
colorString = (color, v) => color ++ v ++"\x1b[0m"

red = colorString("\x1b[31m")
green = colorString("\x1b[32m")


export type AssertionError
  = AssertionError a a
  | Error a


addFunctionHit :: String -> String -> Lcov.LcovInfo -> Lcov.LcovInfo
addFunctionHit = (astPath, name, lcov) =>
  map((section) => Lcov.getPath(section) == astPath
      ? map(
          where {
            Lcov.FNDA count n => n == name ? Lcov.FNDA(count + 1, n) : Lcov.FNDA(count, n)
            x => x
          },
          section.fndas
        ) |> (updatedFdnas) => ({ ...section, fndas: updatedFdnas })
      : section
    , lcov
  )

addLineHit :: String -> Number -> Lcov.LcovInfo -> Lcov.LcovInfo
addLineHit = (astPath, line, lcov) =>
  map(
    (section) =>
        Lcov.getPath(section) == astPath
          ? map(
              where {
                Lcov.DA l count => l == line ? Lcov.DA(l, count + 1) : Lcov.DA(l, count)
                x => x
              },
              section.das
            ) |> (updatedDas) => ({ ...section, das: updatedDas })
          : section
    , lcov
  )

updateLh :: Lcov.LcovSection -> Lcov.LcovSection
updateLh = (section) => (
  L.reduceR(
    (total, da) => where(da) { Lcov.DA _ count => count > 0 ? total + 1 : total },
    0,
    section.das
  ) |> (counted) => ({ ...section, lh: Lcov.LH(counted) })
)

collectLh :: Lcov.LcovInfo -> Lcov.LcovInfo
collectLh = (lcov) => map(updateLh, lcov)

updateFnh :: Lcov.LcovSection -> Lcov.LcovSection
updateFnh = (section) => (
  L.reduceR(
    (total, da) =>
      where(da) { Lcov.FNDA count _ => count > 0 ? total + 1 : total },
      0,
      section.fndas
  ) |> (counted) => ({ ...section, fnh: Lcov.FNH(counted) })
)

collectFnh :: Lcov.LcovInfo -> Lcov.LcovInfo
collectFnh = (lcov) => map(updateFnh, lcov)

collect :: List (HP.HitPoint) -> Lcov.LcovInfo -> Lcov.LcovInfo
collect = (hps, lcov) =>
  L.reduceL(
    (currLcov) => where {
      HP.FunctionHit astPath name => addFunctionHit(astPath, name, currLcov)
      HP.LineHit astPath line => addLineHit(astPath, line, currLcov)
    },
    lcov,
    hps
  ) |> collectLh |> collectFnh


buildRow :: String -> Number -> Number -> IO.Row
buildRow = (name, lines, functions) => {
  formattedLines = N.formatDecimal(2, lines) ++ "%"
  formattedFunctions = N.formatDecimal(2, functions) ++ "%"
  coloredName = lines > 75 ? green(name) : red(name)

  return {
    id: coloredName,
    cols: [<"lines", formattedLines>, <"functions", formattedFunctions>]
  }
}

allRow :: Lcov.LcovInfo -> IO.Row
allRow = (lcov) => pipe(
  L.reduceR(
    (total, section) => where(section) {
      { lf: Lcov.LF found, lh: Lcov.LH hit, fnf: Lcov.FNF ffound, fnh: Lcov.FNH fhit } =>
        {
          lf: total.lf + found,
          lh: total.lh + hit,
          fnf: total.fnf + ffound,
          fnh: total.fnh + fhit
        }
    },
    { lf: 0, lh: 0, fnf: 0, fnh: 0 }
  ),
  (total) => <100 * total.lh / total.lf, 100 * total.fnh / total.fnf>,
  (total) => buildRow("All", T.fst(total), T.snd(total))
)(lcov)

computePercents :: Number -> Number -> Number
computePercents = (hit, found) => found == 0
  ? 100
  : 100 * hit / found

generateTable :: Lcov.LcovInfo -> List IO.Row
generateTable = (lcov) =>
  map(
    where {
      {
        sf: Lcov.SF path,
        lf: Lcov.LF found,
        lh: Lcov.LH hit,
        fnf: Lcov.FNF ffound,
        fnh: Lcov.FNH fhit
      } =>
        <computePercents(hit, found), computePercents(fhit, ffound)>
          |> (t) => buildRow(path, T.fst(t), T.snd(t))
    },
    lcov
  ) |> (table) => L.concat([allRow(lcov)], table)

stdoutReport :: Lcov.LcovInfo -> List IO.Row
stdoutReport = (lcov) => generateTable(lcov)

collectCoverage :: List HP.HitPoint -> W.Wish String (List IO.Row)
export collectCoverage = (hitPoints) =>
  FS.readFile(".coverage/lcov.info")
    |> map(Lcov.parseLcov)
    |> map(collect(hitPoints))
    |> chain((lcov) =>
         of(lcov)
           |> map(Lcov.stringify)
           |> map(TextData)
           |> chain(FS.writeFile(".coverage/lcov.info"))
           |> andDo(of(stdoutReport(lcov)))
       )

formatSuccessOutput = (description, result) => green("\u2713 " ++ description)

formatFailureOutput :: String -> AssertionError -> W.Wish String String
formatFailureOutput = (description, result) => where(result) {
  AssertionError expected actual =>
    W.bad(
      red("\u00d7 " ++ description)
      ++ "\n  expected:\n    "
      ++ #- green(JSON.stringify(expected)) -#
      ++ "\n  actual:\n    "
      ++ #- red(JSON.stringify(actual)) -#
    )

  Error msg =>
    W.bad(
      red("\u00d7 " ++ description)
      ++ "\n  error: " ++ #- JSON.stringify(msg) -#
    )
}

#-
const generateId = () => Math.random().toString().substr(2, 10)
-#

test :: String -> (String -> W.Wish AssertionError String) -> ()
export test = (description, testImpl) => {
  id = #- generateId() -#
  #-
  
  process.send({ reportType: "TEST_START", id })
  process.env.COVERAGE_MODE = "off"
  Context.initContext((context) => {
    context.id = id;
    context.__HIT_POINTS = []
    context.__CACHE = {}
  -#

  pipe(
    (run) => run(description),
    map(formatSuccessOutput(description)),
    W.chainRej(formatFailureOutput(description)),
    W.fulfill(reportBad(id), reportGood(id))
  )(testImpl)

  #-})-#

  return ()
}


reportBad :: String -> String -> ()
reportBad = (id, err) => #-{
  const context = Context.getContext()
  process.send({
    reportType: "TEST_FAIL",
    message: err,
    id,
    hitPoints: context.__HIT_POINTS,
    globalHitPoints: __getGlobalHPs()
  })
}-#

reportGood :: String -> String -> ()
reportGood = (id, good) => #-{
  const context = Context.getContext()
  process.send({
    reportType: "TEST_SUCCESS",
    message: good,
    id,
    hitPoints: context.__HIT_POINTS,
    globalHitPoints: __getGlobalHPs()
  })
}-#

assertEquals :: a -> a -> W.Wish AssertionError String
export assertEquals = (actual, expected) => actual == expected
  ? of("")
  : W.bad(AssertionError(expected, actual))

isCoverageEnabled :: W.Wish String Boolean
isCoverageEnabled = pipe(
  System.getEnv,
  map(F.equals("on")),
  W.chainRej(F.always(of(false)))
)("COVERAGE_MODE")

displayResults :: <List String, List IO.Row> -> List IO.Row
displayResults = (results) => {
  map(IO.log, T.fst(results))
  return F.when(
    F.complement(L.isEmpty),
    pipe(
      (x) => {
        IO.log("\n--------------------------------------------------------------------------------")
        return x
      },
      (x) => {
        IO.log("\nCOVERAGE REPORT:")
        return x
      },
      IO.table(T.snd(results))
    )
  )(T.snd(results))
}
