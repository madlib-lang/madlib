import type { Maybe } from "Maybe"

import { eq, gt } from "Compare"
import List from "List"
import Tuple from "Tuple"

/**
 * Dictionary represents a key - value data structure.
 *
 */


#iftarget js // Dictionary

Dictionary :: List #[k, v] -> Dictionary k v
Dictionary = (items) => #- {
  return ({
    __constructor: "Dictionary",
    __args: [items],
  })
} -#

#elseif llvm

Dictionary :: List #[k, v] -> Dictionary k v
Dictionary = extern "madlib__dictionary__typeConstructor"

#endif


instance Comparable k => Semigroup (Dictionary k a) {
  assoc = (a, b) => where(#[a, b]) {
    #[Dictionary(itemsA), Dictionary(itemsB)] =>
      fromList(itemsA ++ itemsB)
  }
}

instance Comparable k => Monoid (Dictionary k a) {
  mempty = empty
  mappend = assoc
  mconcat = List.reduceLeft(mappend, mempty)
}


removeConsecutiveDoubles :: Eq k => List #[k, v] -> List #[k, v]
removeConsecutiveDoubles = (list) => where(list) {
  [#[k1, v1], #[k2, v2], ...xs] =>
    k1 == k2
      ? [#[k2, v2], ...removeConsecutiveDoubles(xs)]
      : [#[k1, v1], ...removeConsecutiveDoubles([#[k2, v2], ...xs])]

  [last] =>
    [last]

  [] =>
    []
}


/**
 * Creates a Dictionary from a list of <key, value> tuples
 *
 * @since 0.0.5
 * @example
 * fromList([#["one", 2], #["two", 2]])
 * fromList([#["a", 2], #["b", 2], #["c", 3]])
 */
fromList :: Comparable k => List (#[k, v]) -> Dictionary k v
export fromList = pipe(
  List.sortBy((a, b) => compare(Tuple.fst(a), Tuple.fst(b))),
  removeConsecutiveDoubles,
  Dictionary
)


/**
 * The empty Dictionary
 *
 * @since 0.0.5
 */
empty :: Dictionary k v
export empty = Dictionary([])


insert :: Comparable k => k -> v -> Dictionary k v -> Dictionary k v
export insert = (key, value, dict) => {
  helper = (list) => where(list) {
    [] =>
      [#[key, value]]

    [#[k, v], ...xs] =>
      if (eq(k, key)) {
        [#[key, value], ...xs]
      } else if (gt(k, key)) {
        [#[key, value], #[k, v], ...xs]
      } else {
        [#[k, v], ...helper(xs)]
      }
  }

  return where(dict) {
    Dictionary(items) =>
      Dictionary(helper(items))
  }
}


update :: Comparable k => (v -> v) -> k -> Dictionary k v -> Dictionary k v
export update = (fn, key, dict) => {
  helper = (list) => where(list) {
    [] =>
      []

    [#[k, v], ...xs] =>
      if (eq(k, key)) {
        [#[key, fn(v)], ...xs]
      } else if (gt(k, key)) {
        [#[k, v], ...xs]
      } else {
        [#[k, v], ...helper(xs)]
      }
  }

  return where(dict) {
    Dictionary(items) =>
      Dictionary(helper(items))
  }
}


/**
 * Get a value from a Dictionary given a key.
 *
 * @since 0.0.5
 * @example
 * get("john", fromList([#["john", { age: 32 }]])) // Just({ age: 32 })
 * get("paul", fromList([#["john", { age: 32 }]])) // Nothing
 */
get :: Comparable k => k -> Dictionary k v -> Maybe v
export get = (k) => where {
  Dictionary(items) => pipe(
    List.find((item) => where(item) {
      #[kk, _] => k == kk
    }),
    map(Tuple.snd)
  )(items)
}


/**
 * Combine two Dictionaries together.
 *
 * @since 0.0.5
 */
merge :: Comparable k => Dictionary k v -> Dictionary k v -> Dictionary k v
export merge = (a, b) => where(#[a, b]) {
  #[Dictionary(itemsA), Dictionary(itemsB)] =>
    fromList(List.concat(itemsA, itemsB))
}


/**
 * Enumerate the number of keys in a Dictionary
 *
 * @since 0.0.5
 * @example
 * length(fromList([#["Sidney", 3], #["New York", 18], #["London", 2]])) // 3
 */
length :: Dictionary k v -> Integer
export length = (dictionary) => where(dictionary) {
  Dictionary(items) =>
    List.length(items)
}


toList :: Dictionary k v -> List #[k, v]
export toList = (dict) => where(dict) {
  Dictionary(items) =>
    items
}


/**
 * Map over a Dictionary with a function that takes the value and transforms it.
 *
 * @since 0.0.5
 * @example
 * map((x) => x / 2, fromList([#["Sidney", 3], #["New York", 18], #["London", 2]]))
 * // fromList([#["Sidney", 1.5], #["New York", 9], #["London", 1]])
 */
instance Functor (Dictionary k) {
  map = (fn) => where {
    Dictionary(items) =>
      pipe(
        map((i) => #[Tuple.fst(i), fn(Tuple.snd(i))]),
        Dictionary
      )(items)
  }
}


mapM :: Applicative m => (a -> m b) -> Dictionary k a -> m (Dictionary k b)
export mapM = (f, dict) => where(dict) {
  Dictionary(items) =>
    pipe(
      List.mapM(where {
        #[k, v] =>
          map((mapped) => #[k, mapped], f(v))
      }),
      map(Dictionary)
    )(items)
}


/**
 * Map over a Dictionary with a function that takes the key and value and returns the new value. 
 *
 * @since 0.0.5
 * @example
 * mapWithKey(
 *   (city, x) => city == "Sidney" ? 9 : x / 2,
 *   fromList([#["Sidney", 3], #["New York", 18], #["London", 2]])
 * )
 * // fromList([#["Sidney", 9], #["New York", 9], #["London", 1]])
 */
mapWithKey :: (k -> v -> w) -> Dictionary k v -> Dictionary k w
export mapWithKey = (fn) => where {
  Dictionary(items) =>
    pipe(
      map((i) => #[Tuple.fst(i), fn(Tuple.fst(i), Tuple.snd(i))]),
      Dictionary
    )(items)
}


/**
 * List all keys in a Dictionary
 *
 * @since 0.0.5
 * @example
 * keys(fromList([#[true, "Go for it"], #[false, "NOGO"]])) // [true, false]
 */
keys :: Dictionary k v -> List k
export keys = (m) => where(m) {
  Dictionary(items) =>
    map(Tuple.fst, items)
}


/**
 * List all values in a Dictionary
 *
 * @since 0.0.5
 * @example
 * values(fromList([#[true, "Go for it"], #[false, "NOGO"]])) // ["Go for it", "NOGO"]
 */
values :: Dictionary k v -> List v
export values = (m) => where(m) {
  Dictionary(items) =>
   map(Tuple.snd, items)
}

// TODO: add includes
// TODO: add filter
// TODO: add reduce
