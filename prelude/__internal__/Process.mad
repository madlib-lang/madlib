import type { Maybe } from "Maybe"
import type { Wish } from "Wish"

import { Wish } from "Wish"
import Dictionary from "Dictionary"
import String from "String"
import List from "List"
import { fromMaybe } from "Maybe"

type Handle = Handle(Handle)

export alias CommandResult = {
  exitCode :: Integer,
  stdout :: String,
  stderr :: String  
}

export alias CommandOptions = {
  cwd :: String,
  env :: Dictionary String String
}


#iftarget js

#- import { spawn as prelude_spawn } from "child_process" -#

exec :: String -> List String -> CommandOptions -> Wish CommandResult CommandResult
export exec = (command, args, options) => Wish((bad, good) => #- {
  let stdoutChunks = []
  let stderrChunks = []

  const env = {};
  const envItems = __listToJSArray__(options.env.__args[0]);
  envItems.forEach(([key, value]) => { env[key] = value; })

  const proc = prelude_spawn(
    command,
    __listToJSArray__(args),
    {
      cwd: options.cwd,
      env: { ...process.env, ...env },
    }
  )

  proc.stdout.on("data", (chunk) => {
    stdoutChunks.push(Buffer.from(chunk, 'binary'));
  })

  proc.stderr.on("data", (chunk) => {
    stderrChunks.push(Buffer.from(chunk, 'binary'));
  })

  proc.on('close', (code) => {
    const stdoutBuffer = Buffer.concat(stdoutChunks)
    const stderrBuffer = Buffer.concat(stderrChunks)

    const result = {
      exitCode: code,
      stdout: stdoutBuffer.toString(),
      stderr: stderrBuffer.toString(),
    }

    if (code === 0) {
      good(result)
    } else {
      bad(result)
    }
  });

  return () => {
    proc.stdin.pause();
    proc.stderr.pause();
    proc.kill();
  }
} -#)

#-
const makeArgs = () => {
  let list = {}
  let start = list
  Object.keys(process.argv.slice(0)).forEach((key) => {
    list = list.n = { v: process.argv[key], n: null }
  }, {})
  return {
    n: start.n.n.n,
    v: start.n.n.v
  }
}
-#


Argv :: List String
export Argv = #-
{Node}
  makeArgs()
{/Node}
{Browser}
  null
{/Browser}
-#


#-
{Node}
const buildEnvImpl = (dictFromList) => {
  let list = {}
  let start = list
  Object.keys(process.env).forEach((key) => {
    list = list.n = { v: [key, process.env[key]], n: null }
  }, {})
  return dictFromList(start.n)
}
{/Node}
{Browser}
const buildEnvImpl = (dictFromList) => {
  dictFromList(null)
}
{/Browser}
-#

envFFI :: Comparable k => (List #[k, v] -> Dictionary k v) -> Dictionary k String
envFFI = extern "buildEnvImpl"

Env :: Dictionary String String
export Env = envFFI(Dictionary.fromList)



getCurrentWorkingDirectory :: a -> String
export getCurrentWorkingDirectory = () => #- { return process.cwd() } -#


exit :: Integer -> {}
export exit = (code) => #- {
{Node}
  process.exit(code)
{/Node}
} -#

onExit :: (a -> {}) -> {}
export onExit = (cb) => #- {
{Node}
  process.once("beforeExit", cb)
{/Node}
} -#

#elseif llvm

import { canonicalizePath, joinPath } from "FilePath"


getCurrentPathFFI :: {} -> String
getCurrentPathFFI = extern "madlib__process__internal__getCurrentPath"


getCurrentWorkingDirectory :: a -> String
export getCurrentWorkingDirectory = () => getCurrentPathFFI()


getArgsFFI :: {} -> List String
getArgsFFI = extern "madlib__process__internal__getArgs"


Argv :: List String
export Argv = where (getArgsFFI()) {
  [exePath, ...args] =>
    String.take(2, exePath) == "./"
      ? [canonicalizePath(joinPath([getCurrentWorkingDirectory(), exePath])), ...args]
      : [exePath, ...args]

  [] =>
    []
}


getEnvFFI :: {} -> List #[String, String]
getEnvFFI = extern "madlib__process__internal__getEnv"


Env :: Dictionary String String
export Env = Dictionary.fromList(getEnvFFI({}))

makeCommandResult :: Integer -> String -> String -> CommandResult
makeCommandResult = (exitCode, stdout, stderr) => ({
  exitCode,
  stdout,
  stderr,
})



cancelExec :: Handle -> {}
cancelExec = extern "madlib__process__cancelExec"


execFFI :: String -> List String -> CommandOptions -> (Integer -> String -> String -> {}) -> Handle
execFFI = extern "madlib__process__exec"


exec :: String -> List String -> CommandOptions -> Wish CommandResult CommandResult
export exec = (command, args, options) => Wish((bad, good) => {
  done = false
  handle = execFFI(
    command,
    args,
    { cwd: options.cwd, env: Dictionary.merge(Env, options.env) },
    (exitCode, stdout, stderr) => {
      done = true
      exitCode != 0
        ? bad(makeCommandResult(exitCode, stdout, stderr))
        : good(makeCommandResult(exitCode, stdout, stderr))
    }
  )

  return () => {
    if (!done) { cancelExec(handle) }
  }
})

exit :: Integer -> {}
export exit = extern "exit"

onExit :: (a -> {}) -> {}
export onExit = extern "madlib__eventloop__onExit"

#endif

// TODO: this is mainly broken and will not always work but should be fine
// for node. We need to find a more robust solution.
// Also note that for llvm backend it generates whatever it's called with
// and can be a relative or absolute path, or simply a name that needs to
// be resolved via PATH or other means for windows.
getExecutablePath :: a -> String
export getExecutablePath = () => fromMaybe("", List.nth(0, Argv))

getEnv :: String -> Maybe String
export getEnv = (name) => Dictionary.get(name, Env)

DEFAULT_COMMAND_OPTIONS :: CommandOptions
export DEFAULT_COMMAND_OPTIONS = {
  cwd: "./",
  env: {{}},
}
