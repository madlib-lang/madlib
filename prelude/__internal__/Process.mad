#iftarget js

import type { Maybe } from "Maybe"

import W from "Wish"
import { Nothing, Just } from "Maybe"

#endif

import Dictionary from "Dictionary"

#iftarget js


#- import { exec as execJs, spawn as spawnJs } from "child_process" -#


export type CommandError = CommandError(Integer, String)


getCommandErrorMessage :: CommandError -> String
export getCommandErrorMessage = where { CommandError(_, message) => message }

exec :: String -> W.Wish CommandError String
export exec = (command) => W.Wish((bad, good) => #- {
    execJs(command, (err, stdout, stderr) => {
      if (err) {
        bad(CommandError(err.code)(err.message))
      }
      else {
        good(stdout)
      }
    })
  }
-#)

spawn :: String -> W.Wish CommandError Integer
export spawn = (command) => W.Wish((bad, good) => #- {
    const split = command.split(" ")
    const spawned = spawnJs(split[0], split.slice(1));

    spawned.stdout.on('data', (data) => {
      process.stdout.write(data.toString());
    });

    spawned.stderr.on('data', (data) => {
      process.stderr.write(data.toString());
    });

    spawned.on('close', (code) => {
      if (code === 0) {
        good(0);
      }
      else {
        bad(code)
      }
    })
  }
-#)


Argv :: List String
export Argv = #- process.argv.slice(2) -#


getEnv :: String -> Maybe String
export getEnv = (name) => (#- {
  const envVar = process.env[name];
  return envVar === undefined ? Nothing : Just(envVar)
} -#)


Env :: Dictionary String String
export Env = #- (() => {
  let list = {}
  let start = list
  Object.keys(process.env).forEach((key) => {
    list = list.n = { v: [key, process.env[key]], n: null }
  }, {})
  return Dictionary.fromList(Comparable.String)(start.n)
})() -#


getCurrentPath :: W.Wish String String
export getCurrentPath = of(#- process.cwd() -#)


getExecutablePath :: W.Wish String String
export getExecutablePath = of(#- process.argv[1] -#)

#elseif llvm

getArgsFFI :: {} -> List String
getArgsFFI = extern "madlib__process__internal__getArgs"


Argv :: List String
export Argv = getArgsFFI({})


getEnvFFI :: {} -> List #[String, String]
getEnvFFI = extern "madlib__process__internal__getEnv"


Env :: Dictionary String String
export Env = Dictionary.fromList(getEnvFFI({}))

#endif
