#iftarget llvm

import {} from "Monad"

fromList :: List a -> Array a
export fromList = extern "madlib__array__fromList"

toList :: Array a -> List a
export toList = extern "madlib__array__toList"

len :: Array a -> Integer
export len = extern "madlib__array__length"

mapFFI :: (a -> b) -> Array a -> Array b
mapFFI = extern "madlib__array__map"

reduce :: (a -> b -> a) -> a -> Array b -> a
export reduce = extern "madlib__array__reduce"

concat :: Array a -> Array a -> Array a
export concat = extern "madlib__array__concat"


instance Functor Array {
  map = mapFFI
}

#elseif js

fromList :: List a -> Array a
export fromList = (array) => #- array -#

// TODO: implement Array for JS

#endif
