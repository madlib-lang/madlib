import {} from "Monad"

// TODO: add filter, ap, chain

#iftarget llvm

fromList :: List a -> Array a
export fromList = extern "madlib__array__fromList"

toList :: Array a -> List a
export toList = extern "madlib__array__toList"

length :: Array a -> Integer
export length = extern "madlib__array__length"

mapFFI :: (a -> b) -> Array a -> Array b
mapFFI = extern "madlib__array__map"

reduce :: (a -> b -> a) -> a -> Array b -> a
export reduce = extern "madlib__array__reduce"

concat :: Array a -> Array a -> Array a
export concat = extern "madlib__array__concat"


instance Functor Array {
  map = mapFFI
}

#elseif js

fromList :: List a -> Array a
export fromList = (list) => #- {
  let array = []
  while (list) {
    array.push(list.v)
    list = list.n
  }
  return array
} -#

toList :: Array a -> List a
export toList = (array) => #- {
  let list = {}
  let start = list

  array.forEach(item => {
    list = list.n = { v: item, n: null }
  })

  return start.n
} -#

length :: Array a -> Integer
export length = (array) => #- array.length -#

reduce :: (a -> b -> a) -> a -> Array b -> a
export reduce = (f, start, array) => #- array.reduce((a, b) => f(a)(b), start) -#

concat :: Array a -> Array a -> Array a
export concat = (array1, array2) => #- array1.concat(array2) -#

instance Functor Array {
  map = (f, array) => #- array.map(f) -#
}

#endif
