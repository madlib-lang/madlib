import type { Maybe } from "Maybe"

import { Just, Nothing } from "Maybe"
import {} from "Monad"



/**
 * Array serves a similar purpose as List but is composed of one memory block.
 * This means that most operations that add or remove elements might need to reallocate the
 * whole array whether adding an item at the front of a List has a very small memory footprint.
 */

// TODO: add filter, ap, chain

#iftarget llvm

init :: Integer -> Array a
export init = extern "madlib__array__initWithCapacity"

/**
 * Creates an array from a List
 *
 * @since 0.11.0
 * @example
 * fromList([1, 2, 3]) // Array([1, 2, 3])
 */
fromList :: List a -> Array a
export fromList = extern "madlib__array__fromList"


/**
 * Converts an array to a List
 *
 * @since 0.11.0
 * @example
 * toList(fromList([1, 2, 3])) // [1, 2, 3]
 */
toList :: Array a -> List a
export toList = extern "madlib__array__toList"


/**
 * Returns the length of the given array
 *
 * @since 0.11.0
 * @example
 * length(fromList([1, 2, 3])) // 3
 */
length :: Array a -> Integer
export length = extern "madlib__array__length"


mapFFI :: (a -> b) -> Array a -> Array b
mapFFI = extern "madlib__array__map"


/**
 * Reduces an array to a value, given a reducer function, an initial value, and an array.
 *
 * @since 0.11.0
 * @example
 * reduce(add, 0, fromList([1, 2, 3])) // 6
 */
reduce :: (a -> b -> a) -> a -> Array b -> a
export reduce = extern "madlib__array__reduce"


/**
 * Concatenates two arrays
 *
 * @since 0.11.0
 * @example
 * concat(fromList([1, 2, 3]), fromList([4, 5, 6])) // fromList([1, 2, 3, 4, 5, 6])
 */
concat :: Array a -> Array a -> Array a
export concat = extern "madlib__array__concat"


mutConcat :: Array a -> Array a -> Array a
export mutConcat = extern "madlib__array__concatWithMutation"


mutPush :: a -> Array a -> Array a
export mutPush = extern "madlib__array__pushBackWithMutation"


mutRemove :: Integer -> Array a -> Array a
export mutRemove = extern "madlib__array__removeWithMutation"

/**
 * Maps over an array, applying the given function to each element.
 *
 * @since 0.11.0
 * @example
 * map(add(1), fromList([1, 2, 3])) // fromList([2, 3, 4])
 */
instance Functor Array {
  map = mapFFI
}

#elseif js

init :: Integer -> Array a
export init = () => #- [] -#


/**
 * Creates an array from a list
 *
 * @since 0.11.0
 * @example
 * fromList([1, 2, 3]) // Array([1, 2, 3])
 */
fromList :: List a -> Array a
export fromList = (list) => #- {
  let array = []
  while (list) {
    array.push(list.v)
    list = list.n
  }
  return array
} -#


/**
 * Converts an array to a list
 *
 * @since 0.11.0
 * @example
 * toList(fromList([1, 2, 3])) // [1, 2, 3]
 */
toList :: Array a -> List a
export toList = (array) => #- {
  let list = {}
  let start = list

  array.forEach(item => {
    list = list.n = { v: item, n: null }
  })

  return start.n
} -#


/**
 * Returns the length of the given array
 *
 * @since 0.11.0
 * @example
 * length(fromList([1, 2, 3])) // 3
 */
length :: Array a -> Integer
export length = (array) => #- { return  array.length } -#


/**
 * Reduces an array to a value, given a reducer function, an initial value, and an array.
 *
 * @since 0.11.0
 * @example
 * reduce(add, 0, fromList([1, 2, 3])) // 6
 */
reduce :: (a -> b -> a) -> a -> Array b -> a
export reduce = (f, start, array) => #- array.reduce((a, b) => f(a)(b), start) -#


/**
 * Concatenates two arrays
 *
 * @since 0.11.0
 * @example
 * concat(fromList([1, 2, 3]), fromList([4, 5, 6])) // fromList([1, 2, 3, 4, 5, 6])
 */
concat :: Array a -> Array a -> Array a
export concat = (array1, array2) => #- array1.concat(array2) -#


mutConcat :: Array a -> Array a -> Array a
export mutConcat = (a, b) => #- {
  a.push(...b)
  return a
} -#


mutPush :: a -> Array a -> Array a
export mutPush = (item, array) => #- {
  array.push(item)
  return array
} -#


mutRemove :: Integer -> Array a -> Array a
export mutRemove = (index, arr) => {
  _index = index
  arrayLength = length(arr)

  while(_index < arrayLength) do {
    arr[_index
    ] := arr[_index + 1
    ]
    _index := _index + 1
  }

  #- arr.length = arrayLength - 1 -#

  return arr
}

/**
 * Maps over an array, applying the given function to each element.
 *
 * @since 0.11.0
 * @example
 * map(add(1), fromList([1, 2, 3])) // fromList([2, 3, 4])
 */
instance Functor Array {
  map = (f, array) => #- array.map(f) -#
}

#endif

empty :: Array a
export empty = init(1)


/**
 * Return a Maybe of an item at a given index, Nothing if the index is out of
 * the bounds of the array.
 * @since 0.23.0
 * @example
 * at(1, fromList([1, 2, 3])) // Just(2)
 * at(3, fromList([1, 2, 3])) // Nothing
 */
at :: Integer -> Array a -> Maybe a
export at = (index, arr) => index > 0 && index < length(arr) ? Just(arr[index]) : Nothing


/**
 * Iterate over an array, selecting only values which are matched by predicate function.
 *
 * @since 0.23.0
 * @example
 * filter((a) => a % 2 == 0, fromList([1, 2, 3, 4, 5, 6])) // fromList([2, 4, 6])
 */
filter :: (a -> Boolean) -> Array a -> Array a
export filter = (predicate, arr) => {
  len = length(arr)
  result = init(len)
  i = 0

  while(i < len) do {
    if (predicate(arr[i])) do {
      mutPush(arr[i], result)
    }

    i := i + 1
  }

  return result
}


forEach :: (a -> {}) -> Array a -> {}
export forEach = (f, arr) => {
  len = length(arr)
  i = 0

  while(i < len) do {
    f(arr[i])
    i := i + 1
  }
}


/**
 * Cut a contiguous segment from an Array, from start index to end index.
 * @since 0.23.0
 */
slice :: Integer -> Integer -> Array a -> Array a
export slice = (start, end, arr) => {
  len = length(arr)
  realStart = start < 0 ? start + len : start
  realEnd = end == 0 ? len - 1 : end < 0 ? end + len - 1 : end
  result = init(realStart - realEnd)

  while(realStart <= realEnd) do {
    mutPush(arr[realStart], result)
    realStart := realStart + 1
  }

  return result
}


/**
 * Return an array of integers within the given range. The start
 * parameter is inclusive and the end parameter is exclusive.
 *
 * @since 0.23.0
 * @example
 * range(3, 3) // fromList([])
 * range(3, 5) // fromList([3, 4])
 */
range :: Integer -> Integer -> Array Integer
export range = (start, end) => {
  result = init(end - start)
  i = start

  while(i < end) do {
    mutPush(i, result)
    i := i + 1
  }

  return result
}
