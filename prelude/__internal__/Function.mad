/**
 * Wraps a predicate function and make it return the inverse. So if for a value
 * the function would normally return true, after "complemented" it would return
 * false and vice versa.
 *
 * @since 0.0.5
 * @example
 * complement((x) => x % 2 == 0)(2) // false
 */
complement :: (a -> Boolean) -> (a -> Boolean)
export complement = (fn) => ((x) => (!fn(x)))


/**
 * It always returns the first supplied parameter no matter what. It is especially
 * practical during function composition when you want to discard whatever value
 * is passed to a function and always return the same thing.
 *
 * @since 0.0.5
 * @example
 * always(true, "1")            // true
 * map(always(true), [1, 2 ,3]) // [true, true, true]
 */
always :: a -> b -> a
export always = (a, b) => (a)

identity :: a -> a
export identity = (a) => (a)

equals :: a -> a -> Boolean
export equals = (val, a) => val == a

ifElse :: (a -> Boolean) -> (a -> b) -> (a -> b) -> a -> b
export ifElse = (predicate, truthy, falsy, value) => predicate(value)
  ? truthy(value)
  : falsy(value)

when :: (a -> Boolean) -> (a -> a) -> a -> a
export when = (predicate, truthy, value) =>
  ifElse(predicate, truthy, always(value), value)

not :: Boolean -> Boolean
export not = (b) => !b

flip :: (a -> b -> c) -> (b -> a -> c)
export flip = (f) => ((b, a) => f(a, b)) 


#-
const nativeMemoize = (fn) => {
  let cache = {};
  return (...params) => {
    const key = JSON.stringify(params)
    console.log(key)
    console.log(cache)
    if (!cache[key]) {
      cache[key] = fn(...params)
    }
    return cache[key]
  }
}
-#

memoize :: (a -> b) -> (a -> b)
export memoize = (fn) => #- nativeMemoize(fn) -#
