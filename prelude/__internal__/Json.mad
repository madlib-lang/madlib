import IO from "IO"
import { Either, Right, Left, isLeft, fromRight, mapRight } from "Either"
import D from "Dictionary"
import { Maybe, Nothing, Just } from "Maybe"


export alias Parser r = String -> Either String r


string :: Parser String
export string = (input) => (#-
  typeof input === "string"
    ? Right(input)
    : Left(`${input} is not a string`)
-#)


number :: Parser Number
export number = (input) => (#-
  typeof input === "number"
    ? Right(input)
    : Left(`${input} is not a number`)
-#)


boolean :: Parser Boolean
export boolean = (input) => (#-
  typeof input === "boolean"
    ? Right(input)
    : Left(`${input} is not a boolean`)
-#)


dict :: Parser b -> Parser (D.Dictionary String b)
export dict = (parser, input) => (#- {
  try {
    const keys = Object.keys(input);
    let result = D.empty;
    keys.forEach((k) => {
      const parsed = parser(input[k]);
      if (isLeft(parsed)) {
        throw parsed;
      } else {
        result = D.insert(k, fromRight("", parsed), result)
      }
    })

    return Right(result);
  } catch(e) {
    return Left("Mapping failed!");
  }
} -#)


list :: Parser a -> Parser (List a)
export list = (parser, input) => (#-{
  try {
    let result = [];
    input.forEach((a) => {
      const parsed = parser(a);
      if (isLeft(parsed)) {
        throw parsed;
      } else {
        result.push(fromRight("", parsed));
      }
    })
    return Right(result);
  } catch(e) {
    return Left("Mapping failed!");
  }
}-#)


map1 :: (a -> b) -> Parser a -> Parser b
export map1 = (fn, parser, input) =>
  where(parser(input))
    is Right a: Right(fn(a))
    is Left e : Left(e)


map2 :: (a -> b -> c) -> Parser a -> Parser b -> Parser c
export map2 = (fn, parserA, parserB, input) =>
  where(<parserA(input), parserB(input)>)
    is <Right a, Right b>: Right(fn(a, b))
    is <Left e, _>: Left(e)
    is <_, Left e>: Left(e)


map3 :: (a -> b -> c -> d) -> Parser a -> Parser b -> Parser c -> Parser d
export map3 = (fn, parserA, parserB, parserC, input) =>
  where(<parserA(input), parserB(input), parserC(input)>)
    is <Right a, Right b, Right c>: Right(fn(a, b, c))
    is <Left e, _, _>: Left(e)
    is <_, Left e, _>: Left(e)
    is <_, _, Left e>: Left(e)


map4 :: (a -> b -> c -> d -> e) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e
export map4 = (fn, parserA, parserB, parserC, parserD, input) =>
  where(<parserA(input), parserB(input), parserC(input), parserD(input)>)
    is <Right a, Right b, Right c, Right d>: Right(fn(a, b, c, d))
    is <Left e, _, _, _>: Left(e)
    is <_, Left e, _, _>: Left(e)
    is <_, _, Left e, _>: Left(e)
    is <_, _, _, Left e>: Left(e)

map5 :: (a -> b -> c -> d -> e -> f) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f
export map5 = (fn, parserA, parserB, parserC, parserD, parserE, input) =>
  where(<parserA(input), parserB(input), parserC(input), parserD(input), parserE(input)>)
    is <Right a, Right b, Right c, Right d, Right e>: Right(fn(a, b, c, d, e))
    is <Left e, _, _, _, _>: Left(e)
    is <_, Left e, _, _, _>: Left(e)
    is <_, _, Left e, _, _>: Left(e)
    is <_, _, _, Left e, _>: Left(e)
    is <_, _, _, _, Left e>: Left(e)


maybe :: Parser a -> Parser (Maybe a)
export maybe = (parser, input) => (#-{
  if (input) {
    const parsed = parser(input);
    if (isLeft(parsed)) {
      return Right(Nothing);
    }
    return mapRight(Just, parsed);
  } else {
    return Right(Nothing)
  }
}-#)


lazy :: (() -> Parser a) -> Parser a
export lazy = (wrapped, input) => wrapped((), input)


field :: String -> Parser b -> Parser b
export field = (fieldName, parser, input) => ( #- parser(input[fieldName]) -#)


parse :: Parser b -> String -> Either String b
export parse = (parser, input) => #-{
  try {
    return parser(JSON.parse(input))
  } catch(e) {
    console.log(e)
    return Left("Parsing error!\nInvalid input you might have called parse on an already parsed input or the given JSON is invalid.")
  }
}-#
