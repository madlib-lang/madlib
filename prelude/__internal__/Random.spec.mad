import Float from "Float"
import List from "List"
import Math from "Math"
import String from "String"
import { assertEquals, test } from "Test"

import { boolean, float, generate, generateFromString, integer, pick, shuffle } from "./Random"



ALPHABET = String.split("", "abcdefghjiklmnopqrtuvwxyz")
naiveRandom = () => Float.toInteger(Math.floor(Math.random() * 10000))


test(
  "two random instances should have identical outputs in cycle - boolean",
  () => do {
    num = naiveRandom()
    r1 = generate(num)
    r2 = generate(num)
    _ <- assertEquals(boolean(r1), boolean(r2))
    _ <- assertEquals(boolean(r1), boolean(r2))
    _ <- assertEquals(boolean(r1), boolean(r2))
    _ <- assertEquals(boolean(r1), boolean(r2))
    return assertEquals(boolean(r1), boolean(r2))
  },
)

test(
  "two random instances should have identical outputs in cycle - integer",
  () => do {
    num = naiveRandom()
    r1 = generate(num)
    r2 = generate(num)
    a = 1
    z = 10000
    int = (r) => integer(a, z, r)
    _ <- assertEquals(int(r1), int(r2))
    _ <- assertEquals(int(r1), int(r2))
    _ <- assertEquals(int(r1), int(r2))
    _ <- assertEquals(int(r1), int(r2))
    return assertEquals(int(r1), int(r2))
  },
)

test(
  "two random instances should have identical outputs in cycle - float",
  () => do {
    num = naiveRandom()
    r1 = generate(num)
    r2 = generate(num)
    _ <- assertEquals(float(r1), float(r2))
    _ <- assertEquals(float(r1), float(r2))
    _ <- assertEquals(float(r1), float(r2))
    _ <- assertEquals(float(r1), float(r2))
    return assertEquals(float(r1), float(r2))
  },
)

test(
  "two random instances should have identical outputs in cycle - pick",
  () => do {
    num = naiveRandom()
    r1 = generate(num)
    r2 = generate(num)
    letter = pick(ALPHABET)
    _ <- assertEquals(letter(r1), letter(r2))
    _ <- assertEquals(letter(r1), letter(r2))
    _ <- assertEquals(letter(r1), letter(r2))
    _ <- assertEquals(letter(r1), letter(r2))
    return assertEquals(letter(r1), letter(r2))
  },
)

test(
  "two random instances should have identical outputs in cycle - shuffle",
  () => do {
    num = naiveRandom()
    r1 = generate(num)
    r2 = generate(num)
    rWord = (r) => pipe(
      shuffle($, r),
      String.join(""),
    )(ALPHABET)
    _ <- assertEquals(rWord(r1), rWord(r2))
    return assertEquals(rWord(r1), rWord(r2))
  },
)

test(
  "generateFromString - works like `generate` but can take a string as a seed",
  () => do {
    str = "cool"
    r1 = generateFromString(str)
    r2 = generateFromString(str)
    _ <- assertEquals(boolean(r1), boolean(r2))
    _ <- assertEquals(boolean(r1), boolean(r2))
    _ <- assertEquals(boolean(r1), boolean(r2))
    _ <- assertEquals(boolean(r1), boolean(r2))
    return assertEquals(boolean(r1), boolean(r2))
  },
)

test(
  "A generator can be reused across multiple types",
  () => do {
    num = naiveRandom()
    r1 = generate(num)
    r2 = generate(num)
    multiType = (rand) => {
      numbers = shuffle(List.range(0, 10), rand)
      strings = shuffle(ALPHABET, rand)
      return #[numbers, strings]
    }
    return assertEquals(multiType(r1), multiType(r2))
  },
)
