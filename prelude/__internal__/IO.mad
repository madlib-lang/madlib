import type { Wish } from "Wish"
import { Wish } from "Wish"
import type { Error } from "__IOError__"
import Error from "__IOError__"
import {
  AddressAlreadyInUse,
  ArgumentListToLong,
  PermissionDenied,
  UnknownError,
} from "__IOError__"

import { mapWithIndex } from "List"
import { equals, when } from "Function"
import { split, join, isEmpty } from "String"
import { pShow, cShow } from "Show"
import Terminal from "Terminal"

export type Error
export AddressAlreadyInUse
export ArgumentListToLong
export PermissionDenied
export UnknownError

prettyCase :: (String -> String) -> String -> String
prettyCase = (color, str) => pipe(
  (x) => isEmpty(x) ? x : "",
  split(" "),
  mapWithIndex((x, i) => when(
    (_) => equals(i, 0),
    color
  )(x)),
  join(" "),
  (x) => x ++ "\n\t"
)(str)


/**
 * Given a color function and a label it prints the given value with
 * a label colored by the color function.
 *
 * @since 0.11.0
 * @example
 * colortrace(text.green, "label", [1, 2, 3])
 */
colortrace :: Show a => (String -> String) -> String -> a -> a
export colortrace = (fn, v, a) => trace(
  prettyCase(fn, v),
  a
)


export red = Terminal.text.red
export green = Terminal.text.green
export yellow = Terminal.text.yellow
export grey = Terminal.text.white

#iftarget js

#-
{Node}
import prelude_readline from "readline"
{/Node}
-#


/**
 * Writes a string to stdout without line return.
 *
 * @since 0.11.0
 * @example
 * put("Hello world")
 */
put :: String -> {}
export put = (a) => #- {
  {Node}
    process.stdout.write(a)
  {/Node}
  {Browser}
    console.log(a)
  {/Browser}
} -#


/**
 * Writes a string to stdout with line return.
 *
 * @since 0.11.0
 * @example
 * putLine("Hello world")
 */
putLine :: String -> {}
export putLine = (a) => #- { console.log(a) } -#


/**
 * Writes a string to stderr without line return.
 *
 * @since 0.11.0
 * @example
 * err("Hello world")
 */
err :: String -> {}
export err = (e) => #- {
  {Node}
    process.stderr.write(e)
  {/Node}
  {Browser}
    console.error(e)
  {/Browser}
} -#

enableTTYRawMode :: {} -> {}
export enableTTYRawMode = () => #- {
  if (process.stdin.isTTY) {
    prelude_readline.emitKeypressEvents(process.stdin)
    process.stdin.setRawMode(true)
  }
} -#

disableTTYRawMode :: {} -> {}
export disableTTYRawMode = () => #- {
  if (process.stdin.isTTY) {
    process.stdin.setRawMode(false)
  }
} -#

onKeyPress :: (String -> {}) -> {}
export onKeyPress = (cb) => #- {
  process.stdin.on("keypress", (chunk, key) => {
    cb(key.sequence)
  })
} -#

/**
 * A Wish reading one line from stdin
 *
 * @since 0.11.0
 */
getLine :: Wish Error String
export getLine = Wish((bad, good) => #- {
  {Node}
    const rl = prelude_readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      terminal: false
    })

    rl.on("line", (line) => {
      rl.close()
      good(line)
    })
  {/Node}
  {Browser}
    bad("Not implemented for browsers!")
  {/Browser}

  return () => {
    rl.close()
  }
} -#)


/**
 * A Wish reading from stdin
 *
 * @since 0.11.0
 */
get :: Wish Error String
export get = Wish((bad, good) => #- {
  {Node}
    let canceled = false;
    const lines = [];

    const rl = prelude_readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      terminal: false
    })

    rl.on("line", (line) => {
      lines.push(line)
    })

    rl.on("close", () => {
      if (canceled) {
        return
      }

      good(lines.join("\n"))
    })
  {/Node}
  {Browser}
    bad("Not implemented for browsers!")
  {/Browser}

  return function cancel() {
    canceled = true;
    rl.close()
  }
} -#)

#elseif llvm

type Handle = Handle(Handle)

cancelGet :: Handle -> {}
cancelGet = extern "madlib__stdio__cancelGet"


getLineFFI :: (Integer -> String -> {}) -> Handle
getLineFFI = extern "madlib__stdio__getLine"


enableTTYRawMode :: {} -> {}
export enableTTYRawMode = extern "madlib__stdio__enableTTYRawMode"

disableTTYRawMode :: {} -> {}
export disableTTYRawMode = extern "madlib__stdio__disableTTYRawMode"

onKeyPress :: (String -> {}) -> {}
export onKeyPress = extern "madlib__stdio__onKeyPress"


/**
 * A Wish reading one line from stdin
 *
 * @since 0.11.0
 */
getLine :: Wish Error String
export getLine = Wish((bad, good) => {
  done = false
  id = getLineFFI(
    (libuvError, line) => {
      done = true
      libuvError != 0
        ? bad(Error.fromLibuvError(libuvError))
        : good(line)
    }
  )

  return () => {
    if (!done) { cancelGet(id) }
  }
})


getFFI :: (Integer -> String -> {}) -> Handle
getFFI = extern "madlib__stdio__get"


/**
 * A Wish reading from stdin
 *
 * @since 0.11.0
 */
get :: Wish Error String
export get = Wish((bad, good) => {
  done = false
  id = getFFI(
    (libuvError, line) => {
      done = true
      libuvError != 0
        ? bad(Error.fromLibuvError(libuvError))
        : good(line)
    }
  )

  return () => {
    if (!done) { cancelGet(id) }
  }
})


/**
 * Writes a string to stdout with line return.
 *
 * @since 0.11.0
 * @example
 * putLine("Hello world")
 */
putLine :: String -> {}
export putLine = extern "madlib__stdio__putLine"


/**
 * Writes a string to stdout without line return.
 *
 * @since 0.11.0
 * @example
 * put("Hello world")
 */
put :: String -> {}
export put = extern "madlib__stdio__put"


/**
 * Writes a string to stderr without line return.
 *
 * @since 0.11.0
 * @example
 * err("Hello world")
 */
err :: String -> {}
export err = extern "madlib__stdio__err"


#endif

/**
 * Writes a Madlib value to stdout with line return.
 *
 * @since 0.11.0
 * @example
 * log({ x: 7, y: 13 })
 */
log :: Show a => a -> {}
export log = pipe(show, putLine)


/**
 * Writes a pretty printed Madlib value to stdout.
 *
 * @since 0.11.0
 * @example
 * pLog({ x: 7, y: 13 })
 */
pLog :: Show a => a -> {}
export pLog = pipe(pShow, putLine)


/**
 * Writes a pretty printed Madlib value with ansi colors to stdout.
 *
 * @since 0.11.0
 * @example
 * cLog({ x: 7, y: 13 })
 */
cLog :: Show a => a -> {}
export cLog = pipe(cShow, putLine)


/**
 * Writes a string to stderr with line return.
 *
 * @since 0.11.0
 * @example
 * errLine("Hello world")
 */
errLine :: String -> {}
export errLine = (error) => err(error ++ "\n")


/**
 * Convenient function to print something in the middle of a pipe.
 * It prints the given string and returns whatever second parameter
 * is given.
 *
 * @since 0.11.0
 * @example
 * putLineAndPass("Something", 3) // 3
 */
putLineAndPass :: String -> a -> a
export putLineAndPass = (v, a) => {
  putLine(v)
  return a
}


/**
 * Convenient function to print a line return.
 *
 * @since 0.11.0
 * @example
 * putEmptyLine(3) // 3
 */
newLine :: a -> a
export newLine = putLineAndPass("")


/**
 * Very useful within pipes as it allows one to quickly introspect,
 * whatever value is currently coming through the pipe.
 *
 * @since 0.11.0
 * @example
 * // prints "current value 6" and returns 7
 * pipe((x) => x * 2, trace("current value"), (x) => x + 1)(3)
 */
trace :: Show a => String -> a -> a
export trace = (v, a) => {
  putLine(`${v} ${show(a)}`)
  return a
}

traceStr :: String -> String -> String
export traceStr = (v, a) => {
  putLine(`${v} ${a}`)
  return a
}


/**
 * Very useful within pipes as it allows one to quickly introspect,
 * whatever value is currently coming through the pipe. Analog to
 * trace but produces a pretty-printed output
 *
 * @since 0.11.0
 * @example
 * // prints "current value 6" and returns 7
 * pipe((x) => x * 2, pTrace("current value"), (x) => x + 1)(3)
 */
pTrace :: Show a => String -> a -> a
export pTrace = (v, a) => {
  putLine(`${v} ${pShow(a)}`)
  return a
}


/**
 * Very useful within pipes as it allows one to quickly introspect,
 * whatever value is currently coming through the pipe. Analog to
 * trace but produces a pretty-printed & colored output
 *
 * @since 0.11.0
 * @example
 * // prints "current value 6" and returns 7
 * pipe((x) => x * 2, cTrace("current value"), (x) => x + 1)(3)
 */
cTrace :: Show a => String -> a -> a
export cTrace = (v, a) => {
  putLine(`${v} ${cShow(a)}`)
  return a
}
