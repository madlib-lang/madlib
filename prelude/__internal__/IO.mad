#-
{Node}
import util from "util"
{/Node}
-#


withColor :: String -> String -> String
withColor = (color, v) => color ++ v ++"\x1b[0m"

export red = withColor("\x1b[31m")
export green = withColor("\x1b[32m")
export yellow = withColor("\x1b[33m")
export grey = withColor("\x1b[90m")


log :: a -> a
export log = (a) => (#- { console.log(a); return a; } -#)

logAndPass :: String -> a -> a
export logAndPass = (v, a) => (#- { console.log(v); return a; } -#)

newLine :: a -> a
export newLine = logAndPass("")

trace :: String -> a -> a
export trace = (v, a) => (#- { console.log(v, a); return a; } -#)

err :: a -> a
export err = (e) => (#- { console.log(e); return e; } -#)

warn :: a -> a
export warn = (w) => (#- { console.warn(w); return w; } -#)

inspect :: a -> a
export inspect = (a) => (#-{
  {Browser}
  console.log(a)
  {/Browser}
  {Node}
  console.log(util.inspect(a, {showHidden: false, depth: null}))
  {/Node}
  return a
}-#)


#-
const stringify = (x) => {
  if (typeof x === "object") {
    if (Array.isArray(x)) {
      const items = x.map(stringify).reduce((acc, xx) => acc + ",\n    " + xx)
      return items.length < 80
        ? `[${items.replace("\n    ", " ")}]`
        : `[\n    ${items}\n]`
    }
    else {
      if (x.__constructor) {
        return x.__constructor + " " + x.__args.map(stringify).reduce((acc, xx) => acc + " " + xx, "")
      }
      else {
        const items = Object
          .keys(x)
          .map((k) => k + ": " + x[k])
          .reduce((acc, xx) => acc + ",\n    " + xx, "")

        return `{\n  ${items}\n}`
      }
    }
  } else return JSON.stringify(x)
}
-#

prettyPrint :: a -> a
export prettyPrint = (a) => #-{
  console.log(stringify(a))
  return a
}-#

export alias Row = { id :: String, cols :: List <String, String> }

table :: List Row -> a -> a
export table = (rows, a) => (#- {
  const xSpaces = x => new Array(x).fill(' ').join('')

  const longestId = rows.map(x => x.id.length).reduce((a, b) => Math.max(a, b), 0)

  const readyRows = rows
    .map(x => ({ ...x, id: x.id + xSpaces(longestId - x.id.length) }))
    .reduce((rows, row) => {
      return {
        ...rows,
        [row.id]: row.cols.reduce((o, [colName, colValue]) => { o[colName] = colValue; return o; }, {})
      }
    }, {})
  console.table(readyRows)
  return a
} -#)
