import type { Wish } from "Wish"
import { Wish } from "Wish"
import IOError from "IOError"

import { mapWithIndex } from "List"
import { equals, when } from "Function"
import { split, join, isEmpty } from "String"

END_COLOR = "\x1b[0m"

colorize :: String -> String -> String
colorize = (color, v) => color ++ v ++ END_COLOR

// via https://en.wikipedia.org/wiki/ANSI_escape_code

export ansi = {
  FGBlack: "30",
  FGRed: "31",
  FGGreen: "32",
  FGYellow: "33",
  FGBlue: "34",
  FGMagenta: "35",
  FGCyan: "36",
  FGWhite: "37",

  FGBrightBlack: "90",
  FGBrightRed: "91",
  FGBrightGreen: "92",
  FGBrightYellow: "93",
  FGBrightBlue: "94",
  FGBrightMagenta: "95",
  FGBrightCyan: "96",
  FGBrightWhite: "97",

  BGBlack: "40",
  BGRed: "41",
  BGGreen: "42",
  BGYellow: "43",
  BGBlue: "44",
  BGMagenta: "45",
  BGCyan: "46",
  BGWhite: "47",

  BGBrightBlack: "100",
  BGBrightRed: "101",
  BGBrightGreen: "102",
  BGBrightYellow: "103",
  BGBrightBlue: "104",
  BGBrightMagenta: "105",
  BGBrightCyan: "106",
  BGBrightWhite: "107",

  FormatUnderline: "4",
  FormatNoUnderline: "24",
  FormatBold: "1",
  FormatNoBold: "21",

  FormatInvert: "7",
}

ansiColor :: List String -> String -> String
export ansiColor = (parts, str) => colorize(
  `\x1b[${join(";", parts)}m`,
  str
)

export text = {
  black: ansiColor([ansi.FGBlack]),
  red: ansiColor([ansi.FGRed]),
  green: ansiColor([ansi.FGGreen]),
  yellow: ansiColor([ansi.FGYellow]),
  blue: ansiColor([ansi.FGBlue]),
  magenta: ansiColor([ansi.FGMagenta]),
  cyan: ansiColor([ansi.FGCyan]),
  white: ansiColor([ansi.FGWhite]),
  brightBlack: ansiColor([ansi.FGBrightBlack]),
  brightRed: ansiColor([ansi.FGBrightRed]),
  brightGreen: ansiColor([ansi.FGBrightGreen]),
  brightYellow: ansiColor([ansi.FGBrightYellow]),
  brightBlue: ansiColor([ansi.FGBrightBlue]),
  brightMagenta: ansiColor([ansi.FGBrightMagenta]),
  brightCyan: ansiColor([ansi.FGBrightCyan]),
  brightWhite: ansiColor([ansi.FGBrightWhite]),
  underline: ansiColor([ansi.FormatUnderline]),
  bold: ansiColor([ansi.FormatBold]),
  boldUnderline: ansiColor([ansi.FormatBold, ansi.FormatUnderline]),
}

export dark = {
  black: ansiColor([ansi.FGBlack, ansi.BGBlack]),
  red: ansiColor([ansi.FGRed, ansi.BGBlack]),
  green: ansiColor([ansi.FGGreen, ansi.BGBlack]),
  yellow: ansiColor([ansi.FGYellow, ansi.BGBlack]),
  blue: ansiColor([ansi.FGBlue, ansi.BGBlack]),
  magenta: ansiColor([ansi.FGMagenta, ansi.BGBlack]),
  cyan: ansiColor([ansi.FGCyan, ansi.BGBlack]),
  white: ansiColor([ansi.FGWhite, ansi.BGBlack]),
}

export light = {
  black: ansiColor([ansi.FGBrightBlack, ansi.BGWhite]),
  red: ansiColor([ansi.FGBrightRed, ansi.BGWhite]),
  green: ansiColor([ansi.FGBrightGreen, ansi.BGWhite]),
  yellow: ansiColor([ansi.FGBrightYellow, ansi.BGWhite]),
  blue: ansiColor([ansi.FGBrightBlue, ansi.BGWhite]),
  magenta: ansiColor([ansi.FGBrightMagenta, ansi.BGWhite]),
  cyan: ansiColor([ansi.FGBrightCyan, ansi.BGWhite]),
  white: ansiColor([ansi.FGBrightWhite, ansi.BGWhite]),
}


prettyCase :: (String -> String) -> String -> String
prettyCase = (color, str) => pipe(
  (x) => isEmpty(x) ? x : "",
  split(" "),
  mapWithIndex((x, i) => when(
    (_) => equals(i, 0),
    color
  )(x)),
  join(" "),
  (x) => x ++ "\n\t"
)(str)


colortrace :: Inspect a => (String -> String) -> String -> a -> a
export colortrace = (fn, v, a) => trace(
  prettyCase(fn, v),
  a
)


export red = text.red
export green = text.green
export yellow = text.yellow
export grey = text.white

#iftarget js

#-
{Node}
import util from "util"
import readline from "readline"
{/Node}
-#


put :: String -> {}
export put = (a) => #- {
  {Node}
    process.stdout.write(a)
  {/Node}
  {Browser}
    console.log(a)
  {/Browser}
} -#

putLine :: String -> {}
export putLine = (a) => #- console.log(a) -#


err :: String -> {}
export err = (e) => #- {
  {Node}
    process.stderr.write(e)
  {/Node}
  {Browser}
    console.error(e)
  {/Browser}
} -#


getLine :: Wish IOError.IOError String
export getLine = Wish((bad, good) => #- {
  {Node}
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      terminal: false
    })

    rl.on("line", (line) => {
      rl.close()
      good(line)
    })
  {/Node}
  {Browser}
    bad("Not implemented for browsers!")
  {/Browser}
} -#)

get :: Wish IOError.IOError String
export get = Wish((bad, good) => #- {
  {Node}
    const lines = [];

    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      terminal: false
    })

    rl.on("line", (line) => {
      lines.push(line)
    })

    rl.on("close", () => {
      rl.close()
      good(lines.join("\n"))
    })
  {/Node}
  {Browser}
    bad("Not implemented for browsers!")
  {/Browser}
} -#)



export alias Row = { id :: String, cols :: List #[String, String] }

table :: List Row -> a -> a
export table = (rows, a) => (#- {
  const xSpaces = x => new Array(x).fill(' ').join('')

  let rowsArr = __listToJSArray__(rows)

  const longestId = rowsArr.map(x => x.id.length).reduce((a, b) => Math.max(a, b), 0)

  const readyRows = rowsArr
    .map(x => ({ ...x, id: x.id + xSpaces(longestId - x.id.length) }))
    .reduce((rows, row) => {
      const colsArr = __listToJSArray__(row.cols)
      return {
        ...rows,
        [row.id]: colsArr.reduce((o, [colName, colValue]) => { o[colName] = colValue; return o; }, {})
      }
    }, {})
  console.table(readyRows)
  return a
} -#)

#elseif llvm

getLineFFI :: (Integer -> String -> {}) -> {}
getLineFFI = extern "madlib__stdio__getLine"

getLine :: Wish IOError.IOError String
export getLine = Wish((bad, good) =>
  getLineFFI(
    (libuvError, line) =>
      libuvError != 0
        ? bad(IOError.fromLibuvError(libuvError))
        : good(line)
  )
)

getFFI :: (Integer -> String -> {}) -> {}
getFFI = extern "madlib__stdio__get"

get :: Wish IOError.IOError String
export get = Wish((bad, good) =>
  getFFI(
    (libuvError, line) =>
      libuvError != 0
        ? bad(IOError.fromLibuvError(libuvError))
        : good(line)
  )
)

putLine :: String -> {}
export putLine = extern "madlib__stdio__putLine"

put :: String -> {}
export put = extern "madlib__stdio__put"

err :: String -> {}
export err = extern "madlib__stdio__err"


#endif

log :: Inspect a => a -> {}
export log = pipe(inspect, putLine)

errLine :: String -> {}
export errLine = (error) => err(error ++ "\n")

putLineAndPass :: String -> a -> a
export putLineAndPass = (v, a) => {
  putLine(v)
  return a
}

putEmptyLine :: a -> a
export newLine = putLineAndPass("")

trace :: Inspect a => String -> a -> a
export trace = (v, a) => {
  putLine(`${v} ${inspect(a)}`)
  return a
}
