import type { Data } from "Data"
import W from "Wish"
import { BinaryData, TextData } from "Data"

#- import fs from "fs" -#


writeFile :: String -> Data -> W.Wish e String
export writeFile = (path, d) => where(d) {
  is BinaryData bytes: W.Wish((bad, good) => #- {
      fs.writeFile(path, bytes, (err) => {
        if (err) {
          bad(err);
        }
        else {
          good(path)
        }
      })
    } -#)
  is TextData content: W.Wish((bad, good) => #- {
      fs.writeFile(path, content, (err) => {
        if (err) {
          bad(err);
        }
        else {
          good(path)
        }
      })
    }
  -#)
}

readFile :: String -> W.Wish e String
export readFile = (path) => W.Wish((bad, good) => #- {
  fs.readFile(path, "utf8", (err, d) => {
    if (err) {
      bad(err);
    }
    else {
      good(d)
    }
  })
}-#)

exists :: String -> W.Wish e String
export exists = (path) => W.Wish((bad, good) => #- {
  fs.access(path, fs.constants.F_OK, (err) => {
    if (err) {
      bad(err);
    } else {
      good(path);
    }
  });
} -#)
