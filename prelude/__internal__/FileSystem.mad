#iftarget js

import type { Data } from "Data"
import type { Wish } from "Wish"
import { Wish } from "Wish"
import { BinaryData, TextData } from "Data"

#- import fs from "fs" -#


writeFile :: String -> Data -> Wish String String
export writeFile = (path, d) => where(d) {
  BinaryData(bytes) => Wish((bad, good) => #- {
      fs.writeFile(path, bytes, (err) => {
        if (err) {
          bad(err);
        }
        else {
          good(path)
        }
      })
    } -#)

  TextData(content) => Wish((bad, good) => #- {
      fs.writeFile(path, content, (err) => {
        if (err) {
          bad(err);
        }
        else {
          good(path)
        }
      })
    }
  -#)
}

readFile :: String -> Wish String String
export readFile = (path) => Wish((bad, good) => #- {
  fs.readFile(path, "utf8", (err, d) => {
    if (err) {
      bad(err);
    }
    else {
      good(d)
    }
  })
}-#)

exists :: String -> Wish String String
export exists = (path) => Wish((bad, good) => #- {
  fs.access(path, fs.constants.F_OK, (err) => {
    if (err) {
      bad(err);
    } else {
      good(path);
    }
  });
} -#)

readDir :: String -> Wish String (List String)
export readDir = (path) => Wish((bad, good) => #- {
  fs.readdir(path, (err, files) => {
    if (err) {
      bad(err);
    } else {
      good(files);
    }
  })
} -#)

#elseif llvm
import type { Wish } from "Wish"
import { Wish } from "Wish"
import IOError from "IOError"

readFile_ :: String -> (Integer -> String -> ()) -> ()
readFile_ = extern "readFile"

readFile :: String -> Wish IOError.IOError String
export readFile = (path) => Wish((bad, good) =>
  readFile_(
    path,
    (libuvError, fileContent) =>
      libuvError != 0
        ? bad(IOError.fromLibuvError(libuvError))
        : good(fileContent)
  )
)

readFileRaw_ :: String -> (Integer -> Array Byte -> ()) -> ()
readFileRaw_ = extern "readFileRaw"

readFileRaw :: String -> Wish IOError.IOError (Array Byte)
export readFileRaw = (path) => Wish((bad, good) =>
  readFileRaw_(
    path,
    (libuvError, fileContent) =>
      libuvError != 0
        ? bad(IOError.fromLibuvError(libuvError))
        : good(fileContent)
  )
)

#endif
