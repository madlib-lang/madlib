import type { AssertionError } from "Test"
import type { Wish } from "Wish"

import Date from "Date"
import Integer from "Integer"
import List from "List"
import { AssertionError, test } from "Test"
import { Wish, after, bad } from "Wish"

import Stream from "./Stream"



type Event e a = Event(a) | Error(e) | Done
alias TimedEvent e a = { event :: Event e a, millisSincePreviousEvent :: Integer }

currentTimestamp = () => Date.getTimestamp(Date.now())


collectEvents :: Stream e a -> Wish c (List (TimedEvent e a))
collectEvents = (stream) => {
  events = []

  previousMillis = currentTimestamp()
  return Wish(
    (_, good) => {
      Stream.subscribe(
        (e) => {
          millis = currentTimestamp()
          events = List.append(
            { event: Error(e), millisSincePreviousEvent: millis - previousMillis },
            events,
          )
          previousMillis = millis
          good(events)
        },
        (a) => {
          millis = currentTimestamp()
          events = List.append(
            { event: Event(a), millisSincePreviousEvent: millis - previousMillis },
            events,
          )
          previousMillis = millis
        },
        () => {
          millis = currentTimestamp()
          events = List.append(
            { event: Done, millisSincePreviousEvent: millis - previousMillis },
            events,
          )
          previousMillis = millis
          good(events)
        },
        stream,
      )

      return () => {}
    },
  )
}


compareEvent :: (Eq e, Eq a) => TimedEvent e a -> TimedEvent e a -> Boolean
compareEvent = (expected, actual) => expected.event
    == actual.event
    && expected.millisSincePreviousEvent
    <= actual.millisSincePreviousEvent
    + 1


compareEvents :: (Eq e, Eq a) => List (TimedEvent e a) -> List (TimedEvent e a) -> Boolean
compareEvents = (expected, actual) => where(#[expected, actual]) {
  #[[], []] =>
    true

  #[[expectedEvent, ..._expected], [actualEvent, ..._actual]] =>
    compareEvent(expectedEvent, actualEvent) && compareEvents(_expected, _actual)

  _ =>
    false
}


assertStreamEvents :: (Eq e, Eq a, Show e, Show a) => List (TimedEvent e a)
  -> Stream e a
  -> Wish (AssertionError ) {}
assertStreamEvents = (expected, stream) => pipe(
  collectEvents,
  chain(
    (actual) => compareEvents(expected, actual) ? of({}) : bad(AssertionError(show(expected), show(actual))),
  ),
)(stream)


test(
  "concatMap - source faster than children",
  () => pipe(
    Stream.interval,
    Stream.take(3),
    map((x) => x + 1),
    ap(pure((x) => x + 1)),
    Stream.concatMap(
      (i) => i == 3 ? Stream.bad("Not that fast buddy!") : Stream.take(2, Stream.interval(20)),
    ),
    Stream.retry(3),
    Stream.chainRej(() => pure(25)),
    assertStreamEvents([
      { event: Event(0), millisSincePreviousEvent: 30 },
      { event: Event(1), millisSincePreviousEvent: 20 },
      { event: Event(0), millisSincePreviousEvent: 30 },
      { event: Event(1), millisSincePreviousEvent: 20 },
      { event: Event(0), millisSincePreviousEvent: 30 },
      { event: Event(1), millisSincePreviousEvent: 20 },
      { event: Event(25), millisSincePreviousEvent: 0 },
      { event: Done, millisSincePreviousEvent: 0 },
    ]),
  )(10),
)


test(
  "interval",
  () => pipe(
    Stream.interval,
    Stream.take(3),
    assertStreamEvents([
      { event: Event(0), millisSincePreviousEvent: 10 },
      { event: Event(1), millisSincePreviousEvent: 10 },
      { event: Event(2), millisSincePreviousEvent: 10 },
      { event: Done, millisSincePreviousEvent: 0 },
    ]),
  )(10),
)

test(
  "concatMap - retry and recover",
  () => pipe(
    Stream.interval,
    Stream.take(3),
    map((x) => x + 1),
    ap(pure((x) => x + 1)),
    Stream.concatMap(
      (i) => i == 3 ? Stream.bad("Not that fast buddy!") : Stream.take(2, Stream.interval(5)),
    ),
    Stream.retry(3),
    Stream.chainRej(() => pure(25)),
    assertStreamEvents([
      { event: Event(0), millisSincePreviousEvent: 25 },
      { event: Event(1), millisSincePreviousEvent: 5 },
      { event: Event(0), millisSincePreviousEvent: 25 },
      { event: Event(1), millisSincePreviousEvent: 5 },
      { event: Event(0), millisSincePreviousEvent: 25 },
      { event: Event(1), millisSincePreviousEvent: 5 },
      { event: Event(25), millisSincePreviousEvent: 0 },
      { event: Done, millisSincePreviousEvent: 0 },
    ]),
  )(20),
)


test(
  "concatMap - source rejected",
  () => pipe(
    Stream.interval,
    Stream.concatMap(() => Stream.bad("Error")),
    Stream.concatMap(
      (i) => i == 30 ? Stream.bad("Not that fast buddy!") : Stream.take(2, Stream.interval(400)),
    ),
    assertStreamEvents([{ event: Error("Error"), millisSincePreviousEvent: 50 }]),
  )(50),
)


test(
  "concatMap",
  () => pipe(
    Stream.range(0, 2),
    Stream.concatMap((i) => (of("OK" ++ show(i)) :: Stream Integer String)),
    assertStreamEvents([
      { event: Event("OK0"), millisSincePreviousEvent: 0 },
      { event: Event("OK1"), millisSincePreviousEvent: 0 },
      { event: Event("OK2"), millisSincePreviousEvent: 0 },
      { event: Done, millisSincePreviousEvent: 0 },
    ]),
  )(1),
)

test(
  "chain - source rejected",
  () => pipe(
    Stream.interval,
    chain(() => Stream.bad("Error")),
    chain(() => Stream.take(2, Stream.interval(400))),
    assertStreamEvents([{ event: Error("Error"), millisSincePreviousEvent: 50 }]),
  )(50),
)


test(
  "chain",
  () => pipe(
    Stream.range(0, 2),
    chain((i) => of("OK" ++ show(i))),
    assertStreamEvents([
      { event: Event("OK0"), millisSincePreviousEvent: 0 },
      { event: Event("OK1"), millisSincePreviousEvent: 0 },
      { event: Event("OK2"), millisSincePreviousEvent: 0 },
      { event: Done, millisSincePreviousEvent: 0 },
    ]),
  )(1),
)


test(
  "mergeMap",
  () => pipe(
    Stream.range(0, 2),
    Stream.mergeMap((i) => of("OK" ++ show(i))),
    assertStreamEvents([
      { event: Event("OK0"), millisSincePreviousEvent: 0 },
      { event: Event("OK1"), millisSincePreviousEvent: 0 },
      { event: Event("OK2"), millisSincePreviousEvent: 0 },
      { event: Done, millisSincePreviousEvent: 0 },
    ]),
  )(1),
)


test(
  "filter",
  () => pipe(
    Stream.range(0, 100000000000000000),
    Stream.filter((x) => x % 7 == 0),
    Stream.take(10),
    Stream.toList,
    assertStreamEvents([
      { event: Event([0, 7, 14, 21, 28, 35, 42, 49, 56, 63]), millisSincePreviousEvent: 0 },
      { event: Done, millisSincePreviousEvent: 0 },
    ]),
  )(1),
)


test(
  "filter - fail",
  () => pipe(
    Stream.interval,
    Stream.filter((x) => x % 2 == 0),
    Stream.take(10),
    chain(() => Stream.bad("NOPE")),
    assertStreamEvents([{ event: Error("NOPE"), millisSincePreviousEvent: 5 }]),
  )(5),
)


test(
  "merge",
  () => pipe(
    Stream.merge,
    assertStreamEvents([
      { event: Event(3), millisSincePreviousEvent: 0 },
      { event: Event(5), millisSincePreviousEvent: 0 },
      { event: Done, millisSincePreviousEvent: 0 },
    ]),
  )([of(3), of(5)]),
)


test(
  "merge - error",
  () => pipe(
    Stream.merge,
    assertStreamEvents([
      { event: Event(3), millisSincePreviousEvent: 0 },
      { event: Error("NOOO"), millisSincePreviousEvent: 0 },
    ]),
  )([of(3), Stream.bad("NOOO"), of(5)]),
)


test(
  "merge - canceled",
  () => pipe(
    Stream.merge,
    chain(() => Stream.bad("NOOO")),
    assertStreamEvents([{ event: Error("NOOO"), millisSincePreviousEvent: 0 }]),
  )([of(3), Stream.bad("NOOO"), of(5)]),
)


test(
  "concat",
  () => pipe(
    Stream.concat,
    assertStreamEvents([
      { event: Event(3), millisSincePreviousEvent: 0 },
      { event: Event(5), millisSincePreviousEvent: 0 },
      { event: Done, millisSincePreviousEvent: 0 },
    ]),
  )(([of(3), of(5)])),
)


test(
  "concat - error",
  () => pipe(
    Stream.concat,
    assertStreamEvents([
      { event: Event(3), millisSincePreviousEvent: 0 },
      { event: Error("NOOO"), millisSincePreviousEvent: 0 },
    ]),
  )(([of(3), Stream.bad("NOOO"), of(5)])),
)


test(
  "concat - canceled",
  () => pipe(
    Stream.concat,
    chain(() => Stream.bad("NOOO")),
    assertStreamEvents([{ event: Error("NOOO"), millisSincePreviousEvent: 0 }]),
  )(([of(3), Stream.bad("NOOO"), of(5)])),
)


test(
  "mergeN",
  () => pipe(
    Stream.mergeN(2),
    assertStreamEvents([
      { event: Event(0), millisSincePreviousEvent: 10 },
      { event: Event(0), millisSincePreviousEvent: 0 },
      { event: Done, millisSincePreviousEvent: 0 },
    ]),
  )([Stream.take(1, Stream.interval(20)), Stream.take(1, Stream.interval(10))]),
)


test(
  "mergeN - sequential",
  () => pipe(
    Stream.mergeN(1),
    assertStreamEvents([
      { event: Event(0), millisSincePreviousEvent: 20 },
      { event: Event(0), millisSincePreviousEvent: 0 },
      { event: Done, millisSincePreviousEvent: 0 },
    ]),
  )([Stream.take(1, Stream.interval(20)), Stream.take(1, Stream.interval(10))]),
)


test(
  "mergeN - fail",
  () => pipe(
    Stream.mergeN(2),
    chain(() => Stream.bad("ERROR")),
    assertStreamEvents([{ event: Error("ERROR"), millisSincePreviousEvent: 0 }]),
  )([Stream.interval(20), Stream.interval(10)]),
)


test(
  "ap",
  () => pipe(
    Stream.interval,
    Stream.take(5),
    ap(
      pipe(
        Stream.interval,
        map((i, x) => i + x),
        Stream.take(3),
      )(15),
    ),
    assertStreamEvents([
      { event: Event(0), millisSincePreviousEvent: 15 },
      { event: Event(1), millisSincePreviousEvent: 5 },
      { event: Event(2), millisSincePreviousEvent: 5 },
      { event: Event(3), millisSincePreviousEvent: 0 },
      { event: Event(4), millisSincePreviousEvent: 5 },
      { event: Event(5), millisSincePreviousEvent: 0 },
      { event: Event(6), millisSincePreviousEvent: 5 },
      { event: Done, millisSincePreviousEvent: 0 },
    ]),
  )(10),
)


test(
  "ap - pullable functions",
  () => pipe(
    Stream.interval,
    Stream.take(5),
    ap(
      pipe(
        Stream.range(0, 2),
        map((i, x) => i + x),
      )(1),
    ),
    assertStreamEvents([
      { event: Event(0), millisSincePreviousEvent: 10 },
      { event: Event(1), millisSincePreviousEvent: 0 },
      { event: Event(2), millisSincePreviousEvent: 0 },
      { event: Event(3), millisSincePreviousEvent: 0 },
      { event: Event(4), millisSincePreviousEvent: 10 },
      { event: Event(5), millisSincePreviousEvent: 10 },
      { event: Event(6), millisSincePreviousEvent: 10 },
      { event: Done, millisSincePreviousEvent: 0 },
    ]),
  )(10),
)


test(
  "fromWish",
  () => pipe(
    after(200),
    Stream.fromWish,
    assertStreamEvents([
      { event: Event(3), millisSincePreviousEvent: 200 },
      { event: Done, millisSincePreviousEvent: 0 },
    ]),
  )(3),
)


test(
  "fromWish - canceled",
  () => {
    s1 = pipe(
      after(200),
      Stream.fromWish,
    )(3)
    s2 = Stream.bad("ERROR")

    return pipe(
      Stream.merge,
      assertStreamEvents([{ event: Error("ERROR"), millisSincePreviousEvent: 0 }]),
    )([s1, s2])
  },
)
