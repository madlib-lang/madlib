import type { AssertionError } from "Test"
import type { Wish } from "Wish"

import Date from "Date"
import Integer from "Integer"
import List from "List"
import Math from "Math"
import { AssertionError, test } from "Test"
import { Wish, bad } from "Wish"

import Stream from "./Stream"



PERCENT_TOLERANCE = 5

type Event e a = Event(Integer, a) | Error(Integer, e) | Done(Integer)

currentTimestamp = () => Date.getTimestamp(Date.now())


computeRelative = (start, end, timestamp) => {
  range = end - start

  return range == 0 ? 100 : Integer.fromFloat((timestamp - start) / range * 100)
}


absoluteToRelativeTimestamp :: Integer -> Integer -> Event e a -> Event e a
absoluteToRelativeTimestamp = (start, end, event) => {
  range = end - start

  return where(event) {
    Event(ts, a) =>
      Event(computeRelative(start, end, ts), a)

    Error(ts, e) =>
      Error(computeRelative(start, end, ts), e)

    Done(ts) =>
      Done(computeRelative(start, end, ts))
  }
}



collectEvents :: Stream e a -> Wish c (List (Event e a))
collectEvents = (stream) => {
  events = []

  return Wish(
    (_, good) => {
      startTimestamp = currentTimestamp()
      Stream.subscribe(
        (e) => {
          events = List.append(Error(currentTimestamp(), e), events)
          endTimestamp = currentTimestamp()
          good(map(absoluteToRelativeTimestamp(startTimestamp, endTimestamp), events))
        },
        (a) => {
          events = List.append(Event(currentTimestamp(), a), events)
        },
        () => {
          events = List.append(Done(currentTimestamp()), events)
          endTimestamp = currentTimestamp()
          good(map(absoluteToRelativeTimestamp(startTimestamp, endTimestamp), events))
        },
        stream,
      )

      return () => {}
    },
  )
}


kindOfEq :: (Number a, Comparable a) => a -> a -> Boolean
kindOfEq = (a, b) => Math.abs(a - b) < PERCENT_TOLERANCE


compareEvent :: (Eq e, Eq a) => Event e a -> Event e a -> Boolean
compareEvent = (expected, actual) => where(#[expected, actual]) {
  #[Event(ts, a), Event(_ts, _a)] =>
    a == _a && kindOfEq(ts, _ts)

  #[Error(ts, e), Error(_ts, _e)] =>
    e == _e && kindOfEq(ts, _ts)

  #[Done(ts), Done(_ts)] =>
    ts == _ts

  _ =>
    false
}


compareEvents :: (Eq e, Eq a) => List (Event e a) -> List (Event e a) -> Boolean
compareEvents = (expected, actual) => where(#[expected, actual]) {
  #[[], []] =>
    true

  #[[expectedEvent, ..._expected], [actualEvent, ..._actual]] =>
    compareEvent(expectedEvent, actualEvent) && compareEvents(_expected, _actual)

  _ =>
    false
}


assertStreamEvents :: (Eq e, Eq a) => List (Event e a)
  -> Stream e a
  -> Wish (AssertionError (List (Event e a))) {}
assertStreamEvents = (expected, stream) => pipe(
  collectEvents,
  chain(
    (actual) => compareEvents(expected, actual) ? of({}) : bad(AssertionError(expected, actual)),
  ),
)(stream)


test(
  "concatMap - source faster than children",
  () => pipe(
    Stream.interval,
    Stream.take(3),
    map((x) => x + 1),
    ap(pure((x) => x + 1)),
    Stream.concatMap(
      (i) => i == 3 ? Stream.bad("Not that fast buddy!") : Stream.take(2, Stream.interval(20)),
    ),
    Stream.retry(3),
    Stream.chainRej(() => pure(25)),
    assertStreamEvents([
      Event(23, 0),
      Event(30, 1),
      Event(56, 0),
      Event(63, 1),
      Event(90, 0),
      Event(96, 1),
      Event(100, 25),
      Done(100),
    ]),
  )(10),
)


test(
  "interval",
  () => pipe(
    Stream.interval,
    Stream.take(3),
    assertStreamEvents([Event(33, 0), Event(66, 1), Event(100, 2), Done(100)]),
  )(10),
)

test(
  "concatMap - retry and recover",
  () => pipe(
    Stream.interval,
    Stream.take(3),
    map((x) => x + 1),
    ap(pure((x) => x + 1)),
    Stream.concatMap(
      (i) => i == 3 ? Stream.bad("Not that fast buddy!") : Stream.take(2, Stream.interval(5)),
    ),
    Stream.retry(3),
    Stream.chainRej(() => pure(25)),
    assertStreamEvents([
      Event(21, 0),
      Event(25, 1),
      Event(54, 0),
      Event(58, 1),
      Event(87, 0),
      Event(92, 1),
      Event(100, 25),
      Done(100)
    ]),
  )(20),
)


test(
  "concatMap - source rejected",
  () => pipe(
    Stream.interval,
    Stream.concatMap(() => Stream.bad("Error")),
    Stream.concatMap(
      (i) => i == 30 ? Stream.bad("Not that fast buddy!") : Stream.take(2, Stream.interval(400)),
    ),
    assertStreamEvents([Error(100, "Error")]),
  )(50),
)


test("concatMap", () => pipe(
  Stream.range(0, 2),
  Stream.concatMap((i) => (of("OK" ++ show(i)) :: Stream Integer String)),
  assertStreamEvents([Event(100, "OK0"), Event(100, "OK1"), Event(100, "OK2"), Done(100)]),
)(1))

test(
  "chain - source rejected",
  () => pipe(
    Stream.interval,
    chain(() => Stream.bad("Error")),
    chain(() => Stream.take(2, Stream.interval(400))),
    assertStreamEvents([Error(100, "Error")]),
  )(50),
)

test("chain", () => pipe(
  Stream.range(0, 2),
  chain((i) => of("OK" ++ show(i))),
  assertStreamEvents([Event(100, "OK0"), Event(100, "OK1"), Event(100, "OK2"), Done(100)]),
)(1))

test("mergeMap", () => pipe(
  Stream.range(0, 2),
  Stream.mergeMap((i) => of("OK" ++ show(i))),
  assertStreamEvents([Event(100, "OK0"), Event(100, "OK1"), Event(100, "OK2"), Done(100)]),
)(1))

test(
  "filter",
  () => pipe(
    Stream.range(0, 100000000000000000),
    Stream.filter((x) => x % 7 == 0),
    Stream.take(10),
    Stream.toList,
    assertStreamEvents([Event(100, [0, 7, 14, 21, 28, 35, 42, 49, 56, 63]), Done(100)]),
  )(1),
)

test("merge", () => pipe(
  Stream.merge,
  assertStreamEvents([Event(100, 3), Event(100, 5), Done(100)])
)([of(3), of(5)]))


test("merge - error", () => pipe(
  Stream.merge,
  assertStreamEvents([Event(100, 3), Error(100, "NOOO")])
)([of(3), Stream.bad("NOOO"), of(5)]))


test("merge - canceled", () => pipe(
  Stream.merge,
  chain(() => Stream.bad("NOOO")),
  assertStreamEvents([Error(100, "NOOO")])
)([of(3), Stream.bad("NOOO"), of(5)]))


test("concat", () => pipe(
  Stream.concat,
  assertStreamEvents([Event(100, 3), Event(100, 5), Done(100)])
)(([of(3), of(5)] :: List (Stream String Integer))))


test("concat - error", () => pipe(
  Stream.concat,
  assertStreamEvents([Event(100, 3), Error(100, "NOOO")])
)(([of(3), Stream.bad("NOOO"), of(5)] :: List (Stream String Integer))))


test("concat - canceled", () => pipe(
  Stream.concat,
  chain(() => Stream.bad("NOOO")),
  assertStreamEvents([Error(100, "NOOO")])
)(([of(3), Stream.bad("NOOO"), of(5)] :: List (Stream String Integer))))


test("mergeN", () => pipe(
  Stream.mergeN(2),
  assertStreamEvents([Event(50, 0), Event(100, 0), Done(100)])
)([Stream.take(1, Stream.interval(20)), Stream.take(1, Stream.interval(10))]))
