import {} from "Monad"
import {} from "Monoid"
import type { WriterT } from "WriterT"
import { WriterT } from "WriterT"
import type { StateT } from "StateT"
import {} from "StateT"

interface (Monoid w, Monad m) => MonadWriter w m {
  tell :: w -> m {}
}

instance (Monoid w, Monad m) => MonadWriter w (WriterT w m) {
  tell = (v) => WriterT(of(#[{}, v]))
}

/**
 * instance MonadWriter for StateT
 */
instance (Monoid w, Monad m, MonadWriter w m) => MonadWriter w (StateT s m) {
  tell = pipe(tell, lift)
}
