import ByteArray from "ByteArray"
import { Just } from "Maybe"
import { assertEquals, test } from "Test"



test("empty", () => assertEquals(ByteArray.empty(), ByteArray.fromList([])))

test(
  "init",
  () => {
    actual = pipe(
      ByteArray.init,
      ByteArray.weld(ByteArray.fromList([1, 2, 3])),
    )(10)
    expected = ByteArray.fromList([1, 2, 3])
    return assertEquals(actual, expected)
  },
)


test(
  "unsafeAt",
  () => assertEquals(
    pipe(
      ByteArray.fromList,
      ByteArray.unsafeAt(1),
    )([1, 2, 3]),
    2,
  ),
)


test(
  "unsafeSet",
  () => assertEquals(
    pipe(
      ByteArray.fromList,
      ByteArray.unsafeSet(1, 33),
    )([1, 2, 3]),
    ByteArray.fromList([1, 33, 3]),
  ),
)


test(
  "set",
  () => assertEquals(
    pipe(
      ByteArray.fromList,
      ByteArray.set(1, 33),
    )([1, 2, 3]),
    ByteArray.fromList([1, 33, 3]),
  ),
)


test(
  "at",
  () => assertEquals(
    pipe(
      ByteArray.fromList,
      ByteArray.at(1),
    )([1, 2, 3]),
    Just(2),
  ),
)


test(
  "mapBytes",
  () => assertEquals(
    ByteArray.mapBytes((x) => x * 2, ByteArray.fromList([1, 2, 3])),
    ByteArray.fromList([2, 4, 6]),
  ),
)


test(
  "mapBytes - empty ByteAray",
  () => assertEquals(
    ByteArray.mapBytes((x) => x * 2, ByteArray.fromList([])),
    ByteArray.fromList([]),
  ),
)


test(
  "filter",
  () => assertEquals(
    ByteArray.filter((x) => x % 2 == 0, ByteArray.fromList([1, 2, 3, 4, 5, 6])),
    ByteArray.fromList([2, 4, 6]),
  ),
)


test(
  "push",
  () => assertEquals(
    ByteArray.push(7, ByteArray.fromList([1, 2, 3, 4, 5, 6])),
    ByteArray.fromList([1, 2, 3, 4, 5, 6, 7]),
  ),
)


test(
  "reduce",
  () => assertEquals(ByteArray.reduce((sum, a) => sum + a, 0, ByteArray.fromList([1, 2, 3])), 6),
)


test(
  "concat",
  () => assertEquals(
    ByteArray.concat(ByteArray.fromList([1, 2, 3]), ByteArray.fromList([4, 5, 6])),
    ByteArray.fromList([1, 2, 3, 4, 5, 6]),
  ),
)


test(
  "weld",
  () => assertEquals(
    ByteArray.weld(ByteArray.fromList([1, 2, 3]), ByteArray.fromList([4, 5, 6])),
    ByteArray.fromList([1, 2, 3, 4, 5, 6]),
  ),
)


test(
  "length",
  () => assertEquals(
    pipe(
      ByteArray.fromList,
      ByteArray.length,
    )([1, 2, 3, 4, 5, 6]),
    6,
  ),
)


test(
  "toList",
  () => assertEquals(
    pipe(
      ByteArray.fromList,
      ByteArray.toList,
    )([1, 2, 3, 4, 5, 6]),
    [1, 2, 3, 4, 5, 6],
  ),
)


test(
  "fromString",
  () => assertEquals(ByteArray.fromString("ABC"), ByteArray.fromList([65, 66, 67])),
)


test(
  "toString",
  () => assertEquals(
    pipe(
      ByteArray.fromList,
      ByteArray.toString,
    )([65, 66, 67]),
    "ABC",
  ),
)


test(
  "toString - unicode",
  () => assertEquals(
    pipe(
      ByteArray.fromList,
      ByteArray.toString,
    )([226, 130, 172]),
    "â‚¬",
  ),
)
