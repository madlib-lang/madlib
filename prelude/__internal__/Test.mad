import Dictionary from "Dictionary"
import FilePath from "FilePath"
import { always, equals, ifElse, when } from "Function"
import IO from "IO"
import List from "List"
import Math from "Math"
import { Just, Nothing, fromMaybe } from "Maybe"
import Monad from "Monad"
import {} from "Number"
import Process from "Process"
import { pShow } from "Show"
import String from "String"
import Term from "Terminal"
import Tuple from "Tuple"
import Wish from "Wish"



moveCursorUpCode :: Integer -> String
moveCursorUpCode = (lines) => `\x1b[${show(lines)}A`

IS_COLOR_ENABLED :: Boolean
IS_COLOR_ENABLED = do {
  noColor = Process.getEnv("NO_COLOR")
  return noColor == Just("") || noColor == Nothing
}

colorfulPrefix :: List String -> String -> String
colorfulPrefix = (colors, v) => IS_COLOR_ENABLED ? Term.ansiColor(colors, " " ++ v) : v

PREFIX_RUNS = colorfulPrefix([Term.ansi.FGBlack, Term.ansi.BGBrightYellow], "RUNS ")

PREFIX_PASS = colorfulPrefix([Term.ansi.FGBlack, Term.ansi.BGBrightGreen], "PASS ")

PREFIX_FAIL = colorfulPrefix([Term.ansi.FGBlack, Term.ansi.BGBrightRed], "FAIL ")

PREFIX_SKIP = colorfulPrefix([Term.ansi.FGBlack, Term.ansi.BGBrightYellow], "SKIP ")

// CHAR_CHECK :: String
// CHAR_CHECK = "✓"

CHAR_CROSS = "×"

CHAR_INCOMPLETE = "⧜"

EMPTY_REPORT = TestReport("", 0, 0, 0, 0)

CWD = Process.getCurrentWorkingDirectory()


// Result collector

// SuiteResult(total, succeeded, failed, skipped)
export type SuiteResult = SuiteResult(Integer, Integer, Integer, Integer)
export type TestResult = Success(String) | Failure(String, String) | Skipped(String)

isSuccess :: TestResult -> Boolean
isSuccess = where {
  Success(_) =>
    true

  _ =>
    false
}

isSkipped :: TestResult -> Boolean
isSkipped = where {
  Skipped(_) =>
    true

  _ =>
    false
}

alias ResultCollection = {
  getResults :: {} -> Dictionary String SuiteResult,
  setResults :: Dictionary String SuiteResult -> {},
}

makeResultCollector :: {} -> ResultCollection
makeResultCollector = () => {
  results = {{}}

  getResults = () => results

  setResults = (newResults) => {
    results := newResults
  }

  return { getResults, setResults }
}

collector :: ResultCollection
collector = makeResultCollector()


// Test API

export type AssertionError
  = AssertionError(String, String)
  | Error(String)
  | ErrorWithMessage(String)
  | NotImplemented


/*
 * TestReport
 * message - String
 * total - Integer
 * successCount - Integer
 * failureCount - Integer
 * skippedCount - Integer
 */
export type TestReport = TestReport(String, Integer, Integer, Integer, Integer)


printReport = (name, i) => `${name}\n  ↳ ${
  pipe(
    show,
    Term.ansiColor([Term.ansi.FormatBold, Term.ansi.FGBrightYellow]),
  )(i)
}`

// createTest :: String -> (a -> b) -> a -> b -> Wish TestResult TestResult
createTest = (name, fn, i, o) => test(printReport(name, i), () => assertEquals(fn(i), o))

export report = (fn, name, listInOut) => pipe(
  map(where { #[i, o] => createTest(name, fn, i, o) }),
)(listInOut)

reportBook :: Show a => (a -> Wish TestResult TestResult)
  -> String
  -> Dictionary a (Wish TestResult TestResult)
  -> List (Wish TestResult TestResult)
export reportBook = (fn, name, testDict) => pipe(
  Dictionary.mapWithKey(createTest(name, fn)),
  Dictionary.values,
)(testDict)

caseN2 :: (a -> b -> c) -> #[a, b] -> c
export caseN2 = (fn, pair) => where(pair) {
  #[a, b] =>
    fn(a, b)
}
caseN3 :: (a -> b -> c -> d) -> #[a, b, c] -> d
export caseN3 = (fn, t3) => where(t3) {
  #[a, b, c] =>
    fn(a, b, c)
}
caseN4 :: (a -> b -> c -> d -> e) -> #[a, b, c, d] -> e
export caseN4 = (fn, t4) => where(t4) {
  #[a, b, c, d] =>
    fn(a, b, c, d)
}
caseN5 :: (a -> b -> c -> d -> e -> f) -> #[a, b, c, d, e] -> f
export caseN5 = (fn, t5) => where(t5) {
  #[a, b, c, d, e] =>
    fn(a, b, c, d, e)
}


getMessage :: TestReport -> String
getMessage = where {
  TestReport(str, _, _, _, _) =>
    str
}

getTotal :: TestReport -> Integer
getTotal = where {
  TestReport(_, total, _, _, _) =>
    total
}

getSuccessCount :: TestReport -> Integer
getSuccessCount = where {
  TestReport(_, _, success, _, _) =>
    success
}

getFailureCount :: TestReport -> Integer
getFailureCount = where {
  TestReport(_, _, _, failed, _) =>
    failed
}

getSkippedCount :: TestReport -> Integer
getSkippedCount = where {
  TestReport(_, _, _, _, skipped) =>
    skipped
}

resultToReport :: TestResult -> TestReport
resultToReport = where {
  Failure(_, message) =>
    TestReport(message, 1, 0, 1, 0)

  Success(_) =>
    TestReport("", 1, 1, 0, 0)

  Skipped(_) =>
    TestReport("", 1, 0, 0, 1)
}

mergeReports :: TestReport -> TestReport -> TestReport
mergeReports = (t1, t2) => TestReport(
  getMessage(t1) ++ getMessage(t2),
  getTotal(t1) + getTotal(t2),
  getSuccessCount(t1) + getSuccessCount(t2),
  getFailureCount(t1) + getFailureCount(t2),
  getSkippedCount(t1) + getSkippedCount(t2),
)

assertEquals :: (Show a, Eq a) => a -> a -> Wish.Wish AssertionError {}
export assertEquals = (actual, expected) => actual == expected
  ? of({})
  : Wish.bad(AssertionError(pShow(expected), pShow(actual)))

indent :: Integer -> String -> String
indent = (amount, x) => pipe(
  String.lines,
  map(
    (line) => pipe(
      spaces,
      mappend($, line),
    )(amount),
  ),
  String.unlines,
)(x)

renderValue :: (String -> String) -> String -> String
renderValue = (colorize, value) => pipe(
  indent(4),
  (s) => IS_COLOR_ENABLED ? colorize(s) : s,
)(value)

renderAssertionError :: String -> AssertionError -> String
renderAssertionError = (description, assertionError) => where(assertionError) {
  AssertionError(expected, actual) =>
    IO.red(`${CHAR_CROSS} ${description}`)
      ++ "\n  expected:\n"
      ++ renderValue(Term.text.brightGreen, expected)
      ++ "\n  actual:\n"
      ++ renderValue(Term.text.brightRed, actual)
      ++ "\n"

  ErrorWithMessage(message) =>
    IS_COLOR_ENABLED ? IO.red(`${CHAR_CROSS} ${message}\n`) : `${CHAR_CROSS} ${message}\n`

  Error(err) =>
    (
      IS_COLOR_ENABLED
        ? IO.red(`${CHAR_CROSS} ${description} - ${show(err)}\n`)
        : `${CHAR_CROSS} ${description} - ${show(err)}\n`
    )

  NotImplemented =>
    IS_COLOR_ENABLED
      ? IO.yellow(`${CHAR_INCOMPLETE} "${description}" not implemented`)
      : `${CHAR_INCOMPLETE} "${description}" not implemented`
}

test :: String -> (String -> Wish.Wish AssertionError {}) -> Wish.Wish TestResult TestResult
export test = (description, testFunction) => pipe(
  testFunction,
  bimap(
    pipe(
      renderAssertionError(description),
      Failure(description),
    ),
    always(Success(description)),
  ),
)(description)

skip :: String -> (String -> {}) -> Wish.Wish TestResult TestResult
export skip = (description, _) => pipe(
  (_) => Wish.good({}),
  bimap(
    pipe(
      always(NotImplemented),
      renderAssertionError(description),
      Skipped,
    ),
    always(Skipped(description)),
  ),
)(description)

generateReportSuiteEndMessage :: List (Wish.Wish e a) -> String
generateReportSuiteEndMessage = pipe(
  List.length,
  ifElse(equals(0), always("No test found\n\n"), always("")),
)

getSuitePath :: Boolean -> List String -> String
getSuitePath = (colorful, parts) => pipe(
  List.init,
  FilePath.joinPath,
  mappend($, "/"),
  when(always(colorful && IS_COLOR_ENABLED), IO.grey),
)(parts)

getSuiteName :: List String -> String
getSuiteName = pipe(
  List.last,
  fromMaybe(""),
)

prepareSuitePath :: Boolean -> String -> String
prepareSuitePath = (colorful, suitePath) => {
  cwdParts = FilePath.splitPath(CWD)
  partIndex = 0

  return pipe(
    FilePath.splitPath,
    List.dropWhile(
      (part) => {
        justPart = pipe(
          FilePath.dropTrailingPathSeparator,
          Just,
        )(part)
        justCwdPart = pipe(
          List.nth(partIndex),
          map(FilePath.dropTrailingPathSeparator),
        )(cwdParts)
        drop = justPart == justCwdPart
        partIndex := partIndex + 1
        return drop
      },
    ),
    (parts) => getSuitePath(colorful, parts) ++ getSuiteName(parts),
  )(suitePath)
}

spaces :: Integer -> String
spaces = (amount) => pipe(
  List.repeat(' '),
  String.fromList,
)(amount)

printSuiteResults :: Dictionary String SuiteResult -> {}
printSuiteResults = (results) => {
  pipe(
    Dictionary.toList,
    map(
      where {
        #[suitePath, SuiteResult(total, success, failed, skipped)] =>
          do {
            counts = `${show(success + failed + skipped)}/${show(total)}`
            preparedSuitePath = prepareSuitePath(true, suitePath)
            coloredCounts = if (IS_COLOR_ENABLED) {
              failed > 0
                ? skipped > 0 ? Term.text.brightYellow(counts) : Term.text.brightRed(counts)
                : Term.text.brightGreen(counts)
            } else {
              counts
            }
            prefix = total == success + failed + skipped
              ? skipped > 0 ? PREFIX_SKIP : failed > 0 ? PREFIX_FAIL : PREFIX_PASS
              : PREFIX_RUNS

            return #[`${prefix} ${preparedSuitePath}`, coloredCounts]
          }
      },
    ),
    (
      (prepared) => {
        firsts = map(Tuple.fst, prepared)
        longest = List.reduce(
          (biggest, input) => Math.max(biggest, String.length(input)),
          0,
          firsts,
        )

        map(
          where {
            #[start, counts] =>
              IO.putLine(`${start}${spaces(longest - String.length(start))} [${counts}]`)
          },
          prepared,
        )
      }
    ),
  )(results)

  IO.putLine("")
}


failSuite :: String -> {}
failSuite = (suitePath) => {
  pipe(
    Dictionary.update(
      where {
        SuiteResult(total, success, failed, skipped) =>
          SuiteResult(total, success, total - success, skipped)
      },
      suitePath,
    ),
    collector.setResults,
  )(collector.getResults())

  if (IS_COLOR_ENABLED) do {
    IO.put(moveCursorUpCode(Dictionary.length(collector.getResults()) + 1))
    printSuiteResults(collector.getResults())
  }
}


updateSuiteResult :: String -> TestResult -> TestResult
updateSuiteResult = (suitePath, result) => {
  pipe(
    Dictionary.update(
      where {
        SuiteResult(total, success, failed, skipped) =>
          isSuccess(result)
            ? SuiteResult(total, success + 1, failed, skipped)
            : isSkipped(result)
              ? SuiteResult(total, success, failed, skipped + 1)
              : SuiteResult(total, success, failed + 1, skipped)
      },
      suitePath,
    ),
    collector.setResults,
  )(collector.getResults())

  if (IS_COLOR_ENABLED) do {
    IO.put(moveCursorUpCode(Dictionary.length(collector.getResults()) + 1))
    printSuiteResults(collector.getResults())
  }

  return result
}


runTestSuite :: (Show e, Show f) => String
  -> ({} -> Wish e a)
  -> ({} -> Wish f b)
  -> List (Wish TestResult TestResult)
  -> Wish {} TestReport
runTestSuite = (suitePath, beforeAll, afterAll, testsInSuite) => {
  updateReport = pipe(
    updateSuiteResult(suitePath),
    resultToReport,
    of,
  )
  return pipe(
    (tests) => {
      pipe(
        Dictionary.insert(suitePath, SuiteResult(List.length(tests), 0, 0, 0)),
        collector.setResults,
      )(collector.getResults())

      return tests
    },
    map(Wish.bichain(updateReport, updateReport)),
    Wish.parallel,
    (testsWish) => Monad.andDo(
      testsWish,
      Wish.mapRej(
        (err) => IO.red(`${CHAR_CROSS} suite failed in beforeAll:\n${show(err)}`),
        beforeAll(),
      ),
    ),
    (testsWish) => do {
      result <- testsWish
      _ <- Wish.mapRej(
        (err) => IO.red(`${CHAR_CROSS} suite failed in afterAll:\n${show(err)}`),
        afterAll(),
      )
      return of(result)
    },
    map(
      pipe(
        List.reduce(mergeReports, EMPTY_REPORT),
        where {
          TestReport(msg, total, success, failed, skipped) =>
            (total == 0 || failed > 0)
              ? TestReport(
                `${suitePath}\n${msg}${generateReportSuiteEndMessage(testsInSuite)}`,
                total,
                success,
                failed,
                skipped,
              )
              : TestReport("", total, success, failed, skipped)
        },
      ),
    ),
    Wish.chainRej(
      (err) => {
        failSuite(suitePath)
        total = List.length(testsInSuite)
        return of(
          TestReport(
            `${suitePath}\n${err}\n${generateReportSuiteEndMessage(testsInSuite)}`,
            total,
            0,
            total,
            total,
          ),
        )
      },
    ),
  )(testsInSuite)
}



runAllTestSuites :: (
  Show e,
  Show f
) => List #[String, {} -> Wish e a, {} -> Wish f b, List (Wish TestResult TestResult)] -> {} -> {}
export runAllTestSuites = (testSuites) => pipe(
  map(
    where {
      #[path, beforeAll, afterAll, tests] =>
        runTestSuite(path, beforeAll, afterAll, tests)
    },
  ),
  (suites) => {
    if (IS_COLOR_ENABLED) {
      printSuiteResults(collector.getResults())
    }
    return suites
  },
  Wish.parallel,
  map(List.reduce(mergeReports, EMPTY_REPORT)),
  Wish.fulfill(
    () => ({}),
    (data) => {
      if (!IS_COLOR_ENABLED) {
        printSuiteResults(collector.getResults())
      }
      IO.put(getMessage(data))
      IO.putLine(
        String.join(
          "  ",
          [
            `Test suites:`,
            show(List.length(testSuites)),
            `tests:`,
            show(getTotal(data)),
            `passed:`,
            show(getSuccessCount(data)),
            `failed:`,
            show(getFailureCount(data)),
            `skipped:`,
            show(getSkippedCount(data)),
          ],
        ),
      )
      if (getFailureCount(data) > 0) {
        Process.exit(1)
      }
    },
  ),
)(testSuites)
