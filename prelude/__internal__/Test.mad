// #iftarget js

// import type { IOError } from "IOError"

// import HP from "HitPoint"
// import W from "Wish"
// import IO from "IO"
// import S from "String"
// import Process from "Process"
// import L from "List"
// import F from "Function"
// import File from "File"
// import N from "Number"
// import T from "Tuple"
// import Lcov from "LcovDotInfo"
// import { andDo } from "Monad"
// import Context from "HitPointContext"
// import { Just } from "Maybe"

// #endif

colorString :: String -> String -> String
colorString = (color, v) => color ++ v ++"\x1b[0m"

red = colorString("\x1b[31m")
green = colorString("\x1b[32m")


#iftarget llvm

checkChar :: String
checkChar = "\x2713"

crossChar :: String
crossChar = "\x00d7"

#elseif js

checkChar :: String
checkChar = "\u2713"

crossChar :: String
crossChar = "\u00d7"

#endif

// #iftarget js

// export type AssertionError a
//   = AssertionError(a, a)
//   | Error(a)
//   | ErrorWithMessage(String)
//   | NotImplemented


// addFunctionHit :: String -> String -> Lcov.LcovInfo -> Lcov.LcovInfo
// addFunctionHit = (astPath, name, lcov) => map(
//   (section) => Lcov.getPath(section) == astPath
//     ? map(
//         where {
//           Lcov.FNDA(count, n) =>
//             n == name ? Lcov.FNDA(count + 1, n) : Lcov.FNDA(count, n)

//           x =>
//             x
//         },
//         section.fndas
//       ) |> (updatedFdnas) => ({ ...section, fndas: updatedFdnas })
//     : section,
//   lcov
// )

// addLineHit :: String -> Integer -> Lcov.LcovInfo -> Lcov.LcovInfo
// addLineHit = (astPath, line, lcov) =>
//   map(
//     (section) =>
//         Lcov.getPath(section) == astPath
//           ? map(
//               where {
//                 Lcov.DA(l, count) =>
//                   l == line ? Lcov.DA(l, count + 1) : Lcov.DA(l, count)

//                 x =>
//                   x
//               },
//               section.das
//             ) |> (updatedDas) => ({ ...section, das: updatedDas })
//           : section
//     , lcov
//   )

// updateLh :: Lcov.LcovSection -> Lcov.LcovSection
// updateLh = (section) => (
//   L.reduceRight(
//     (da, total) => where(da) { Lcov.DA(_, count) => count > 0 ? total + 1 : total },
//     0,
//     section.das
//   ) |> (counted) => ({ ...section, lh: Lcov.LH(counted) })
// )

// collectLh :: Lcov.LcovInfo -> Lcov.LcovInfo
// collectLh = (lcov) => map(updateLh, lcov)

// updateFnh :: Lcov.LcovSection -> Lcov.LcovSection
// updateFnh = (section) => (
//   L.reduceRight(
//     (da, total) =>
//       where(da) { Lcov.FNDA(count, _) => count > 0 ? total + 1 : total },
//       0,
//       section.fndas
//   ) |> (counted) => ({ ...section, fnh: Lcov.FNH(counted) })
// )

// collectFnh :: Lcov.LcovInfo -> Lcov.LcovInfo
// collectFnh = (lcov) => map(updateFnh, lcov)

// collect :: List (HP.HitPoint) -> Lcov.LcovInfo -> Lcov.LcovInfo
// collect = (hps, lcov) =>
//   L.reduceLeft(
//     (currLcov) => where {
//       HP.FunctionHit(astPath, name) => addFunctionHit(astPath, name, currLcov)
//       HP.LineHit(astPath, line) => addLineHit(astPath, line, currLcov)
//     },
//     lcov,
//     hps
//   ) |> collectLh |> collectFnh


// buildRow :: String -> Float -> Float -> IO.Row
// buildRow = (name, lines, functions) => {
//   formattedLines = N.formatDecimal(2, lines) ++ "%"
//   formattedFunctions = N.formatDecimal(2, functions) ++ "%"
//   coloredName = lines > 75 ? green(name) : red(name)

//   return {
//     id: coloredName,
//     cols: [#["lines", formattedLines], #["functions", formattedFunctions]]
//   }
// }

// allRow :: Lcov.LcovInfo -> IO.Row
// allRow = (lcov) => pipe(
//   L.reduceRight(
//     (section, total) => where(section) {
//       { lf: Lcov.LF(found), lh: Lcov.LH(hit), fnf: Lcov.FNF(ffound), fnh: Lcov.FNH(fhit) } =>
//         {
//           lf: total.lf + found,
//           lh: total.lh + hit,
//           fnf: total.fnf + ffound,
//           fnh: total.fnh + fhit
//         }
//     },
//     { lf: 0, lh: 0, fnf: 0, fnh: 0 }
//   ),
//   (total) => #[100 * N.integerToFloat(total.lh) / N.integerToFloat(total.lf), 100 * N.integerToFloat(total.fnh) / N.integerToFloat(total.fnf)],
//   (total) => buildRow("All", T.fst(total), T.snd(total))
// )(lcov)

// computePercents :: Integer -> Integer -> Float
// computePercents = (hit, found) => found == 0
//   ? 100
//   : 100 * N.integerToFloat(hit) / N.integerToFloat(found)

// generateTable :: Lcov.LcovInfo -> List IO.Row
// generateTable = (lcov) =>
//   map(
//     where {
//       {
//         sf: Lcov.SF(path),
//         lf: Lcov.LF(found),
//         lh: Lcov.LH(hit),
//         fnf: Lcov.FNF(ffound),
//         fnh: Lcov.FNH(fhit)
//       } =>
//       #[computePercents(hit, found), computePercents(fhit, ffound)]
//           |> (t) => buildRow(path, T.fst(t), T.snd(t))
//     },
//     lcov
//   ) |> (table) => L.concat([allRow(lcov)], table)

// stdoutReport :: Lcov.LcovInfo -> List IO.Row
// stdoutReport = (lcov) => generateTable(lcov)

// collectCoverage :: List HP.HitPoint -> W.Wish IOError (List IO.Row)
// export collectCoverage = (hitPoints) =>
//   File.read(".coverage/lcov.info")
//     |> map(Lcov.parseLcov)
//     |> map(collect(hitPoints))
//     |> chain((lcov) =>
//          of(lcov)
//            |> map(Lcov.stringify)
//            |> chain(File.write(".coverage/lcov.info"))
//            |> andDo(of(stdoutReport(lcov)))
//        )

// formatSuccessOutput = (description, result) => green("\u2713 " ++ description)

// formatFailureOutput :: Inspect a => String -> AssertionError a -> W.Wish String String
// formatFailureOutput = (description, result) => where(result) {
//   AssertionError(expected, actual) =>
//     W.bad(
//       red("\u00d7 " ++ description)
//       ++ "\n  expected:\n    "
//       ++ green(inspect(expected))
//       ++ "\n  actual:\n    "
//       ++ red(inspect(actual))
//     )

//   Error(msg) =>
//     W.bad(
//       red("\u00d7 " ++ description)
//       ++ "\n  error: " ++ inspect(msg)
//     )

//   ErrorWithMessage(msg) =>
//     W.bad(
//       red("\u00d7 " ++ description)
//       ++ "\n  error: " ++ msg
//     )

//   NotImplemented =>
//     W.bad(red("\u00d7 " ++ description) ++ "\n  error: not implemented")
// }

// #-
// const generateId = () => Math.random().toString().substr(2, 10)
// -#

// test :: Inspect a => String -> (String -> W.Wish (AssertionError a) {}) -> {}
// export test = (description, testImpl) => {
//   id = #- generateId() -#
//   #-
  
//   process.send({ reportType: "TEST_START", id })
//   process.env.COVERAGE_MODE = "off"
//   Context.initContext((context) => {
//     context.id = id;
//     context.__HIT_POINTS = null
//     context.__CACHE = {}

//   -#

//   pipe(
//     (run) => run(description),
//     map(formatSuccessOutput(description)),
//     W.chainRej(formatFailureOutput(description)),
//     W.fulfill(reportBad(id), reportGood(id))
//   )(testImpl)

//   #-

//   })
//   -#

//   return {}
// }


// reportBad :: String -> String -> {}
// reportBad = (id, err) => #-{
//   const context = Context.getContext()
//   process.send({
//     reportType: "TEST_FAIL",
//     message: err,
//     id,
//     hitPoints: context.__HIT_POINTS,
//     globalHitPoints: __getGlobalHPs()
//   })
// }-#

// reportGood :: String -> String -> {}
// reportGood = (id, good) => #-{
//   const context = Context.getContext()
//   process.send({
//     reportType: "TEST_SUCCESS",
//     message: good,
//     id,
//     hitPoints: context.__HIT_POINTS,
//     globalHitPoints: __getGlobalHPs()
//   })
// }-#

// assertEquals :: Eq a => a -> a -> W.Wish (AssertionError a) {}
// export assertEquals = (actual, expected) => actual == expected
//   ? of({})
//   : W.bad(AssertionError(expected, actual))

// isCoverageEnabled :: W.Wish {} Boolean
// isCoverageEnabled = pipe(
//   Process.getEnv,
//   where {
//     Just("on") =>
//       of(true)

//     _ =>
//       of(false)
//   }
// )("COVERAGE_MODE")

// displayResults :: #[List String, List IO.Row] -> List IO.Row
// displayResults = (results) => {
//   map(IO.log, T.fst(results))
//   return F.when(
//     F.complement(L.isEmpty),
//     pipe(
//       (x) => {
//         IO.log("\n--------------------------------------------------------------------------------")
//         return x
//       },
//       (x) => {
//         IO.log("\nCOVERAGE REPORT:")
//         return x
//       },
//       IO.table(T.snd(results))
//     )
//   )(T.snd(results))
// }

// #elseif llvm
import Wish from "Wish"
import IO from "IO"
import { always, equals, ifElse } from "Function"
import List from "List"
import Tuple from "Tuple"
import {} from "Number"

export type AssertionError a
  = AssertionError(a, a)
  | Error(a)
  | ErrorWithMessage(String)
  | NotImplemented


// Contains the accumulated String to be displayed, the amount of tests run, the amount of successful tests, and the amount of failed tests
type TestReport = TestReport(String, Integer, Integer, Integer)


EMPTY_REPORT = TestReport("", 0, 0, 0)


updateMessage :: (String -> String) -> TestReport -> TestReport
updateMessage = (f, report) => where(report) {
  TestReport(str, total, successful, failed) =>
    TestReport(f(str), total, successful, failed)
}

getMessage :: TestReport -> String
getMessage = where {
  TestReport(str, _, _, _) =>
    str
}


getTotal :: TestReport -> Integer
getTotal = where {
  TestReport(_, total, _, _) =>
    total
}

getSuccessCount :: TestReport -> Integer
getSuccessCount = where {
  TestReport(_, _, success, _) =>
    success
}

getFailureCount :: TestReport -> Integer
getFailureCount = where {
  TestReport(_, _, _, failed) =>
    failed
}


failureReport :: String -> TestReport
failureReport = (message) =>
  TestReport(message, 1, 0, 1)
  
  
successReport :: String -> TestReport
successReport = (message) =>
  TestReport(message, 1, 1, 0)


mergeReports :: TestReport -> TestReport -> TestReport
mergeReports = (t1, t2) => TestReport(
  getMessage(t1) ++ getMessage(t2),
  getTotal(t1) + getTotal(t2),
  getSuccessCount(t1) + getSuccessCount(t2),
  getFailureCount(t1) + getFailureCount(t2)
)


assertEquals :: Eq a => a -> a -> Wish.Wish (AssertionError a) {}
export assertEquals = (actual, expected) => actual == expected
  ? of({})
  : Wish.bad(AssertionError(expected, actual))


test :: Inspect a => String -> (String -> Wish.Wish (AssertionError a) {}) -> Wish.Wish String String
export test = (description, testImpl) => pipe(
  (run) => run(description),
  map((_) => green(`${checkChar} ${description}\n`)),
  Wish.mapRej(
    where{
      AssertionError(expected, actual) => 
        red(`${crossChar} ${description}`)
        ++ "\n  expected:\n    "
        ++ green(inspect(expected))
        ++ "\n  actual:\n    "
        ++ red(inspect(actual))
        ++ "\n"
    }
  )
)(testImpl)

generateReportSuiteEndMessage :: List (Wish.Wish String String) -> String
generateReportSuiteEndMessage = pipe(
  List.length,
  ifElse(
    equals(0),
    always("No test found\n\n"),
    always("Test suite finished\n\n")
  )
)


runTestSuite :: String -> List (Wish.Wish String String) -> Wish.Wish {} TestReport
runTestSuite = (suitePath, testsInSuite) => pipe(
  map(Wish.bichain(pipe(failureReport, of), pipe(successReport, of))),
  Wish.parallel,
  map(
    pipe(
      List.reduce(mergeReports, EMPTY_REPORT),
      updateMessage((str) => `${suitePath}\n${str}${generateReportSuiteEndMessage(testsInSuite)}`)
    )
  )
)(testsInSuite)


runAllTestSuites :: List #[String, List (Wish.Wish String String)] -> {}
export runAllTestSuites = (testSuites) => pipe(
  map((testSuite) => runTestSuite(Tuple.fst(testSuite), Tuple.snd(testSuite))),
  Wish.parallel,
  map(List.reduce(mergeReports, EMPTY_REPORT)),
  Wish.fulfill(
    (_) => ({}),
    (report) => {
      IO.putLine(getMessage(report))
      return IO.putLine(`Test suites: ${inspect(List.length(testSuites))}  tests: ${inspect(getTotal(report))}  passed: ${inspect(getSuccessCount(report))}  failed: ${inspect(getFailureCount(report))}`)
    }
  )
)(testSuites)

// #endif
