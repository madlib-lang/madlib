import Wish from "Wish"
import IO from "IO"
import { always, equals, ifElse } from "Function"
import List from "List"
import Tuple from "Tuple"
import {} from "Number"


export type AssertionError a
  = AssertionError(a, a)
  | Error(a)
  | ErrorWithMessage(String)
  | NotImplemented


// Contains the accumulated String to be displayed, the amount of tests run, the amount of successful tests, and the amount of failed tests
type TestReport = TestReport(String, Integer, Integer, Integer)


EMPTY_REPORT = TestReport("", 0, 0, 0)


CHAR_CHECK :: String
CHAR_CHECK = "âœ“"


CHAR_CROSS :: String
CHAR_CROSS = "Ã—"


updateMessage :: (String -> String) -> TestReport -> TestReport
updateMessage = (f, report) => where(report) {
  TestReport(str, total, successful, failed) =>
    TestReport(f(str), total, successful, failed)
}


getMessage :: TestReport -> String
getMessage = where {
  TestReport(str, _, _, _) =>
    str
}


getTotal :: TestReport -> Integer
getTotal = where {
  TestReport(_, total, _, _) =>
    total
}


getSuccessCount :: TestReport -> Integer
getSuccessCount = where {
  TestReport(_, _, success, _) =>
    success
}


getFailureCount :: TestReport -> Integer
getFailureCount = where {
  TestReport(_, _, _, failed) =>
    failed
}


failureReport :: String -> TestReport
failureReport = (message) =>
  TestReport(message, 1, 0, 1)


successReport :: String -> TestReport
successReport = (message) =>
  TestReport(message, 1, 1, 0)


mergeReports :: TestReport -> TestReport -> TestReport
mergeReports = (t1, t2) => TestReport(
  getMessage(t1) ++ getMessage(t2),
  getTotal(t1) + getTotal(t2),
  getSuccessCount(t1) + getSuccessCount(t2),
  getFailureCount(t1) + getFailureCount(t2)
)


assertEquals :: Eq a => a -> a -> Wish.Wish (AssertionError a) {}
export assertEquals = (actual, expected) => actual == expected
  ? of({})
  : Wish.bad(AssertionError(expected, actual))


test :: Inspect a => String -> (String -> Wish.Wish (AssertionError a) {}) -> Wish.Wish String String
export test = (description, testImpl) => pipe(
  (run) => run(description),
  map((_) => IO.green(`${CHAR_CHECK} ${description}\n`)),
  Wish.mapRej(
    where{
      AssertionError(expected, actual) => 
        IO.red(`${CHAR_CROSS} ${description}`)
        ++ "\n  expected:\n    "
        ++ IO.green(inspect(expected))
        ++ "\n  actual:\n    "
        ++ IO.red(inspect(actual))
        ++ "\n"
    }
  )
)(testImpl)


generateReportSuiteEndMessage :: List (Wish.Wish String String) -> String
generateReportSuiteEndMessage = pipe(
  List.length,
  ifElse(
    equals(0),
    always("No test found\n\n"),
    always("Test suite finished\n\n")
  )
)


runTestSuite :: String -> List (Wish.Wish String String) -> Wish.Wish {} TestReport
runTestSuite = (suitePath, testsInSuite) => pipe(
  map(Wish.bichain(pipe(failureReport, of), pipe(successReport, of))),
  Wish.parallel,
  map(
    pipe(
      List.reduce(mergeReports, EMPTY_REPORT),
      updateMessage((str) => `${suitePath}\n${str}${generateReportSuiteEndMessage(testsInSuite)}`)
    )
  )
)(testsInSuite)


runAllTestSuites :: List #[String, List (Wish.Wish String String)] -> {}
export runAllTestSuites = (testSuites) => pipe(
  map((testSuite) => runTestSuite(Tuple.fst(testSuite), Tuple.snd(testSuite))),
  Wish.parallel,
  map(List.reduce(mergeReports, EMPTY_REPORT)),
  Wish.fulfill(
    (_) => ({}),
    (report) => {
      IO.putLine(getMessage(report))
      return IO.putLine(`Test suites: ${inspect(List.length(testSuites))}  tests: ${inspect(getTotal(report))}  passed: ${inspect(getSuccessCount(report))}  failed: ${inspect(getFailureCount(report))}`)
    }
  )
)(testSuites)
