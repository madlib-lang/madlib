#iftarget js

import L from "List"
import S from "String"
import N from "Number"
import Maybe from "Maybe"

/**
 * LcovLine type
 * @since v0.0.5
 */
export type LcovLine
  = TN(String)
  | SF(String)
  | FN(Integer, String)
  | FNDA(Integer, String)
  | FNF(Integer)
  | FNH(Integer)
  | DA(Integer, Integer)
  | LF(Integer)
  | LH(Integer)

/**
 * LcovLine type
 * @since v0.0.5
 */
export alias LcovSection = {
  tn :: LcovLine,
  sf :: LcovLine,
  fns :: List LcovLine,
  fndas :: List LcovLine,
  fnf :: LcovLine,
  fnh :: LcovLine,
  das :: List LcovLine,
  lf :: LcovLine,
  lh :: LcovLine
}

export alias LcovInfo = List LcovSection

getPath :: LcovSection -> String
export getPath = (section) => where(section.sf) { SF(p) => p }

emptySection :: LcovSection
emptySection = {
  tn: TN(""),
  sf: SF(""),
  fns: [],
  fndas: [],
  fnf: FNF(0),
  fnh: FNH(0),
  das: [],
  lf: LF(0),
  lh: LH(0)
}

parseNumberString :: (Integer -> String -> LcovLine) -> String -> LcovLine
parseNumberString = (ctor, args) => where(S.split(",", args)) {
  [line, name] => ctor(Maybe.fromMaybe(0, N.fromString(line)), name)
}

parseNumberNumber :: (Integer -> Integer -> LcovLine) -> String -> LcovLine
parseNumberNumber = (ctor, args) => where(S.split(",", args)) {
  [line, count] =>
    ctor(
      Maybe.fromMaybe(0, N.fromString(line)),
      Maybe.fromMaybe(0, N.fromString(count))
    )
}

parseLcovSection :: String -> LcovSection
parseLcovSection = (content) =>
  S.lines(content)
    |> L.reject((s) => (s == ""))
    |> L.reduceR(
      (section, line) =>
        S.split(":", line)
          |> (namedLine) => where(namedLine) {
              ["TN", arg] => { ...section, tn: TN(arg) }

              ["SF", arg] => { ...section, sf: SF(arg) }

              ["FN", args] => { ...section, fns: L.append(parseNumberString(FN, args), section.fns) }

              ["FNDA", args] => { ...section, fndas: L.append(parseNumberString(FNDA, args), section.fndas) }

              ["FNF", arg] => { ...section, fnf: FNF(Maybe.fromMaybe(0, N.fromString(arg))) }

              ["FNH", arg] => { ...section, fnh: FNH(Maybe.fromMaybe(0, N.fromString(arg))) }

              ["DA", args] => { ...section, das: L.append(parseNumberNumber(DA, args), section.das) }

              ["LF", arg] => { ...section, lf: LF(Maybe.fromMaybe(0, N.fromString(arg))) }

              ["LH", arg] => { ...section, lh: LH(Maybe.fromMaybe(0, N.fromString(arg))) }
            }
      , emptySection
      )

parseLcov :: String -> LcovInfo
export parseLcov = (content) =>
  S.split("end_of_record", content)
    |> L.reject((s) => (s == ""))
    |> map(parseLcovSection)

stringifyLine :: LcovLine -> String
stringifyLine = where {
  TN(arg) => "TN:" ++ arg ++ "\n"
  SF(arg) => "SF:" ++ arg ++ "\n"
  FN(l, name) => "FN:" ++ show(l) ++ "," ++ name ++ "\n"
  FNDA(count, name) => "FNDA:" ++ show(count) ++ "," ++ name ++ "\n"
  FNF(count) => "FNF:" ++ show(count) ++ "\n"
  FNH(count) => "FNH:" ++ show(count) ++ "\n"
  DA(l, count) => "DA:" ++ show(l) ++ "," ++ show(count) ++ "\n"
  LF(count) => "LF:" ++ show(count) ++ "\n"
  LH(count) => "LH:" ++ show(count) ++ "\n"
}

stringifySection :: LcovSection -> String
stringifySection = (section) =>
  stringifyLine(section.tn)
  ++ stringifyLine(section.sf)
  ++ L.reduceR((fns, line) => fns ++ stringifyLine(line), "", section.fns)
  ++ L.reduceR((fndas, line) => fndas ++ stringifyLine(line), "", section.fndas)
  ++ stringifyLine(section.fnf)
  ++ stringifyLine(section.fnh)
  ++ L.reduceR((das, line) => das ++ stringifyLine(line), "", section.das)
  ++ stringifyLine(section.lf)
  ++ stringifyLine(section.lh)
  ++ "end_of_record\n"

stringify :: LcovInfo -> String
export stringify = (lcov) => L.reduceL((r, section) => r ++ stringifySection(section), "", lcov)

#endif
