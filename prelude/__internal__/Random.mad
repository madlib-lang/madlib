import type { Maybe } from "Maybe"
import type { Seed } from "LCG"
import LCG from "LCG"



export type Seed

alias Random = { get :: {} -> Seed, update :: {} -> {} }

/**
 * Create a Random instance from an LCG.Seed
 * @since 0.23.0
 * @example
 * gen = generateFromSeed(LCG.mkSeed(100))
 */
generateFromSeed :: Seed -> Random
export generateFromSeed = (initialSeed) => {
  seed = initialSeed
  get = () => seed
  // every function needs to call reseed or the resulting
  // values won't change between calls!
  update = () => {
    seed = LCG.next(get())
  }
  return { get, update }
}

/**
 * Create a Random instance from a number
 * @since 0.23.0
 * @example
 * generateFromSeed(LCG.mkSeed(100)) == generate(100)
 */
generate :: Integer -> Random
export generate = pipe(
  LCG.mkSeed,
  generateFromSeed,
)

/**
 * Create a Random instance from a string
 * @since 0.23.0
 * @example
 * generateFromSeed(LCG.mkSeedFromString("cool")) == generateFromString("cool")
 */
generateFromString :: String -> Random
export generateFromString = pipe(
  LCG.mkSeedFromString,
  generateFromSeed,
)

/**
 * Create a float from an generator instance
 * @since 0.23.0
 * @example
 * gen = generate(100)
 * float(gen)
 */
float :: Random -> Float
export float = (r) => {
  x = LCG.seedToFloat(r.get())
  r.update()
  return x
}

/**
 * Create an integer from an generator instance
 * @since 0.23.0
 * @example
 * gen = generate(100)
 * integer(1, 100, gen)
 */
integer :: Integer -> Integer -> Random -> Integer
export integer = (low, high, r) => {
  x = LCG.seedToInteger(low, high, r.get())
  r.update()
  return x
}

/**
 * Pick a number from a list given an generator instance
 * @since 0.23.0
 * @example
 * gen = generate(100)
 * pick([1,2,3,4,5], gen)
 */
pick :: List a -> Random -> Maybe a
export pick = (xs, r) => {
  x = LCG.pickFrom(xs, r.get())
  r.update()
  return x
}

/**
 * Shuffle a list given a generator instance
 * @since 0.23.0
 * @example
 * gen = generate(100)
 * shuffle([1,2,3,4,5], gen)
 */
shuffle :: List a -> Random -> List a
export shuffle = (xs, r) => {
  x = LCG.shuffle(xs, r.get())
  r.update()
  return x
}

/**
 * Create a boolean from a generator instance
 * @since 0.23.0
 * @example
 * gen = generate(100)
 * boolean(gen)
 */
boolean :: Random -> Boolean
export boolean = (r) => {
  x = LCG.seedToBoolean(r.get())
  r.update()
  return x
}
