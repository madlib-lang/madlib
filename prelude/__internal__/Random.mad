import type { Maybe } from "Maybe"

import type { Seed } from "./LCG"

import LCG from "./LCG"



export type Seed

alias Random = { get :: {} -> Seed, update :: {} -> {} }

generateFromSeed :: Seed -> Random
export generateFromSeed = (initialSeed) => {
  seed = initialSeed
  get = () => seed
  // every function needs to call reseed or the resulting
  // values won't change between calls!
  update = () => {
    seed = LCG.next(get())
  }
  return { get, update }
}

generate :: Integer -> Random
export generate = pipe(
  LCG.mkSeed,
  generateFromSeed,
)

generateFromString :: String -> Random
export generateFromString = pipe(
  LCG.mkSeedFromString,
  generateFromSeed,
)

float :: Random -> Float
export float = (r) => {
  x = LCG.seedToFloat(r.get())
  r.update()
  return x
}

integer :: Integer -> Integer -> Random -> Integer
export integer = (low, high, r) => {
  x = LCG.seedToInteger(low, high, r.get())
  r.update()
  return x
}

pick :: List a -> Random -> Maybe a
export pick = (xs, r) => {
  x = LCG.pickFrom(xs, r.get())
  r.update()
  return x
}

shuffle :: List a -> Random -> List a
export shuffle = (xs, r) => {
  x = LCG.shuffle(xs, r.get())
  r.update()
  return x
}

boolean :: Random -> Boolean
export boolean = (r) => {
  x = LCG.seedToBoolean(r.get())
  r.update()
  return x
}
