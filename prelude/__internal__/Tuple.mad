import {} from "Show"

instance (Show a, Show b) => Show #[a, b] {
  show = where { #[a, b] => "#[" ++ show(a) ++ ", " ++ show(b) ++ "]" }
}

instance (Show a, Show b, Show c) => Show #[a, b, c] {
  show = where {
    #[a, b, c] => "#[" ++ show(a) ++ ", " ++ show(b) ++ ", " ++ show(c) ++ "]"
  }
}

instance (Show a, Show b, Show c, Show d) => Show #[a, b, c, d] {
  show = where {
    #[a, b, c, d] =>
      "#[" ++ show(a) ++ ", " ++ show(b) ++ ", " ++ show(c) ++ ", " ++ show(d) ++ "]"
  }
}


fst :: #[a, b] -> a
export fst = (tuple) => where(tuple) { #[a, _] => a }

snd :: #[a, b] -> b
export snd = (tuple) => where(tuple) { #[_, b] => b }
