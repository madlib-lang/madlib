import type { Wish } from "Wish"
import type { Error } from "__IOError__"

import { Wish } from "Wish"
import Error from "__IOError__"
import {
  AddressAlreadyInUse,
  ArgumentListToLong,
  PermissionDenied,
  UnknownError,
} from "__IOError__"



export type Error
export AddressAlreadyInUse
export ArgumentListToLong
export PermissionDenied
export UnknownError

#iftarget js

#-
{Node}
import prelude_file_fs from "fs"
{/Node}
-#


/**
 * Writes a text file. The first argument is the path to the file
 * and the second argument is the text to write to it. It returns
 * a Wish and the result is discarded, meaning that it contains Unit.
 *
 * @since 0.11.0
 * @example
 * fulfill(() => {}, () => {}, write("./test.txt", "some content"))
 */
write :: String -> String -> Wish Error {}
export write = (path, content) => Wish(
  (bad, good) => #- {
    const abortController = new AbortController()
    prelude_file_fs.writeFile(path, content, { signal: abortController.signal }, (err) => {
      if (err) {
        if (err.name !== "AbortError") {
          bad({ __constructor: "UnknownError", __args: [] })
        }
      }
      else {
        good(path)
      }
    })

    return () => {
      abortController.abort()
    }
  } -#,
)


/**
 * Writes a binary file. The first argument is the path to the file
 * and the second argument is the bytes to write to it. It returns
 * a Wish and the result is discarded, meaning that it contains Unit.
 *
 * @since 0.11.0
 * @example
 * fulfill(() => {}, () => {}, write("./test.txt", ByteArray.fromString("some content")))
 */
writeBytes :: String -> ByteArray -> Wish Error {}
export writeBytes = (path, bytes) => Wish(
  (bad, good) => #- {
    const abortController = new AbortController()
    prelude_file_fs.writeFile(path, bytes, { signal: abortController.signal }, (err) => {
      if (err) {
        if (err.name !== "AbortError") {
          bad({ __constructor: "UnknownError", __args: [] });
        }
      }
      else {
        good(null)
      }
    })

    return () => {
      abortController.abort()
    }
  } -#,
)


/**
 * Reads a text file.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.putLine, read("./test.txt"))
 */
read :: String -> Wish Error String
export read = (path) => Wish(
  (bad, good) => #- {
    const abortController = new AbortController()
    prelude_file_fs.readFile(path, { signal: abortController.signal, encoding: "utf8" }, (err, d) => {
      if (err) {
        if (err.name !== "AbortError") {
          bad({ __constructor: "UnknownError", __args: [] })
        }
      }
      else {
        good(d)
      }
    })

    return () => {
      abortController.abort()
    }
  } -#,
)


/**
 * Reads a binary file.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, read("./test.bin"))
 */
readBytes :: String -> Wish Error ByteArray
export readBytes = (path) => Wish(
  (bad, good) => #- {
    const abortController = new AbortController()
    prelude_file_fs.readFile(path, { signal: abortController.signal }, (err, d) => {
      if (err) {
        if (err.name !== "AbortError") {
          bad({ __constructor: "UnknownError", __args: [] })
        }
      }
      else {
        good(d)
      }
    })

    return () => {
      abortController.abort()
    }
  } -#,
)


/**
 * Checks whether a file exists or not. If the file does not exist
 * the Wish is rejected.
 *
 * @since 0.11.0
 * @example
 * fulfill(always(IO.putLine("does not exist")), always(IO.putLine("exists")), exists("/"))
 */
exists :: String -> Wish {} Boolean
export exists = (path) => Wish(
  (bad, good) => #- {
    prelude_file_fs.access(path, prelude_file_fs.constants.F_OK, (err) => {
      if (err) {
        bad(null);
      } else {
        good(true);
      }
    });

    // TODO: handle cancellation function correctly
    return () => {}
  } -#,
)

#elseif llvm

type OperationId = OperationId(OperationId)


cancelRead :: OperationId -> {}
cancelRead = extern "madlib__file__cancelRead"

cancelWrite :: OperationId -> {}
cancelWrite = extern "madlib__file__cancelWrite"


readFFI :: String -> (Integer -> String -> {}) -> OperationId
readFFI = extern "madlib__file__read"


/**
 * Reads a text file.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.putLine, read("./test.txt"))
 */
read :: String -> Wish Error String
export read = (path) => Wish(
  (bad, good) => {
    done = false
    id = readFFI(
      path,
      (libuvError, fileContent) => do {
        done := true
        libuvError != 0 ? bad(Error.fromLibuvError(libuvError)) : good(fileContent)
      },
    )

    return () => {
      if (!done) { cancelRead(id) }
    }
  },
)

readBytesFFI :: String -> (Integer -> ByteArray -> {}) -> OperationId
readBytesFFI = extern "madlib__file__readBytes"


/**
 * Reads a binary file.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, read("./test.bin"))
 */
readBytes :: String -> Wish Error ByteArray
export readBytes = (path) => Wish(
  (bad, good) => {
    done = false
    id = readBytesFFI(
      path,
      (libuvError, fileContent) => {
        done := true
        libuvError != 0 ? bad(Error.fromLibuvError(libuvError)) : good(fileContent)
      },
    )

    return () => {
      if (!done) { cancelRead(id) }
    }
  },
)


writeFFI :: String -> String -> (Integer -> {} -> {}) -> OperationId
writeFFI = extern "madlib__file__write"


/**
 * Writes a text file. The first argument is the path to the file
 * and the second argument is the text to write to it. It returns
 * a Wish and the result is discarded, meaning that it contains Unit.
 *
 * @since 0.11.0
 * @example
 * fulfill(() => {}, () => {}, write("./test.txt", "some content"))
 */
write :: String -> String -> Wish Error {}
export write = (path, content) => Wish(
  (bad, good) => {
    done = false
    id = writeFFI(
      path,
      content,
      (libuvError, _) => {
        done := true
        libuvError != 0 ? bad(Error.fromLibuvError(libuvError)) : good({})
      },
    )

    return () => {
      if (!done) { cancelWrite(id) }
    }
  },
)


writeBytesFFI :: String -> ByteArray -> (Integer -> {} -> {}) -> OperationId
writeBytesFFI = extern "madlib__file__writeBytes"


/**
 * Writes a binary file. The first argument is the path to the file
 * and the second argument is the bytes to write to it. It returns
 * a Wish and the result is discarded, meaning that it contains Unit.
 *
 * @since 0.11.0
 * @example
 * fulfill(() => {}, () => {}, write("./test.txt", ByteArray.fromString("some content")))
 */
writeBytes :: String -> ByteArray -> Wish Error {}
export writeBytes = (path, content) => Wish(
  (bad, good) => {
    done = false
    id = writeBytesFFI(
      path,
      content,
      (libuvError, _) => {
        done := true
        libuvError != 0 ? bad(Error.fromLibuvError(libuvError)) : good({})
      },
    )

    return () => {
      if (!done) { cancelWrite(id) }
    }
  },
)

existsFFI :: String -> (Boolean -> {}) -> {}
existsFFI = extern "madlib__file__exists"


/**
 * Checks whether a file exists or not. If the file does not exist
 * the Wish is rejected.
 *
 * @since 0.11.0
 * @example
 * fulfill(always(IO.putLine("does not exist")), always(IO.putLine("exists")), exists("/"))
 */
exists :: String -> Wish {} Boolean
export exists = (path) => Wish(
  (bad, good) => {
    existsFFI(path, (g) => g ? good(true) : bad({}))

    // TODO: handle cancellation function correctly
    return () => {}
  },
)

#endif
