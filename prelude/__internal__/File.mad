import type { IOError } from "IOError"
import type { Wish } from "Wish"

import IOError from "IOError"
import { Wish } from "Wish"



#iftarget js

#-
{Node}
import prelude_file_fs from "fs"
{/Node}
-#


/**
 * Writes a text file. The first argument is the path to the file
 * and the second argument is the text to write to it. It returns
 * a Wish and the result is discarded, meaning that it contains Unit.
 *
 * @since 0.11.0
 * @example
 * fulfill(() => {}, () => {}, write("./test.txt", "some content"))
 */
write :: String -> String -> Wish IOError {}
export write = (path, content) => Wish(
  (bad, good) => #- {
    prelude_file_fs.writeFile(path, content, (err) => {
      if (err) {
        bad({ __constructor: "UnknownError", __args: [] });
      }
      else {
        good(path)
      }
    })
  } -#
)


/**
 * Writes a binary file. The first argument is the path to the file
 * and the second argument is the bytes to write to it. It returns
 * a Wish and the result is discarded, meaning that it contains Unit.
 *
 * @since 0.11.0
 * @example
 * fulfill(() => {}, () => {}, write("./test.txt", ByteArray.fromString("some content")))
 */
writeBytes :: String -> ByteArray -> Wish IOError {}
export writeBytes = (path, bytes) => Wish(
  (bad, good) => #- {
    prelude_file_fs.writeFile(path, bytes, (err) => {
      if (err) {
        bad({ __constructor: "UnknownError", __args: [] });
      }
      else {
        good(null)
      }
    })
  } -#
)


/**
 * Reads a text file.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.putLine, read("./test.txt"))
 */
read :: String -> Wish IOError String
export read = (path) => Wish(
  (bad, good) => #- {
    prelude_file_fs.readFile(path, "utf8", (err, d) => {
      if (err) {
        bad(IOError.UnknownError);
      }
      else {
        good(d)
      }
    })
  } -#
)


/**
 * Reads a binary file.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, read("./test.bin"))
 */
readBytes :: String -> Wish IOError ByteArray
export readBytes = (path) => Wish(
  (bad, good) => #- {
    prelude_file_fs.readFile(path, (err, d) => {
      if (err) {
        bad({ __constructor: "UnknownError", __args: [] });
      }
      else {
        good(d)
      }
    })
  } -#
)


/**
 * Checks whether a file exists or not. If the file does not exist
 * the Wish is rejected.
 *
 * @since 0.11.0
 * @example
 * fulfill(always(IO.putLine("does not exist")), always(IO.putLine("exists")), exists("/"))
 */
exists :: String -> Wish {} Boolean
export exists = (path) => Wish(
  (bad, good) => #- {
    prelude_file_fs.access(path, prelude_file_fs.constants.F_OK, (err) => {
      if (err) {
        bad(null);
      } else {
        good(true);
      }
    });
  } -#
)

#elseif llvm

readFFI :: String -> (Integer -> String -> {}) -> {}
readFFI = extern "madlib__file__read"


/**
 * Reads a text file.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.putLine, read("./test.txt"))
 */
read :: String -> Wish IOError String
export read = (path) => Wish(
  (bad, good) => readFFI(
    path,
    (libuvError, fileContent) => libuvError != 0
      ? bad(IOError.fromLibuvError(libuvError))
      : good(fileContent)
  )
)

readBytesFFI :: String -> (Integer -> ByteArray -> {}) -> {}
readBytesFFI = extern "madlib__file__readBytes"


/**
 * Reads a binary file.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, read("./test.bin"))
 */
readBytes :: String -> Wish IOError ByteArray
export readBytes = (path) => Wish(
  (bad, good) => readBytesFFI(
    path,
    (libuvError, fileContent) => libuvError != 0
      ? bad(IOError.fromLibuvError(libuvError))
      : good(fileContent)
  )
)


writeFFI :: String -> String -> (Integer -> {} -> {}) -> {}
writeFFI = extern "madlib__file__write"


/**
 * Writes a text file. The first argument is the path to the file
 * and the second argument is the text to write to it. It returns
 * a Wish and the result is discarded, meaning that it contains Unit.
 *
 * @since 0.11.0
 * @example
 * fulfill(() => {}, () => {}, write("./test.txt", "some content"))
 */
write :: String -> String -> Wish IOError {}
export write = (path, content) => Wish(
  (bad, good) => writeFFI(
    path,
    content,
    (libuvError, _) => libuvError != 0 ? bad(IOError.fromLibuvError(libuvError)) : good({})
  )
)


writeBytesFFI :: String -> ByteArray -> (Integer -> {} -> {}) -> {}
writeBytesFFI = extern "madlib__file__writeBytes"


/**
 * Writes a binary file. The first argument is the path to the file
 * and the second argument is the bytes to write to it. It returns
 * a Wish and the result is discarded, meaning that it contains Unit.
 *
 * @since 0.11.0
 * @example
 * fulfill(() => {}, () => {}, write("./test.txt", ByteArray.fromString("some content")))
 */
writeBytes :: String -> ByteArray -> Wish IOError {}
export writeBytes = (path, content) => Wish(
  (bad, good) => writeBytesFFI(
    path,
    content,
    (libuvError, _) => libuvError != 0 ? bad(IOError.fromLibuvError(libuvError)) : good({})
  )
)

existsFFI :: String -> (Boolean -> {}) -> {}
existsFFI = extern "madlib__file__exists"


/**
 * Checks whether a file exists or not. If the file does not exist
 * the Wish is rejected.
 *
 * @since 0.11.0
 * @example
 * fulfill(always(IO.putLine("does not exist")), always(IO.putLine("exists")), exists("/"))
 */
exists :: String -> Wish {} Boolean
export exists = (path) => Wish((bad, good) =>
  existsFFI(path, (g) => g ? good(true) : bad({}))
)

#endif
