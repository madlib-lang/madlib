// ------------ List --------------------------------------

reduceLeft :: (a -> b -> a) -> a -> List b -> a
export reduceLeft = (f, acc, list) => where(list) {
  [a, ...xs] =>
    reduceLeft(f, f(acc, a), xs)

  [] =>
    acc
}


// ------------ Dictionary --------------------------------

export type NodeColor
  = DictRBBlack
  | DictRBRed

export type Dictionary k v
  = DictRBEmpty
  | DictRBNode(NodeColor, k, v, Dictionary k v, Dictionary k v)


dictFromList :: Comparable k => List #[k, v] -> Dictionary k v
export dictFromList = (items) =>
  reduceLeft(
    (dict, item) => where(item) {
      #[k, v] =>
        dictInsert(k, v, dict)
    },
    DictRBEmpty,
    items,
  )


dictReduceRight :: (k -> v -> a -> a) -> a -> Dictionary k v -> a
export dictReduceRight = (f, acc, dict) => where(dict) {
  DictRBEmpty =>
    acc

  DictRBNode(_, k, v, left, right) =>
    dictReduceRight(f, f(k, v, dictReduceRight(f, acc, right)), left)
}


dictToList :: Dictionary k v -> List #[k, v]
export dictToList = (dict) => dictReduceRight((k, v, list) => [#[k, v], ...list], [], dict)


dictInsert :: Comparable k => k -> v -> Dictionary k v -> Dictionary k v
export dictInsert = (key, value, dict) => where(insertHelp(key, value, dict)) {
  DictRBNode(DictRBRed, k, v, left, right) =>
    DictRBNode(DictRBBlack, k, v, left, right)

  or =>
    or
}


insertHelp :: Comparable k => k -> v -> Dictionary k v -> Dictionary k v
insertHelp = (key, value, dict) => where(dict) {
  DictRBEmpty =>
    DictRBNode(DictRBRed, key, value, DictRBEmpty, DictRBEmpty)

  DictRBNode(nColor, nKey, nValue, nLeft, nRight) =>
    where(compare(key, nKey)) {
      LT =>
        balanceDict(nColor, nKey, nValue, insertHelp(key, value, nLeft), nRight)

      EQ =>
        DictRBNode(nColor, nKey, value, nLeft, nRight)

      GT =>
        balanceDict(nColor, nKey, nValue, nLeft, insertHelp(key, value, nRight))
    }
}


balanceDict :: NodeColor -> k -> v -> Dictionary k v -> Dictionary k v -> Dictionary k v
export balanceDict = (color, k, v, left, right) => where(right) {
  DictRBNode(DictRBRed, rK, rV, rLeft, rRight) =>
    where(left) {
      DictRBNode(DictRBRed, lK, lV, lLeft, lRight) =>
        DictRBNode(DictRBRed, k, v, DictRBNode(DictRBBlack, lK, lV, lLeft, lRight), DictRBNode(DictRBBlack, rK, rV, rLeft, rRight))

      _ =>
        DictRBNode(color, rK, rV, DictRBNode(DictRBRed, k, v, left, rLeft), rRight)
    }

  _ =>
    where(left) {
      DictRBNode(DictRBRed, lK, lV, DictRBNode(DictRBRed, llK, llV, llLeft, llRight), lRight) =>
        DictRBNode(DictRBRed, lK, lV, DictRBNode(DictRBBlack, llK, llV, llLeft, llRight), DictRBNode(DictRBBlack, k, v, lRight, right))

      _ =>
        DictRBNode(color, k, v, left, right)
    }
}


// ------------ Eq ----------------------------------------

#iftarget llvm

arrayToList :: Array a -> List a
arrayToList = extern "madlib__array__toList"

instance Eq a => Eq (Array a) {
  __EQ__ = (a, b) => arrayToList(a) == arrayToList(b)
}

eqByteArray :: ByteArray -> ByteArray -> Boolean
eqByteArray = extern "madlib__bytearray__internal__eq"

instance Eq ByteArray {
  __EQ__ = eqByteArray
}

listLength :: List a -> Integer
listLength = extern "madlib__list__length"

// TODO: should we compare by reference here?
instance Eq (a -> b) {
  __EQ__ = (_, _) => false
}

instance Eq a => Eq (List a) {
  __EQ__ = (a, b) => {
    go = (listA, listB) => where(listA) {
      [] =>
        true

      [valueA, ...xsa] =>
        where (listB) {
          [] =>
            false

          [valueB, ...xsb] =>
            valueA == valueB
              ? go(xsa, xsb)
              : false
        }
    }

    lengthA = listLength(a)
    lengthB = listLength(b)

    return if (lengthA != lengthB) {
      false
    } else {
      go(a, b)
    }
  }
}

instance (Eq a, Eq b) => Eq (Dictionary a b) {
  __EQ__ = (a, b) => dictToList(a) == dictToList(b)
}

instance (Eq a, Eq b) => Eq #[a, b] {
  __EQ__ = (a, b) => where(#[a, b]) {
    #[#[a1, a2], #[b1, b2]] =>
      a1 == b1 && a2 == b2
  }
}

instance (Eq a, Eq b, Eq c) => Eq #[a, b, c] {
  __EQ__ = (a, b) => where(#[a, b]) {
    #[#[a1, a2, a3], #[b1, b2, b3]] =>
      a1 == b1 && a2 == b2 && a3 == b3
  }
}

instance (Eq a, Eq b, Eq c, Eq d) => Eq #[a, b, c, d] {
  __EQ__ = (a, b) => where(#[a, b]) {
    #[#[a1, a2, a3, a4], #[b1, b2, b3, b4]] =>
      a1 == b1 && a2 == b2 && a3 == b3 && a4 == b4
  }
}

instance (Eq a, Eq b, Eq c, Eq d, Eq e) => Eq #[a, b, c, d, e] {
  __EQ__ = (a, b) => where(#[a, b]) {
    #[#[a1, a2, a3, a4, a5], #[b1, b2, b3, b4, b5]] =>
      a1 == b1 && a2 == b2 && a3 == b3 && a4 == b4 && a5 == b5
  }
}

instance (Eq a, Eq b, Eq c, Eq d, Eq e, Eq f) => Eq #[a, b, c, d, e, f] {
  __EQ__ = (a, b) => where(#[a, b]) {
    #[#[a1, a2, a3, a4, a5, a6], #[b1, b2, b3, b4, b5, b6]] =>
      a1 == b1 && a2 == b2 && a3 == b3 && a4 == b4 && a5 == b5 && a6 == b6
  }
}

instance (Eq a, Eq b, Eq c, Eq d, Eq e, Eq f, Eq g) => Eq #[a, b, c, d, e, f, g] {
  __EQ__ = (a, b) => where(#[a, b]) {
    #[#[a1, a2, a3, a4, a5, a6, a7], #[b1, b2, b3, b4, b5, b6, b7]] =>
      a1 == b1
      && a2 == b2
      && a3 == b3
      && a4 == b4
      && a5 == b5
      && a6 == b6
      && a7 == b7
  }
}

instance (Eq a, Eq b, Eq c, Eq d, Eq e, Eq f, Eq g, Eq h) => Eq #[a, b, c, d, e, f, g, h] {
  __EQ__ = (a, b) => where(#[a, b]) {
    #[#[a1, a2, a3, a4, a5, a6, a7, a8], #[b1, b2, b3, b4, b5, b6, b7, b8]] =>
      a1 == b1
      && a2 == b2
      && a3 == b3
      && a4 == b4
      && a5 == b5
      && a6 == b6
      && a7 == b7
      && a8 == b8
  }
}

instance (Eq a, Eq b, Eq c, Eq d, Eq e, Eq f, Eq g, Eq h, Eq i) => Eq #[a, b, c, d, e, f, g, h, i] {
  __EQ__ = (a, b) => where(#[a, b]) {
    #[
      #[a1, a2, a3, a4, a5, a6, a7, a8, a9],
      #[b1, b2, b3, b4, b5, b6, b7, b8, b9]
    ] =>
      a1 == b1
      && a2 == b2
      && a3 == b3
      && a4 == b4
      && a5 == b5
      && a6 == b6
      && a7 == b7
      && a8 == b8
      && a9 == b9
  }
}

instance (Eq a, Eq b, Eq c, Eq d, Eq e, Eq f, Eq g, Eq h, Eq i, Eq j) => Eq #[a, b, c, d, e, f, g, h, i, j] {
  __EQ__ = (a, b) => where(#[a, b]) {
    #[
      #[a1, a2, a3, a4, a5, a6, a7, a8, a9, a10],
      #[b1, b2, b3, b4, b5, b6, b7, b8, b9, b10]
    ] =>
      a1 == b1
      && a2 == b2
      && a3 == b3
      && a4 == b4
      && a5 == b5
      && a6 == b6
      && a7 == b7
      && a8 == b8
      && a9 == b9
      && a10 == b10
  }
}

#endif

#iftarget js

#-
const escapeChar = (c) => {
  if (c === '\\') {
    return `\\\\`
  } else if (c === '"') {
    return `\\"`
  } else if (c === '\n') {
    return `\\n`
  } else if (c === '\t') {
    return `\\t`
  } else if (c === '\r') {
    return `\\r`
  } else {
    return c
  }
}
-#


// ------------ Show --------------------------------------

instance Show Byte {
  show = (n) => #- {
    n = n % 256
    return ('0' + (n < 0 ? 256 + n : n).toString(16)).slice(-2).toUpperCase()
  } -#
}


// TODO: handle the case of very big numbers that are currently displayed like this:
// 2.0120391209380983e+28
instance Show Integer {
  show = (n) => #- "" + n -#
}

instance Show Short {
  show = (n) => #- "" + n -#
}

instance Show Float {
  show = (n) => #- "" + n -#
}

instance Show Char {
  show = (c) => #- {
    if (c === '\\') {
      return `'\\\\'`;
    } else if (c === '\'') {
      return `'\\''`;
    } else if (c === '\n') {
      return `'\\n'`;
    } else if (c === '\t') {
      return `'\\t'`;
    } else if (c === '\r') {
      return `'\\r'`;
    } else {
      return `'${c}'`;
    }
  } -#
}

instance Show String {
  show = (s) => #- `"${s.split('').map(escapeChar).join('')}"` -#
}

#elseif llvm

showByte :: Byte -> String
showByte = extern "madlib__number__internal__showByte"

showInteger :: Integer -> String
showInteger = extern "madlib__number__internal__showInteger"

showFloat :: Float -> String
showFloat = extern "madlib__number__internal__showFloat"

showChar :: Char -> String
showChar = extern "madlib__char__internal__show"

showShort :: Short -> String
showShort = extern "madlib__number__internal__showShort"

showString :: String -> String
showString = extern "madlib__string__internal__show"

instance Show Byte {
  show = showByte
}

instance Show Short {
  show = showShort
}

instance Show Integer {
  show = showInteger
}

instance Show Float {
  show = showFloat
}

instance Show Char {
  show = showChar
}

instance Show String {
  show = showString
}

#endif

instance Show {} {
  show = () => "{}"
}

instance Show Boolean {
  show = (b) => b
    ? "true"
    : "false"
}

instance Show (a -> b) {
  show = () => "[Function]"
}

instance Show a => Show (List a) {
  show = (list) => {
    showItems = (_list, acc) => where(_list) {
      [] =>
        acc

      [last] =>
        acc == ""
          ? show(last)
          : `${acc}, ${show(last)}`

      [item, ...next] =>
        acc == ""
          ? showItems(next, show(item))
          : showItems(next, `${acc}, ${show(item)}`)
    }

    return `[${showItems(list, "")}]`
  }
}


instance (Show a, Show b) => Show (Dictionary a b) {
  show = (dict) => {
    showItems = (items, acc) => where(items) {
      [] =>
        ""

      [#[key, value]] =>
        acc == ""
          ? `${show(key)}: ${show(value)}`
          : `${acc}, ${show(key)}: ${show(value)}`

      [#[key, value], ...next] =>
        acc == ""
          ? showItems(next, `${show(key)}: ${show(value)}`)
          : showItems(next, `${acc}, ${show(key)}: ${show(value)}`)
    }

    renderedItems = pipe(
      dictToList,
      showItems($, ""),
    )(dict)

    return `{{ ${renderedItems} }}`
  }
}

#iftarget js

instance Show ByteArray {
  show = (byteArray) => #- {
    let s = ''
    let h = '0123456789ABCDEF'
    byteArray.forEach((v, index) => {
      if ((index + 1) % 9 === 0) { s += ' ' }
      s += h[v >> 4] + h[v & 15]
    })
    return `ByteArray(${s})`
  } -#
}

#elseif llvm

showByteArray :: ByteArray -> String
showByteArray = extern "madlib__bytearray__internal__show"

instance Show ByteArray {
  show = showByteArray
}

#endif

#iftarget js

arrayToList :: Array a -> List a
export arrayToList = (array) => #- {
  let list = {}
  let start = list

  array.forEach(item => {
    list = list.n = { v: item, n: null }
  })

  return start.n
} -#

instance Show a => Show (Array a) {
  show = (array) => `Array(${show(arrayToList(array))})`
}

#elseif llvm

instance Show a => Show (Array a) {
  show = (array) => `Array(${show(arrayToList(array))})`
}

#endif

instance (Show a, Show b) => Show #[a, b] {
  show = (tuple) => where(tuple) {
    #[a, b] =>
      `#[${show(a)}, ${show(b)}]`
  }
}

instance (Show a, Show b, Show c) => Show #[a, b, c] {
  show = (tuple) => where(tuple) {
    #[a, b, c] =>
      `#[${show(a)}, ${show(b)}, ${show(c)}]`
  }
}

instance (Show a, Show b, Show c, Show d) => Show #[a, b, c, d] {
  show = (tuple) => where(tuple) {
    #[a, b, c, d] =>
      `#[${show(a)}, ${show(b)}, ${show(c)}, ${show(d)}]`
  }
}

instance (
  Show a,
  Show b,
  Show c,
  Show d,
  Show e
) => Show #[a, b, c, d, e] {
  show = (tuple) => where(tuple) {
    #[a, b, c, d, e] =>
      `#[${show(a)}, ${show(b)}, ${show(c)}, ${show(d)}, ${show(e)}]`
  }
}

instance (
  Show a,
  Show b,
  Show c,
  Show d,
  Show e,
  Show f
) => Show #[a, b, c, d, e, f] {
  show = (tuple) => where(tuple) {
    #[a, b, c, d, e, f] =>
      `#[${show(a)}, ${show(b)}, ${show(c)}, ${show(d)}, ${show(e)}, ${show(f)}]`
  }
}

instance (
  Show a,
  Show b,
  Show c,
  Show d,
  Show e,
  Show f,
  Show g
) => Show #[a, b, c, d, e, f, g] {
  show = (tuple) => where(tuple) {
    #[a, b, c, d, e, f, g] =>
      `#[${show(a)}, ${show(b)}, ${show(c)}, ${show(d)}, ${show(e)}, ${show(f)}, ${show(g)}]`
  }
}

instance (
  Show a,
  Show b,
  Show c,
  Show d,
  Show e,
  Show f,
  Show g,
  Show h
) => Show #[a, b, c, d, e, f, g, h] {
  show = (tuple) => where(tuple) {
    #[a, b, c, d, e, f, g, h] =>
      `#[${show(a)}, ${show(b)}, ${show(c)}, ${show(d)}, ${show(e)}, ${show(f)}, ${show(g)}, ${show(h)}]`
  }
}

instance (
  Show a,
  Show b,
  Show c,
  Show d,
  Show e,
  Show f,
  Show g,
  Show h,
  Show i
) => Show #[a, b, c, d, e, f, g, h, i] {
  show = (tuple) => where(tuple) {
    #[a, b, c, d, e, f, g, h, i] =>
      `#[${show(a)}, ${show(b)}, ${show(c)}, ${show(d)}, ${show(e)}, ${show(f)}, ${show(g)}, ${show(h)}, ${show(i)}]`
  }
}


// ------------ Comparable --------------------------------

export type Comparison
  = LT
  | EQ
  | GT


gt :: Comparable a => a -> a -> Boolean
export gt = (a, b) => compare(a, b) == GT

ge :: Comparable a => a -> a -> Boolean
export ge = (a, b) => compare(a, b) != LT

lt :: Comparable a => a -> a -> Boolean
export lt = (a, b) => compare(a, b) == LT

le :: Comparable a => a -> a -> Boolean
export le = (a, b) => compare(a, b) != GT


instance Comparable (a -> b) {
  compare = (_, _) => EQ
}

instance Comparable {} {
  compare = (_, _) => EQ
}


#iftarget js

_compareChar :: Comparable a => Comparison -> Comparison -> Comparison -> a -> a -> Comparison
_compareChar = (more, less, equal, a, b) => #- {
  return a > b
    ? more
    : a === b 
      ? equal
      : less
} -#

/**
 * Comparable implementation for characters
 *
 * @since 0.13.0
 * @example
 * compare('a', 'b') // MORE
 * compare('b', 'a') // LESS
 * compare('a', 'a') // EQUAL
 */
instance Comparable Char {
  compare = (a, b) => _compareChar(GT, LT, EQ, a, b)
}

#elseif llvm

charCompare :: Char -> Char -> Integer
charCompare = extern "madlib__char__compare"


/**
 * Comparable implementation for characters
 *
 * @since 0.13.0
 * @example
 * compare('a', 'b') // MORE
 * compare('b', 'a') // LESS
 * compare('a', 'a') // EQUAL
 */
instance Comparable Char {
  compare = (a, b) => where(charCompare(a, b)) {
    1 =>
      GT

    -1 =>
      LT

    _ =>
      EQ
  }
}

#endif

#iftarget js

instance Comparable String {
  compare = (a, b) => #- a > b -# ? GT : #- a === b -# ? EQ : LT
}

#elseif llvm

stringCompare :: String -> String -> Integer
stringCompare = extern "madlib__string__compare"

instance Comparable String {
  compare = (a, b) => where(stringCompare(a, b)) {
    1 =>
      GT

    -1 =>
      LT

    _ =>
      EQ
  }
}

#endif

/**
 * Comparable implementation for booleans
 *
 * @since 0.11.0
 * @example
 * compare(true, false) // MORE
 * compare(false, true) // LESS
 * compare(true, true) // EQUAL
 * compare(false, false) // EQUAL
 */
instance Comparable Boolean {
  compare = (a, b) => where(#[a, b]) {
    #[true, false] =>
      GT

    #[false, true] =>
      LT

    _ =>
      EQ
  }
}

instance Comparable Integer {
  compare = (a, b) => a > b ? GT : a == b ? EQ : LT
}

instance Comparable Float {
  compare = (a, b) => a > b ? GT : a == b ? EQ : LT
}

instance Comparable Short {
  compare = (a, b) => a > b ? GT : a == b ? EQ : LT
}

instance Comparable Byte {
  compare = (a, b) => a > b ? GT : a == b ? EQ : LT
}

instance Comparable a => Comparable (List a) {
  compare = (a, b) => where(#[a, b]) {
    #[[], []] =>
      EQ

    #[[], _] =>
      LT

    #[_, []] =>
      GT

    #[[itemA, ...xsa], [itemB, ...xsb]] =>
      do {
        r = compare(itemA, itemB)

        return if (r == EQ) {
          compare(xsa, xsb)
        } else {
          r
        }
      }
  }
}


instance Comparable a => Comparable (Array a) {
  compare = (a, b) => compare(arrayToList(a), arrayToList(b))
}

#iftarget llvm

byteArraytoList :: ByteArray -> List Byte
export byteArraytoList = extern "madlib__bytearray__toList"

#elseif js

byteArraytoList :: ByteArray -> List Byte
export byteArraytoList = (array) => #- {
  let list = {}
  let start = list

  array.forEach(item => {
    list = list.n = { v: item, n: null }
  })

  return start.n
} -#

#endif

instance Comparable ByteArray {
  compare = (a, b) => compare(byteArraytoList(a), byteArraytoList(b))
}

instance (Comparable a, Comparable b) => Comparable (Dictionary a b) {
  compare = (a, b) => compare(dictToList(a), dictToList(b))
}

instance (Comparable a, Comparable b) => Comparable #[a, b] {
  compare = (a, b) => where(#[a, b]) {
    #[#[a1, a2], #[b1, b2]] =>
      do {
        r0 = compare(a1, b1)

        return if (r0 == EQ) {
          compare(a2, b2)
        } else {
          r0
        }
      }
  }
}

instance (Comparable a, Comparable b, Comparable c) => Comparable #[a, b, c] {
  compare = (a, b) => where(#[a, b]) {
    #[#[a1, a2, a3], #[b1, b2, b3]] =>
      do {
        r0 = compare(a1, b1)

        return if (r0 == EQ) do {
          r1 = compare(a2, b2)

          return if (r1 == EQ) {
            compare(a3, b3)
          } else {
            r1
          }
        } else {
          r0
        }
      }
  }
}

instance (Comparable a, Comparable b, Comparable c, Comparable d) => Comparable #[a, b, c, d] {
  compare = (a, b) => where(#[a, b]) {
    #[#[a1, a2, a3, a4], #[b1, b2, b3, b4]] =>
      do {
        r0 = compare(a1, b1)

        return if (r0 == EQ) do {
          r1 = compare(a2, b2)

          return if (r1 == EQ) do {
            r2 = compare(a3, b3)
  
            return if (r2 == EQ) {
              compare(a4, b4)
            } else {
              r2
            }
          } else {
            r1
          }
        } else {
          r0
        }
      }
  }
}

instance (Comparable a, Comparable b, Comparable c, Comparable d, Comparable e) => Comparable #[a, b, c, d, e] {
  compare = (a, b) => where(#[a, b]) {
    #[#[a1, a2, a3, a4, a5], #[b1, b2, b3, b4, b5]] =>
      do {
        r0 = compare(a1, b1)

        return if (r0 == EQ) do {
          r1 = compare(a2, b2)

          return if (r1 == EQ) do {
            r2 = compare(a3, b3)
  
            return if (r2 == EQ) do {
              r3 = compare(a4, b4)
    
              return if (r3 == EQ) {
                compare(a5, b5)
              } else {
                r3
              }
            } else {
              r2
            }
          } else {
            r1
          }
        } else {
          r0
        }
      }
  }
}

instance (Comparable a, Comparable b, Comparable c, Comparable d, Comparable e, Comparable f) => Comparable #[a, b, c, d, e, f] {
  compare = (a, b) => where(#[a, b]) {
    #[#[a1, a2, a3, a4, a5, a6], #[b1, b2, b3, b4, b5, b6]] =>
      do {
        r0 = compare(a1, b1)

        return if (r0 == EQ) do {
          r1 = compare(a2, b2)

          return if (r1 == EQ) do {
            r2 = compare(a3, b3)
  
            return if (r2 == EQ) do {
              r3 = compare(a4, b4)
    
              return if (r3 == EQ) do {
                r4 = compare(a5, b5)
      
                return if (r4 == EQ) {
                  compare(a6, b6)
                } else {
                  r4
                }
              } else {
                r3
              }
            } else {
              r2
            }
          } else {
            r1
          }
        } else {
          r0
        }
      }
  }
}

instance (Comparable a, Comparable b, Comparable c, Comparable d, Comparable e, Comparable f, Comparable g) => Comparable #[a, b, c, d, e, f, g] {
  compare = (a, b) => where(#[a, b]) {
    #[#[a1, a2, a3, a4, a5, a6, a7], #[b1, b2, b3, b4, b5, b6, b7]] =>
      do {
        r0 = compare(a1, b1)

        return if (r0 == EQ) do {
          r1 = compare(a2, b2)

          return if (r1 == EQ) do {
            r2 = compare(a3, b3)
  
            return if (r2 == EQ) do {
              r3 = compare(a4, b4)
    
              return if (r3 == EQ) do {
                r4 = compare(a5, b5)
      
                return if (r4 == EQ) do {
                  r5 = compare(a6, b6)
        
                  return if (r5 == EQ) {
                    compare(a7, b7)
                  } else {
                    r5
                  }
                } else {
                  r4
                }
              } else {
                r3
              }
            } else {
              r2
            }
          } else {
            r1
          }
        } else {
          r0
        }
      }
  }
}

instance (Comparable a, Comparable b, Comparable c, Comparable d, Comparable e, Comparable f, Comparable g, Comparable h) => Comparable #[a, b, c, d, e, f, g, h] {
  compare = (a, b) => where(#[a, b]) {
    #[#[a1, a2, a3, a4, a5, a6, a7, a8], #[b1, b2, b3, b4, b5, b6, b7, b8]] =>
      do {
        r0 = compare(a1, b1)

        return if (r0 == EQ) do {
          r1 = compare(a2, b2)

          return if (r1 == EQ) do {
            r2 = compare(a3, b3)
  
            return if (r2 == EQ) do {
              r3 = compare(a4, b4)
    
              return if (r3 == EQ) do {
                r4 = compare(a5, b5)
      
                return if (r4 == EQ) do {
                  r5 = compare(a6, b6)
        
                  return if (r5 == EQ) do {
                    r6 = compare(a7, b7)
          
                    return if (r6 == EQ) {
                      compare(a8, b8)
                    } else {
                      r6
                    }
                  } else {
                    r5
                  }
                } else {
                  r4
                }
              } else {
                r3
              }
            } else {
              r2
            }
          } else {
            r1
          }
        } else {
          r0
        }
      }
  }
}

instance (Comparable a, Comparable b, Comparable c, Comparable d, Comparable e, Comparable f, Comparable g, Comparable h, Comparable i) => Comparable #[a, b, c, d, e, f, g, h, i] {
  compare = (a, b) => where(#[a, b]) {
    #[#[a1, a2, a3, a4, a5, a6, a7, a8, a9], #[b1, b2, b3, b4, b5, b6, b7, b8, b9]] =>
      do {
        r0 = compare(a1, b1)

        return if (r0 == EQ) do {
          r1 = compare(a2, b2)

          return if (r1 == EQ) do {
            r2 = compare(a3, b3)
  
            return if (r2 == EQ) do {
              r3 = compare(a4, b4)
    
              return if (r3 == EQ) do {
                r4 = compare(a5, b5)
      
                return if (r4 == EQ) do {
                  r5 = compare(a6, b6)
        
                  return if (r5 == EQ) do {
                    r6 = compare(a7, b7)
          
                    return if (r6 == EQ) do {
                      r7 = compare(a8, b8)
            
                      return if (r7 == EQ) {
                        compare(a9, b9)
                      } else {
                        r7
                      }
                    } else {
                      r6
                    }
                  } else {
                    r5
                  }
                } else {
                  r4
                }
              } else {
                r3
              }
            } else {
              r2
            }
          } else {
            r1
          }
        } else {
          r0
        }
      }
  }
}

instance (Comparable a, Comparable b, Comparable c, Comparable d, Comparable e, Comparable f, Comparable g, Comparable h, Comparable i, Comparable j) => Comparable #[a, b, c, d, e, f, g, h, i, j] {
  compare = (a, b) => where(#[a, b]) {
    #[#[a1, a2, a3, a4, a5, a6, a7, a8, a9, a10], #[b1, b2, b3, b4, b5, b6, b7, b8, b9, b10]] =>
      do {
        r0 = compare(a1, b1)

        return if (r0 == EQ) do {
          r1 = compare(a2, b2)

          return if (r1 == EQ) do {
            r2 = compare(a3, b3)
  
            return if (r2 == EQ) do {
              r3 = compare(a4, b4)
    
              return if (r3 == EQ) do {
                r4 = compare(a5, b5)
      
                return if (r4 == EQ) do {
                  r5 = compare(a6, b6)
        
                  return if (r5 == EQ) do {
                    r6 = compare(a7, b7)
          
                    return if (r6 == EQ) do {
                      r7 = compare(a8, b8)
            
                      return if (r7 == EQ) do {
                        r8 = compare(a9, b9)
              
                        return if (r8 == EQ) {
                          compare(a10, b10)
                        } else {
                          r8
                        }
                      } else {
                        r7
                      }
                    } else {
                      r6
                    }
                  } else {
                    r5
                  }
                } else {
                  r4
                }
              } else {
                r3
              }
            } else {
              r2
            }
          } else {
            r1
          }
        } else {
          r0
        }
      }
  }
}


// ------------ Concat ------------------------------------

interface Semigroup a {
  assoc :: a -> a -> a
}

interface Semigroup a => Monoid a {
  mempty :: a
  mappend :: a -> a -> a
  mconcat :: List a -> a
}


#iftarget llvm

concatString :: String -> String -> String
concatString = extern "madlib__string__concat"

#elseif js

concatString :: String -> String -> String
concatString = (a, b) => #- a + b -#

#endif

instance Semigroup String {
  assoc = concatString
}

instance Monoid String {
  mempty = ""
  mappend = assoc
  mconcat = reduceLeft(assoc, mempty)
}

instance Semigroup (List a) {
  assoc = (list1, list2) => where(list1) {
    [item, ...more] =>
      [item, ...assoc(more, list2)]

    [] =>
      list2
  }
}

instance Monoid (List a) {
  mempty = []
  mappend = assoc
  mconcat = reduceLeft(assoc, mempty)
}
