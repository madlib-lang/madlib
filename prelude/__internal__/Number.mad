import {} from "Show"
import {} from "Read"
import { Maybe, Just, Nothing } from "Maybe"

instance Show Number {
  show = (x) => #- new Number(x).toString() -#
}

instance Read Number {
  read = (x) => #-{
    const result = parseFloat(x)
    return isNaN(result) ? Nothing : Just(result)
  }-#
}

fromString :: String -> Maybe Number
export fromString = (str) => (#- {
  const n = parseFloat(str)
  return isNaN(n) ? Nothing : Just(n)
} -#)

formatDecimal :: Number -> Number -> String
export formatDecimal = (a, x) => #-{
  const n = x.toFixed(a)
  return isNaN(n) ? "0" : n
}-#

range :: Number -> Number -> List Number
export range = (a, b) => #-{
  const out = []
  let x = a
  while (x < b) {
    out.push(x)
    x += 1
  }
  return out
}-#

