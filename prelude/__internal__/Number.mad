import type { Maybe } from "Maybe"
import { EQUAL, LESS, MORE } from "Compare"
import {} from "Scan"
import {} from "Show"


instance Comparable Integer {
  compare = (a, b) => a > b ? MORE : a == b ? EQUAL : LESS
}

instance Comparable Byte {
  compare = (a, b) => a > b ? MORE : a == b ? EQUAL : LESS
}

instance Comparable Float {
  compare = (a, b) => a > b ? MORE : a == b ? EQUAL : LESS
}


instance Show Integer {
  show = inspect
}

instance Show Byte {
  show = inspect
}

instance Show Float {
  show = inspect
}


#iftarget js
import { Just, Nothing } from "Maybe"

scanInteger :: Number a => String -> Maybe a
scanInteger = (str) => (#- {
  const n = parseInt(str)
  return isNaN(n) ? Nothing : Just(n)
} -#)



scanFloat :: Number a => String -> Maybe a
scanFloat = (str) => (#- {
  const n = parseFloat(str)
  return isNaN(n) ? Nothing : Just(n)
} -#)

#elseif llvm

scanInteger :: String -> Maybe Integer
scanInteger = extern "madlib__number__scanInteger"

scanFloat :: String -> Maybe Float
scanFloat = extern "madlib__number__scanFloat"

scanByte :: String -> Maybe Byte
scanByte = extern "madlib__number__scanByte"

#endif

instance Scan Integer {
  scan = scanInteger
}

instance Scan Float {
  scan = scanFloat
}


#iftarget js

integerToFloat :: Integer -> Float
export integerToFloat = (a) => #- a -#

#endif

#iftarget js

/**
 * Formats a a number given as the first parameter to a string containing the
 * amount of numbers after the . given by the second parameter.
 * @since 0.4.0
 * @example
 * formatDecimal(3.14159, 2) // "3.14"
 */
formatDecimal :: Number a => a -> Float -> String
export formatDecimal = (a, x) => #-{
  const n = x.toFixed(a)
  return isNaN(n) ? "0" : n
}-#

// TODO: Move to List and write with recursion
range :: Integer -> Integer -> List Integer
export range = (a, b) => #-{
  const out = []
  let x = a
  while (x < b) {
    out.push(x)
    x += 1
  }
  return out
}-#
#endif
