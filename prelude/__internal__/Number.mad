import {} from "Show"
import {} from "Read"
import type { Maybe } from "Maybe"
import { Just, Nothing } from "Maybe"



instance Show Number {
  show = (x) => #- x.toString() -#
}


instance Read Number {
  read = fromString
}


fromString :: String -> Maybe Number
export fromString = (str) => (#- {
  const n = parseFloat(str)
  return isNaN(n) ? Nothing : Just(n)
} -#)


/**
 * Formats a a number given as the first parameter to a string containing the
 * amount of numbers after the . given by the second parameter.
 * @since 0.4.0
 * @example
 * formatDecimal(3.14159, 2) // "3.14"
 */
formatDecimal :: Number -> Number -> String
export formatDecimal = (a, x) => #-{
  const n = x.toFixed(a)
  return isNaN(n) ? "0" : n
}-#


range :: Number -> Number -> List Number
export range = (
  a,
  b
) => #-{
  const out = []
  let x = a
  while (x < b) {
    out.push(x)
    x += 1
  }
  return out
}-#
