import { assertEquals, test } from "./TestTools"
import { always, complement, memoize } from "./Function"
import { andDo } from "Monad"
import {} from "MonadWriter"
import {} from "MonadState"
import { runWriterT, WriterT } from "WriterT"
import { runStateT, StateT } from "StateT"
import { runIdentity, Identity } from "Identity"
import {} from "List"



test("complement", (_) => {
  isEven = (x) => x % 2 == 0
  isOdd  = complement(isEven)

  return assertEquals(isOdd(2), false)
})

test("always", (_) => assertEquals(always(true, "1"), true))
test("always - map", (_) => assertEquals(
  map(always(true), [1, 2 ,3]),
  [true, true, true])
)


// test("memoize", (_) => {
//   spy = memoize(chain((x) => tell([x]) |> andDo(of(x))))
//   run = pipe(runWriterT, runIdentity)

//   return pipe(
//     of,
//     spy,
//     spy,
//     run,
//     (x) => assertEquals(x, <1, [1]>)
//   )(1)
// })

test("memoize - good", (_) => {
  spy = memoize((x) => put(x + 1))
  run = pipe((m) => runStateT(m, 0), runIdentity)

  return pipe(
    of,
    andDo(get),
    chain((s) => {
      c1 = spy(s)
      c2 = spy(s)
      c3 = spy(s)
      return andDo(andDo(c1, c2), c3)
    }),
    run,
    (x) => assertEquals(x, <(), 1>)
  )(1)
})

// spy = memoize((x) => put(x + 1))
// run = pipe((m) => runStateT(m, 0), runIdentity)

// pipe(
//   of,
//   andDo(get),
//   run,
//   (x) => assertEquals(x, <1, 1>)
// )(1)
