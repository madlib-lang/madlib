import { assertEquals, test } from "./TestTools"
import { always, complement, memoize } from "./Function"
import { andDo } from "Monad"
import {} from "MonadWriter"
import {} from "MonadState"
import { runWriterT, WriterT } from "WriterT"
import { runStateT, StateT } from "StateT"
import { runIdentity, Identity } from "Identity"
import {} from "List"



test("complement", (_) => {
  isEven = (x) => x % 2 == 0
  isOdd  = complement(isEven)

  return assertEquals(isOdd(2), false)
})

test("always", (_) => assertEquals(always(true, "1"), true))
test("always - map", (_) => assertEquals(
  map(always(true), [1, 2 ,3]),
  [true, true, true])
)


test("memoize - good", (_) => {
  inc = (x) => put(x + 1)
  spy = memoize(chain((x) => pipe(
    chain(inc),
    andDo(of(x))
  )(get)))
  
  run = pipe((m) => runStateT(m, 0), runIdentity)
  
  return pipe(
    of,
    spy,
    spy,
    spy,
    run,
    // (x) => assertEquals(x, <(), 1>)
    assertEquals($, <17, 1>)
  )(17)
})
