import { assertEquals, test } from "./TestTools"
import { always, complement } from "./Function"
import { andDo } from "Monad"
import {} from "MonadWriter"
import { runWriterT, WriterT } from "WriterT"
import { runIdentity, Identity } from "Identity"
import {} from "List"



test("complement", (_) => {
  isEven = (x) => x % 2 == 0
  isOdd  = complement(isEven)

  return assertEquals(isOdd(2), false)
})

test("always", (_) => assertEquals(always(true, "1"), true))
test("always - map", (_) => assertEquals(
  map(always(true), [1, 2 ,3]),
  [true, true, true])
)


test("memoize", (_) => {
  innerFn = (x) => tell([x])// |> andDo(of(x))
  run = pipe(runWriterT, runIdentity)

  return pipe(
    of,
    chain(innerFn),
    chain(innerFn),
    run,
    (x) => assertEquals(x, <(), [1]>)
  )(1)
})
