import { assertEquals, test } from "./Test"
import {} from "List"
import { lt } from "Compare"
import type { Maybe } from "Maybe"
import { Just, Nothing } from "Maybe"
import { memoize } from "./Memoize"

#iftarget js

import {
  all,
  always,
  any,
  both,
  complement,
  either,
  equals,
  flip,
  identity,
  ifElse,
  not,
  notEquals,
  when,
  tailRec,
  Loop,
  Done,
} from "./Function"


#elseif llvm

import {
  all,
  always,
  any,
  both,
  complement,
  either,
  equals,
  flip,
  identity,
  ifElse,
  not,
  notEquals,
  when,
  tailRec,
  Loop,
  Done,
} from "./Function"

#endif

divide :: Float -> Float -> Float
divide = (a, b) => a / b


test("identity should return whatever it is given", () => pipe(
  identity,
  assertEquals($, 3)
)(3))

test("equals - two equal numbers", () => pipe(
  equals($, 3),
  assertEquals($, true)
)(3))

test("equals - two different numbers", () => pipe(
  equals($, 4),
  assertEquals($, false)
)(3))

test("equals - two equal lists", () => pipe(
  equals($, [1, 2, 3]),
  assertEquals($, true)
)([1, 2, 3]))

test("notEquals - two equal numbers", () => pipe(
  notEquals($, 3),
  assertEquals($, false)
)(3))

test("ifElse - truthy", () => pipe(
  ifElse(equals(4), (x) => x + 1, (x) => x * 2),
  assertEquals($, 5)
)(4))

test("ifElse - falsy", () => pipe(
  ifElse(equals(4), (x) => x + 1, (x) => x * 2),
  assertEquals($, 10)
)(5))

test("when - truthy", () => pipe(
  when(equals(4), (x) => x * 2),
  assertEquals($, 8)
)(4))

test("when - falsy", () => pipe(
  when(equals(4), (x) => x * 2),
  assertEquals($, 5)
)(5))

test("not - true", () => pipe(
  not,
  assertEquals($, false)
)(true))

test("not - false", () => pipe(
  not,
  assertEquals($, true)
)(false))

test("flip", () => pipe(
  flip,
  (flipped) => flipped(4, 2),
  assertEquals($, 0.5)
)(divide))

test("complement", () => {
  isEven = (x) => x % 2 == 0
  isOdd  = complement(isEven)

  return assertEquals(isOdd(2), false)
})

test("always", () => assertEquals(always(true, "1"), true))
test("always - map", () => assertEquals(
  map(always(true), [1, 2 ,3]),
  [true, true, true]
))

test("any - true", () => assertEquals(
  any((x) => x > 4, [1, 3, 5]),
  true
))

test("any - false", () => assertEquals(
  any((x) => x > 4, [1, 3, 2]),
  false
))

test("all - true", () => assertEquals(
  all((x) => x > 4, [5, 8, 10]),
  true
))

test("all - false", () => assertEquals(
  all((x) => x > 4, [1, 2, 10]),
  false
))

test("either - true", () => assertEquals(
  either(equals("A"), equals("B"))("B"),
  true
))

test("either - false", () => assertEquals(
  either(equals("A"), equals("B"))("C"),
  false
))

test("both - true", () => assertEquals(
  both(lt(50), equals(60))(60),
  true
))

test("both - false", () => assertEquals(
  both(lt(50), equals(60))(55),
  false
))


test("tailRec - monadic", () => {
  maybeMillion :: Integer -> Maybe Integer
  maybeMillion = (x) => {
    go = (value) => where(value) {
      Just(v) =>
        v < 1000000
          ? Loop(chain((a) => Just(a + 1), value))
          : Done(value)

      Nothing =>
        Done(Nothing)
    }

    return tailRec(go, Just(x))
  }

  return assertEquals(maybeMillion(0), Just(1000000))
})


test("memoize - should not call the memoized function if called with the same argument", () => {
  count :: Integer
  count = 0

  add :: Integer -> Integer
  add = (a) => {
    count := count + 1
    return a
  }
  
  f = memoize(add)

  f(1)
  f(1)
  f(1)

  return assertEquals(count, 1)
})
