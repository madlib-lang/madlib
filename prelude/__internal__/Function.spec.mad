import type { Maybe } from "Maybe"

import { lt } from "Compare"
import {} from "List"
import { Just, Nothing } from "Maybe"

import { assertEquals, test } from "./Test"



#iftarget js

import {
  Done,
  Loop,
  always,
  both,
  complement,
  either,
  equals,
  flip,
  identity,
  ifElse,
  neither,
  not,
  notBoth,
  notEquals,
  tailRec,
  unless,
  when,
  xEither,
  xNeither,
} from "./Function"



#elseif llvm

import {
  Done,
  Loop,
  always,
  both,
  complement,
  either,
  equals,
  flip,
  identity,
  ifElse,
  neither,
  not,
  notBoth,
  notEquals,
  tailRec,
  unless,
  when,
  xEither,
  xNeither,
} from "./Function"



#endif

divide :: Float -> Float -> Float
divide = (a, b) => a / b


test(
  "identity should return whatever it is given",
  () => pipe(
    identity,
    assertEquals($, 3),
  )(3),
)

test(
  "equals - two equal numbers",
  () => pipe(
    equals($, 3),
    assertEquals($, true),
  )(3),
)

test(
  "equals - two different numbers",
  () => pipe(
    equals($, 4),
    assertEquals($, false),
  )(3),
)

test(
  "equals - two equal lists",
  () => pipe(
    equals($, [1, 2, 3]),
    assertEquals($, true),
  )([1, 2, 3]),
)

test(
  "notEquals - two equal numbers",
  () => pipe(
    notEquals($, 3),
    assertEquals($, false),
  )(3),
)

test(
  "ifElse - truthy",
  () => pipe(
    ifElse(equals(4), (x) => x + 1, (x) => x * 2),
    assertEquals($, 5),
  )(4),
)

test(
  "ifElse - falsy",
  () => pipe(
    ifElse(equals(4), (x) => x + 1, (x) => x * 2),
    assertEquals($, 10),
  )(5),
)

test(
  "when - truthy",
  () => pipe(
    when(equals(4), (x) => x * 2),
    assertEquals($, 8),
  )(4),
)

test(
  "when - falsy",
  () => pipe(
    when(equals(4), (x) => x * 2),
    assertEquals($, 5),
  )(5),
)

test(
  "not - true",
  () => pipe(
    not,
    assertEquals($, false),
  )(true),
)

test(
  "not - false",
  () => pipe(
    not,
    assertEquals($, true),
  )(false),
)

test(
  "flip",
  () => pipe(
    flip,
    (flipped) => flipped(4, 2),
    assertEquals($, 0.5),
  )(divide),
)

test(
  "complement",
  () => {
    isEven = (x) => x % 2 == 0
    isOdd = complement(isEven)

    return assertEquals(isOdd(2), false)
  },
)

test("always", () => assertEquals(always(true, "1"), true))
test("always - map", () => assertEquals(map(always(true), [1, 2, 3]), [true, true, true]))

test("either - true", () => assertEquals(either(equals("A"), equals("B"))("B"), true))

test("either - false", () => assertEquals(either(equals("A"), equals("B"))("C"), false))

test("both - true", () => assertEquals(both(lt(50), equals(60))(60), true))

test("both - false", () => assertEquals(both(lt(50), equals(60))(55), false))

test(
  "tailRec - monadic",
  () => {
    maybeMillion :: Integer -> Maybe Integer
    maybeMillion = (x) => {
      go = (value) => where(value) {
        Just(v) =>
          v < 1000000 ? Loop(chain((a) => Just(a + 1), value)) : Done(value)

        Nothing =>
          Done(Nothing)
      }

      return tailRec(go, Just(x))
    }

    return assertEquals(maybeMillion(0), Just(1000000))
  },
)

test("unless - true", () => assertEquals(unless(equals(5), (x) => x * 2, 5), 5))

test("unless - false", () => assertEquals(unless(equals(5), (x) => x * 2, 10), 20))

test(
  "notBoth",
  () => do {
    _ <- assertEquals(notBoth(lt(50), lt(60))(70), false)
    return assertEquals(notBoth(lt(50), lt(60))(55), true)
  },
)

test(
  "neither",
  () => do {
    notAB = neither(equals("A"), equals("B"))
    _ <- assertEquals(notAB("A"), false)
    _ <- assertEquals(notAB("B"), false)
    return assertEquals(notAB("C"), true)
  },
)

test(
  "xEither",
  () => do {
    sclusy = xEither(lt(50), lt(60))
    _ <- assertEquals(sclusy(70), false)
    _ <- assertEquals(sclusy(30), false)
    return assertEquals(sclusy(55), true)
  },
)

test(
  "xNeither",
  () => do {
    _ <- assertEquals(xNeither(lt(50), lt(60))(70), true)
    _ <- assertEquals(xNeither(lt(50), lt(60))(30), true)
    return assertEquals(xNeither(lt(50), lt(60))(55), false)
  },
)
