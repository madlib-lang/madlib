import {} from "Monoid"

import type { ComparisonResult } from "Compare"
import type { Maybe } from "Maybe"
import {} from "Show"
import {} from "Monad"
import {} from "String"
import Fun from "Function"
import { MORE } from "Compare"
import { Just, Nothing } from "Maybe"
import { fst, snd } from "Tuple"
// import { loop } from "Control"

/**
 * List utility functions.
 * In this module you'll find everything that is related to List and make working with lists convenient.
 */


/**
 * As with all implementations of `map`, transform each value contained in the List.
 * 
 * @since v0.0.6
 * @example
 * map((x) => x * 2, [1, 2, 3]) // [2, 4, 6]
 */
instance Functor List {
  map = (f, list) => where(list) {
    [a, ...xs] =>
      [f(a), ...map(f, xs)]

    [] =>
      []
  }
}


repeat :: a -> Integer -> List a
export repeat = (a, count) =>
  count == 0
    ? []
    : [a, ...repeat(a, count - 1)]

repeatWith :: (Integer -> a) -> Integer -> List a
export repeatWith = (f, count) =>
  count == 0
    ? []
    : [f(count), ...repeatWith(f, count - 1)]



instance Applicative List {
  pure = (x) => [x]

  ap = (mf, ma) => pipe(
    map((f) => map(f, ma)),
    flatten
  )(mf)
}

instance Monad List {
  of = pure

  chain = (f, xs) => pipe(
    map(f),
    flatten
  )(xs)
}

instance Semigroup (List a) {
  assoc = (list1, list2) => where(list1) {
    [item, ...more] =>
      [item, ...assoc(more, list2)]
  
    [] =>
      list2
  }
}

instance Monoid (List a) {
  mempty = []
  mappend = assoc
}

instance Show a => Show (List a) {
  show = pipe(
    map(show),
    intercalate(", "),
    reduceL(mappend, ""),
    (x) => `[${x}]`
  )
}


/**
 * Constructor function that creates a list with length 1. It takes an item of any type, and returns a List of that type.
 *
 * @since 0.0.5
 * @example
 * singleton(1)   // [1]
 * singleton("1") // ["1"]
 */
singleton :: a -> List a
export singleton = pure

/**
 * Transform a List of Strings into a single String,
 * by adding newlines between each item in the List.
 *
 * @since 0.0.5
 * @example
 * unlines(["line1", "line2", "line3"]) // "line1\nline2\nline3"
 */
unlines :: List String -> String
export unlines = pipe(
  intercalate("\n"),
  reduce(mappend, "")
)

/**
 * Inserts a value between all elements of a list.
 *
 * @since 0.0.5
 * @example
 * intercalate("and", ["cats", "dogs"]) // ["cats", "and", "dogs"]
 */
intercalate :: a -> List a -> List a
export intercalate = (a, xs) => where(xs) {
  [] =>
    []

  [one,] =>
    [one]

  [one, two] =>
    [one, a, two]

  [one, ...rest] =>
    [one, a, ...intercalate(a, rest)]
}


_intercalateWithIndex :: Integer -> (Integer -> a) -> List a -> List a
_intercalateWithIndex = (i, f, xs) => where(xs) {
  [] => []
  [one] => [one]
  [one, two] => [one, f(i), two]
  [one, ...rest] => [one, f(i), ..._intercalateWithIndex(i + 1, f, rest)]
}

intercalateWithIndex :: (Integer -> a) -> List a -> List a
export intercalateWithIndex = _intercalateWithIndex(0)


/**
 * Joins a list with a separator and returns a String.
 *
 * IMPORTANT:
 * When coming from JS, beware that there is a small difference with Array.prototype.join.
 * In JS, join relies on its dynamic nature and accepts any type as being valid, and transforms it
 * to a string for you. In Madlib you need to provide an instance of Show for your custom types, and
 * for Madlib types (eg. tuples, List, Boolean, Maybe) it uses the Show instance defined for them.
 *
 * @since 0.0.5
 * @example
 * join(" and ", ["cats", "dogs"])   // "cats and dogs"
 * join("", ["one", "two", "three"]) // "onetwothree"
 */
join :: String -> List String -> String
export join = (a, xs) => pipe(
  intercalate(a),
  reduce(mappend, "")
)(xs)


/**
 * Applies a function to each item of a list. This function receives both the current element
 * and its index as parameters, and whatever is returned is used as the new element's value.
 *
 * @since 0.0.5
 * @example
 * mapWithIndex((x, i) => x ++ show(i), ["a", "b", "c"]) // ["a0", "b1", "c2"]
 */
mapWithIndex :: (a -> Integer -> b) -> List a -> List b
export mapWithIndex = (f, list) => {
  helper = (list_, index) => where(list_) {
    [] =>
      []

    [a, ...xs] =>
      [f(a, index), ...helper(xs, index + 1)]
  }

  return helper(list, 0)
}


/**
 * Merge two Lists together.
 *
 * @since 0.0.5
 * @example
 * concat([1, 2, 3], [4, 5, 6]) // [1, 2, 3, 4, 5, 6]
 */
concat :: List a -> List a -> List a
export concat = assoc


/**
 * Add an item to the end of a List.
 *
 * @since 0.0.5
 * @example
 * append(2, [1]) // [1, 2]
 */
append :: a -> List a -> List a
export append = (item, list) => where(list) {
  [] =>
    [item]

  [a, ...xs] =>
    [a, ...append(item, xs)]
}


/**
 * Safely access the last value in a List (wrapped in Just), or Nothing if the array is empty.
 *
 * @since 0.0.5
 * @example
 * last([1, 2, 3]) // Just(3)
 * last([])        // Nothing
 */
last :: List a -> Maybe a
export last = (list) => where(list) {
  [item] =>
    Just(item)

  [] =>
    Nothing

  [_, a, ...xs] =>
    last([a, ...xs])
}

/**
 * Safely access the first value in a List (wrapped in Just), or Nothing if the array is empty.
 *
 * @since 0.0.5
 * @example
 * first([1, 2, 3]) // Just(1)
 * first([])        // Nothing
 */
first :: List a -> Maybe a
export first = (list) => where(list) {
  [] =>
    Nothing

  [a, ..._] =>
    Just(a)
}

/**
 * Returns a List minus its last item.
 *
 * @since 0.0.5
 * @example
 * init([1, 2, 3]) // [1, 2]
 * init([])        // []
 */
init :: List a -> List a
export init = (list) => where(list) {
  [item] =>
    []

  [] =>
    []

  [a, ...xs] =>
    [a, ...init(xs)]
}

tail :: List a -> List a
export tail = (list) => where(list) {
  [] =>
    []

  [a, ...xs] =>
    xs
}


/**
 * Safely access a value at a given index in a List (wrapped in Just), or Nothing.
 *
 * @since 0.0.5
 * @example
 * nth(1, [1, 2, 3]) // Just(2)
 * nth(3, [1, 2, 3]) // Nothing
 */
nth :: Integer -> List a -> Maybe a
export nth = (i, list) => where(list) {
  [] =>
    Nothing

  [a, ...xs] =>
    i == 0
      ? Just(a)
      : nth(i - 1, xs)
}


// TODO: rename to reduceRight
/**
 * Aggregate a single value by iterating over a list, from right-to-left.
 * Takes three parameters:
 *   - an aggregation function, which takes the current aggregated value and the next item in the list.
 *   - an initial value (which must share the same type as the value returned from the transformation function)
 *   - a List
 *
 * @since 0.0.5
 */
reduceR :: (a -> b -> b) -> b -> List a -> b
export reduceR = (f, acc, list) => reduceL((a, b) => f(b, a), acc, list)


// TODO: rename to reduceLeft
/**
 * Aggregate a single value by iterating over a list, from left-to-right.
 * Takes three parameters:
 *   - an aggregation function, which takes the current aggregated value and the next item in the list.
 *   - an initial value (which must share the same type as the value returned from the transformation function)
 *   - a List
 *
 * @since 0.0.5
 */
reduceL :: (a -> b -> a) -> a -> List b -> a
export reduceL = (f, acc, list) => where(list) {
  [] =>
    acc

  [a, ...xs] =>
    reduceL(f, f(acc, a), xs)
}


/**
 * Alias of [reduceL](/List/reduceL).
 * Aggregate a single value by iterating over a list, from left-to-right.
 * Takes three parameters:
 *
 *   - an aggregation function, which takes the current aggregated value and the next item in the list.
 *   - an initial value (which must share the same type as the value returned from the transformation function)
 *   - a List
 *
 * @since 0.0.5
 * @example
 * reduce((a, b) => a + b, 0, [1, 2, 3]) // 6
 */
reduce :: (a -> b -> a) -> a -> List b -> a
export reduce = reduceL


reduceM :: Monad m => (b -> a -> m b) -> b -> List a -> m b
export reduceM = (f, acc, list) => where(list) {
  [] =>
    of(acc)

  [a, ...xs] =>
    chain((v) => reduceM(f, v, xs), f(acc, a))
}


// reduceM :: Monad m => (b -> a -> m b) -> b -> List a -> m b
// export reduceM = (fn, initial, xs) => pipe(
//   loop(
//     $,
//     pipe(snd, Fun.complement(isEmpty)),
//     where {
//       #[initialM, [h, ...rest]] => #[chain(fn($, h), initialM), rest]
//     }
//   ),
//   fst
// )(#[of(initial), xs])



/**
 * Iterate over a List, selecting only values which are matched by predicate function.
 *
 * @since 0.0.5
 * @example
 * filter((a) => a % 2 == 0, [1, 2, 3, 4, 5, 6]) // [2, 4, 6]
 */
filter :: (a -> Boolean) -> List a -> List a
export filter = (predicate, list) => where(list) {
  [] =>
    []

  [a, ...xs] =>
    predicate(a)
      ? [a, ...filter(predicate, xs)]
      : filter(predicate, xs)
}


/**
 * Iterate over a List, selecting only values which are not matched by a predicate function.
 * This is the complement of `filter`.
 *
 * @since 0.0.5
 * @example
 * reject((a) => a % 2 == 0, [1, 2, 3, 4, 5, 6]) // [1, 3, 5]
 */
 reject :: (a -> Boolean) -> List a -> List a
 export reject = (predicate, list) => filter(Fun.complement(predicate), list)


/**
 * Safely access the first element in a List for which a given
 * predicate function returns true; returning Just the found value or Nothing.
 *
 * @since 0.0.5
 * @example
 * find((a) => a % 2 == 0, [1, 2, 3, 4, 5, 6]) // Just(2)
 * find((a) => a == 0, [1, 2, 3, 4, 5, 6])     // Nothing
 */
find :: (a -> Boolean) -> List a -> Maybe a
export find = (predicate, list) => where(list) {
  [] =>
    Nothing

  [a, ...xs] =>
    predicate(a)
      ? Just(a)
      : find(predicate, xs)
}


/**
 * Get the length of a List.
 *
 * @since 0.0.5
 * @example
 * len([1, 2, 3]) // 3
 */
len :: List a -> Integer
export len = (list) => {
  helper = (list_, count) => where(list_) {
    [] =>
      count

    [a, ...xs] =>
      helper(xs, count + 1)
  }

  return helper(list, 0)
}


/**
 * Cut a contiguous segment from a List, from start index to end index.
 * @since 0.0.5
 */
slice :: Integer -> Integer -> List a -> List a
export slice = (start, end, list) => where(list) {
  [] =>
    []

  [a, ...xs] =>
    if (start == 0 && end > 0) {
      [a, ...slice(0, end - 1, xs)]
    } else if (start > 0) {
      slice(start - 1, end - 1, xs)
    } else {
      []
    }
}


/**
 * Test whether a given List has no elements.
 *
 * @since 0.0.5
 */
isEmpty :: List a -> Boolean
export isEmpty = (xs) => len(xs) == 0


/**
 * Using a comparison function, select values which are distinct. 
 *
 * @since 0.0.5
 * @example
 * uniqueBy(
 *   (a, b) => a.id == b.id,
 *   [
 *     { id: 1, name: "John" },
 *     { id: 2, name: "Paul" },
 *     { id: 1, name: "George" },
 *     { id: 4, name: "Ringo" }
 *   ]
 * )
 * // [{ id: 1, name: "John" }, { id: 2, name: "Paul" }, { id: 4, name: "Ringo" }]
 */
uniqueBy :: (a -> a -> Boolean) -> List a -> List a
export uniqueBy = (f) => reduce(
  (result, elem) => where(find(f(elem), result)) {
    Just(_) =>
      result

    Nothing =>
      append(elem, result)
  },
  []
)

descending :: (a -> a -> ComparisonResult) -> a -> List a -> List a -> List (List a)
descending = (compareFn, a, as, xs) => where(xs) {
  [b, ...bs] =>
    compareFn(a, b) == MORE
      ? descending(compareFn, b, [a, ...as], bs)
      : [[a, ...as], ...sequences(compareFn, xs)]

  _ =>
    [[a, ...as], ...sequences(compareFn, xs)]
}


ascending :: (a -> a -> ComparisonResult) -> a -> (List a -> List a) -> List a -> List (List a)
ascending = (compareFn, a, as, xs) => where(xs) {
  [b, ...bs] =>
    compareFn(a, b) != MORE
      ? ascending(compareFn, b, (ys) => as([a, ...ys]), bs)
      : [as([a]), ...sequences(compareFn, xs)]

  _ =>
    [as([a]), ...sequences(compareFn, xs)]
}


sequences :: (a -> a -> ComparisonResult) -> List a -> List (List a)
sequences = (compareFn, list) => where(list) {
  [a, b, ...xs] =>
    compareFn(a, b) == MORE
      ? descending(compareFn, b, [a], xs)
      : ascending(compareFn, b, (l) => [a, ...l], xs)

  xs =>
    [xs]
}



sortBy :: (a -> a -> ComparisonResult) -> List a -> List a
export sortBy = (compareFn, list) => {
  merge :: List a -> List a -> List a
  merge = (listA, listB) => where(#[listA, listB]) {
    #[[a, ...as], [b, ...bs]] =>
      compareFn(a, b) == MORE
        ? [b, ...merge(listA, bs)]
        : [a, ...merge(as, listB)]

    #[[], bs] =>
      bs

    #[as, []] =>
      as
  }

  mergePairs :: List (List a) -> List (List a)
  mergePairs = (l) => where(l) {
    [a, b, ...xs] =>
      [merge(a, b), ...mergePairs(xs)]

    xs =>
      xs
  }

  mergeAll :: List (List a) -> List a
  mergeAll = (l) => where(l) {
    [x] =>
      x

    xs =>
      mergeAll(mergePairs(xs))
  }

  return pipe(
    sequences(compareFn),
    mergeAll
  )(list)
}


sort :: Comparable a => List a -> List a
export sort = sortBy(compare)

sortAsc :: Comparable a => List a -> List a
export sortAsc = sort

sortDesc :: Comparable a => List a -> List a
export sortDesc = sortBy((a, b) => compare(a, b) * -1)


/**
 * Remove nested Lists from a given List, one level deep. 
 *
 * @since 0.0.5
 */
flatten :: List (List a) -> List a
export flatten = reduceL(concat, [])


/**
 * Take two lists and combine them pair-wise, such that the elements of List x become the first value
 * of the resulting Tuple, and the elements of List y become the the second value per element.
 *
 * @since 0.0.5
 * @example
 * zip(["a", "b", "c"], [1, 2, 3]) // [#["a", 1], #["b", 2], #["c", 3]]
 */
zip :: List a -> List b -> List #[a, b]
export zip = (as, bs) => where(#[as, bs]) {
  #[[a, ...aa], [b, ...bb]] =>
    [#[a, b], ...zip(aa, bb)]

  #[[a], [b]] =>
    [#[a, b]]

  #[[], []] =>
    []
}

/**
 * Test a given List to see whether it contains a given static value.
 *
 * @since 0.6.0
 */
includes :: Eq a => a -> List a -> Boolean
export includes = (x, list) => where(list) {
  [] =>
    false

  [a, ...xs] =>
    a == x
      ? true
      : includes(x, xs)
}


drop :: Integer -> List a -> List a
export drop = (amount, xs) => slice(amount, len(xs), xs)

dropLast :: Integer -> List a -> List a
export dropLast = (amount, xs) => slice(0, len(xs) - amount, xs)

dropWhile :: (a -> Boolean) -> List a -> List a
export dropWhile = (predicate, list) => where(list) {
  [] =>
    []

  [a, ...xs] =>
    predicate(a)
      ? dropWhile(predicate, xs)
      : [a, ...xs]
}
