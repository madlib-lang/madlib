import {} from "Show"
import {} from "Monad"
import {} from "Monoid"
import {} from "String"
import Fun from "Function"
import { Maybe, Just, Nothing } from "Maybe"

instance Functor List {
  map = (f, xs) => (#- xs.map((x) => f(x)) -#)
}

instance Applicative List {
  pure = (x) => [x]

  ap = (mf, ma) => pipe(
    map((f) => map(f, ma)),
    flatten
  )(mf)
}

instance Monad List {
  of = pure

  chain = (f, xs) => pipe(
    map(f),
    flatten
  )(xs)
}

instance Semigroup (List a) {
  assoc = (xs1, xs2) => (#- xs1.concat(xs2) -#)
}

instance Monoid (List a) {
  mempty = []
  mappend = (xs1, xs2) => (#- xs1.concat(xs2) -#)//assoc
}

instance Show a => Show (List a) {
  show = pipe(
    map(show),
    intercalate(", "),
    reduceL((a, b) => a ++ b, ""),
    (x) => "[" ++ x ++ "]"
  )
}

singleton :: a -> List a
export singleton = pure

unlines :: List String -> String
export unlines = pipe(
  intercalate("\n"),
  reduce(mappend, "")
)

intercalate :: a -> List a -> List a
export intercalate = (a, xs) => where(xs)
  is []            : []
  is [one]         : [one]
  is [one, two]    : [one, a, two]
  is [one, ...rest]: [one, a, ...intercalate(a, rest)]

mapWithIndex :: (a -> Number -> b) -> List a -> List b
export mapWithIndex = (f, xs) => (#- xs.map(f) -#)

concat :: List a -> List a -> List a
export concat = (xs1, xs2) => (#- xs1.concat(xs2) -#)

append :: a -> List a -> List a
export append = (v, xs) => (#- [...xs, v] -#)

last :: List a -> a
export last = (xs) => (#- xs.slice(-1)[0] -#)

init :: List a -> List a
export init = (xs) => (#- xs.slice(0, -1) -#)

nth :: Number -> List a -> Maybe a
export nth = (i, xs) => (#- {
  const x = xs[i];
  return x === undefined
    ? Nothing
    : Just(x);
} -#)

reduceR :: (a -> b -> a) -> a -> List b -> a
export reduceR = (f, initial, xs) => (#- xs.reduceRight(f, initial) -#)

reduceL :: (a -> b -> a) -> a -> List b -> a
export reduceL = (f, initial, xs) => (#- xs.reduce(f, initial) -#)

reduce :: (a -> b -> a) -> a -> List b -> a
export reduce = reduceL

filter :: (a -> Boolean) -> List a -> List a
export filter = (predicate, xs) => (#- xs.filter(predicate) -#)

find :: (a -> Boolean) -> List a -> Maybe a
export find = (predicate, xs) => (#- {
  const found = xs.find(predicate);
  if (found === undefined) {
    return Nothing
  }
  else {
    return Just(found)
  }
} -#)

len :: List a -> Number
export len = (xs) => (#- xs.length -#)

reject :: (a -> Boolean) -> List a -> List a
export reject = (predicate, xs) => (#- xs.filter(Fun.complement(predicate)) -#)

slice :: Number -> Number -> List a -> List a
export slice = (start, end, xs) => (#- xs.slice(start, end) -#)

isEmpty :: List a -> Boolean
export isEmpty = (xs) => len(xs) == 0

uniqueBy :: (a -> a -> Boolean) -> List a -> List a
export uniqueBy = (f, xs) => where(xs)
  is [curr, ...tail]:
    where(find(f(curr), tail)) {
      is Just _ : uniqueBy(f, tail)
      is Nothing: [curr, ...uniqueBy(f, tail)]
    }
  is [l]: [l]
  is _  : []

flatten :: List (List a) -> List a
export flatten = reduceL(concat, [])

zip :: List a -> List b -> List <a, b>
export zip = (as, bs) => where(<as, bs>)
  is <[a, ...ass], [b, ...bss]>: mappend([<a, b>], zip(ass, bss))
  is <[a], [b]>                : [<a, b>]
  is <[], []>                  : []
