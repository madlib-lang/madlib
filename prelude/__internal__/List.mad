import type { Comparison } from "Compare"
import type { Maybe } from "Maybe"

import { EQ, GT, LT } from "Compare"
import Function from "Function"
import { Just, Nothing } from "Maybe"
import {} from "Monad"
import { reduceLeft } from "__BUILTINS__"



/**
 * List utility functions.
 * In this module you'll find everything that is related to List and make working with lists convenient.
 */


/**
 * As with all implementations of `map`, transform each value contained in the List.
 * 
 * @since v0.0.6
 * @example
 * map((x) => x * 2, [1, 2, 3]) // [2, 4, 6]
 */
instance Functor List {
  map = (f, list) => where(list) {
    [a, ...xs] =>
      [f(a), ...map(f, xs)]

    [] =>
      []
  }
}


instance Applicative List {
  ap = (mf, ma) => pipe(
    map((f) => map(f, ma)),
    flatten,
  )(mf)

  pure = (x) => [x]
}

instance Monad List {
  chain = (f, xs) => pipe(
    map(f),
    flatten,
  )(xs)

  of = pure
}


instance Alternative List {
  aempty = []

  alt = mappend
}


/**
 * Given a mapping function that returns a Maybe, returns a list of mapped
 * elements, where Nothing values are discarded.
 *
 * @since 0.5.0
 * @example
 * mapMaybe((i) => i % 2 == 0 ? Just(i) : Nothing, [1, 2, 3, 4]) // [2, 4]
 */
mapMaybe :: (a -> Maybe b) -> List a -> List b
export mapMaybe = (f, list) => where(list) {
  [a, ...xs] =>
    where(f(a)) {
      Just(mapped) =>
        [mapped, ...mapMaybe(f, xs)]

      Nothing =>
        mapMaybe(f, xs)
    }

  [] =>
    []
}


forEach :: (a -> {}) -> List a -> {}
export forEach = (f, list) => where(list) {
  [a, ...xs] =>
    do {
      f(a)
      return forEach(f, xs)
    }

  [] =>
    {}
}


/**
 * Creates a list containing a value n times.
 *
 * @since 0.5.0
 * @example
 * repeat('a', 3) // ['a', 'b', 'c']
 */
repeat :: a -> Integer -> List a
export repeat = (a, count) => count <= 0 ? [] : [a, ...repeat(a, count - 1)]


/**
 * Creates a list containing n times the value returned by the mapping function,
 * which takes the index of the current element as parameter
 *
 * @since 0.5.0
 * @example
 * repeatWith((i) => show(i), 3) // ["0", "1", "2"]
 */
repeatWith :: (Integer -> a) -> Integer -> List a
export repeatWith = (f, count) => {
  helper = (index) => index >= count ? [] : [f(index), ...helper(index + 1)]

  return helper(0)
}


/**
 * Return a list of integers within the given range. The start
 * parameter is inclusive and the end parameter is exclusive.
 *
 * @since 0.12.0
 * @example
 * range(3, 3) // []
 * range(3, 5) // [3, 4]
 */
range :: Integer -> Integer -> List Integer
export range = (start, end) => repeatWith((i) => i + start, end - start)


/**
 * Maps a list with a function returning an Applicative and returns an
 * Applicative containing the List of all the transformed values.
 *
 * @since 0.11.0
 */
mapM :: Applicative m => (a -> m b) -> List a -> m (List b)
export mapM = (f, list) => {
  helper = (x, result) => pipe(
    map($, f(x)),
    ap($, result),
  )((x_, result_) => [x_, ...result_])

  return reduceRight(helper, pure([]), list)
}


/**
 * Constructor function that creates a list with length 1. It takes an item of any type, and returns a List of that type.
 *
 * @since 0.0.5
 * @example
 * singleton(1)   // [1]
 * singleton("1") // ["1"]
 */
singleton :: a -> List a
export singleton = pure


/**
 * Inserts the given list between all the lists contained in the second
 * parameter.
 *
 * @since 0.11.0
 * @example
 * intercalate(["and"], [["cats"], ["dogs"], ["rats"]])
 * // ["cats", "and", "dogs", "and", "rats"]
 */
intercalate :: List a -> List (List a) -> List a
export intercalate = (sep, list) => {
  helper = (acc, l) => where(l) {
    [a] =>
      concat(acc, a)

    [] =>
      acc

    [x, ...xs] =>
      helper(concat(acc, concat(x, sep)), xs)
  }

  return helper([], list)
}


/**
 * Inserts a value between all elements of a list.
 *
 * @since 0.0.5
 * @example
 * intercalate("and", ["cats", "dogs"]) // ["cats", "and", "dogs"]
 */
intersperse :: a -> List a -> List a
export intersperse = (a, xs) => where(xs) {
  [] =>
    []

  [one] =>
    [one]

  [one, two] =>
    [one, a, two]

  [one, ...rest] =>
    [one, a, ...intersperse(a, rest)]
}


/**
 * Inserts the result of the given function applied to the current element's index
 * between each element of the given list.
 *
 * @since 0.11.0
 * @example
 * intersperseWithIndex(show, ["cats", "dogs"]) // ["cats", "0", "dogs"]
 */
intersperseWithIndex :: (Integer -> a) -> List a -> List a
export intersperseWithIndex = (f, list) => {
  go :: Integer -> List a -> List a
  go = (i, xs) => where(xs) {
    [] =>
      []

    [one] =>
      [one]

    [one, two] =>
      [one, f(i), two]

    [one, ...rest] =>
      [one, f(i), ...go(i + 1, rest)]
  }

  return go(0, list)
}


/**
 * Applies a function to each item of a list. This function receives both the current element
 * and its index as parameters, and whatever is returned is used as the new element's value.
 *
 * @since 0.0.5
 * @example
 * mapWithIndex((x, i) => x ++ show(i), ["a", "b", "c"]) // ["a0", "b1", "c2"]
 */
mapWithIndex :: (a -> Integer -> b) -> List a -> List b
export mapWithIndex = (f, list) => {
  helper = (list_, index) => where(list_) {
    [] =>
      []

    [a, ...xs] =>
      [f(a, index), ...helper(xs, index + 1)]
  }

  return helper(list, 0)
}


/**
 * Merge two Lists together.
 *
 * @since 0.0.5
 * @example
 * concat([1, 2, 3], [4, 5, 6]) // [1, 2, 3, 4, 5, 6]
 */
concat :: List a -> List a -> List a
export concat = assoc


/**
 * Add an item to the end of a List.
 *
 * @since 0.0.5
 * @example
 * append(2, [1]) // [1, 2]
 */
append :: a -> List a -> List a
export append = (item, list) => where(list) {
  [] =>
    [item]

  [a, ...xs] =>
    [a, ...append(item, xs)]
}


/**
 * Safely access the last value in a List (wrapped in Just), or Nothing if the array is empty.
 *
 * @since 0.0.5
 * @example
 * last([1, 2, 3]) // Just(3)
 * last([])        // Nothing
 */
last :: List a -> Maybe a
export last = (list) => where(list) {
  [item] =>
    Just(item)

  [] =>
    Nothing

  [_, a, ...xs] =>
    last([a, ...xs])
}

/**
 * Safely access the first value in a List (wrapped in Just), or Nothing if the array is empty.
 *
 * @since 0.0.5
 * @example
 * first([1, 2, 3]) // Just(1)
 * first([])        // Nothing
 */
first :: List a -> Maybe a
export first = (list) => where(list) {
  [] =>
    Nothing

  [a, ..._] =>
    Just(a)
}

/**
 * Returns a List minus its last item.
 *
 * @since 0.0.5
 * @example
 * init([1, 2, 3]) // [1, 2]
 * init([])        // []
 */
init :: List a -> List a
export init = (list) => where(list) {
  [item] =>
    []

  [] =>
    []

  [a, ...xs] =>
    [a, ...init(xs)]
}

/**
 * Removes the first element of a list.
 * @since 0.0.5
 * @example
 * tail([1, 2, 3]) // [2, 3]
 * tail([])        // []
 */
tail :: List a -> List a
export tail = (list) => where(list) {
  [] =>
    []

  [a, ...xs] =>
    xs
}


/**
 * Safely access a value at a given index in a List (wrapped in Just), or Nothing.
 *
 * @since 0.0.5
 * @example
 * nth(1, [1, 2, 3]) // Just(2)
 * nth(3, [1, 2, 3]) // Nothing
 */
nth :: Integer -> List a -> Maybe a
export nth = (i, list) => where(list) {
  [] =>
    Nothing

  [a, ...xs] =>
    i == 0 ? Just(a) : nth(i - 1, xs)
}

/**
 * Set a value at a specific index
 */
set :: Integer -> a -> List a -> List a
export set = (n, x, list) => {
  _set = (j, l2) => where(l2) {
    [] =>
      []

    [a, ...xs] =>
      j == n ? [x, ...xs] : [a, ..._set(j + 1, xs)]
  }
  return _set(0, list)
}

/**
 * Set a value at a specific index, maybe
 */
setMaybe :: Integer -> Maybe a -> List a -> List a
export setMaybe = (n, m, list) => where(m) {
  Nothing =>
    list

  Just(x) =>
    set(n, x, list)
}

/**
 * Aggregate a single value by iterating over a list, from right-to-left.
 * Takes three parameters:
 *   - an aggregation function, which takes the current aggregated value and the next item in the list.
 *   - an initial value (which must share the same type as the value returned from the transformation function)
 *   - a List
 *
 * @since 0.0.5
 */
reduceRight :: (a -> b -> b) -> b -> List a -> b
export reduceRight = (f, acc, list) => pipe(
  reverse,
  reduceLeft((a, b) => f(b, a), acc),
)(list)


/**
 * Aggregate a single value by iterating over a list, from left-to-right.
 * Takes three parameters:
 *   - an aggregation function, which takes the current aggregated value and the next item in the list.
 *   - an initial value (which must share the same type as the value returned from the transformation function)
 *   - a List
 *
 * @since 0.0.5
 */
export reduceLeft


/**
 * Alias of [reduceL](/List/reduceL).
 * Aggregate a single value by iterating over a list, from left-to-right.
 * Takes three parameters:
 *
 *   - an aggregation function, which takes the current aggregated value and the next item in the list.
 *   - an initial value (which must share the same type as the value returned from the transformation function)
 *   - a List
 *
 * @since 0.0.5
 * @example
 * reduce((a, b) => a + b, 0, [1, 2, 3]) // 6
 */
reduce :: (a -> b -> a) -> a -> List b -> a
export reduce = reduceLeft


/**
 * Reduces a list of values with a reducer function that returns a
 * Monad, and returns a Monad of that value.
 *
 * @since 0.11.0
 */
reduceM :: Monad m => (b -> a -> m b) -> b -> List a -> m b
export reduceM = (f, acc, list) => where(list) {
  [] =>
    of(acc)

  [a, ...xs] =>
    chain((v) => reduceM(f, v, xs), f(acc, a))
}


/**
 * Iterate over a List, selecting only values which are matched by predicate function.
 *
 * @since 0.0.5
 * @example
 * filter((a) => a % 2 == 0, [1, 2, 3, 4, 5, 6]) // [2, 4, 6]
 */
filter :: (a -> Boolean) -> List a -> List a
export filter = (predicate, list) => where(list) {
  [] =>
    []

  [a, ...xs] =>
    predicate(a) ? [a, ...filter(predicate, xs)] : filter(predicate, xs)
}


/**
 * Iterate over a List, selecting only values which are not matched by a predicate function.
 * This is the complement of `filter`.
 *
 * @since 0.0.5
 * @example
 * reject((a) => a % 2 == 0, [1, 2, 3, 4, 5, 6]) // [1, 3, 5]
 */
reject :: (a -> Boolean) -> List a -> List a
export reject = (predicate, list) => filter(Function.complement(predicate), list)


/**
 * Safely access the first element in a List for which a given
 * predicate function returns true; returning Just the found value or Nothing.
 *
 * @since 0.0.5
 * @example
 * find((a) => a % 2 == 0, [1, 2, 3, 4, 5, 6]) // Just(2)
 * find((a) => a == 0, [1, 2, 3, 4, 5, 6])     // Nothing
 */
find :: (a -> Boolean) -> List a -> Maybe a
export find = (predicate, list) => where(list) {
  [] =>
    Nothing

  [a, ...xs] =>
    predicate(a) ? Just(a) : find(predicate, xs)
}


/**
 * Get the length of a List.
 *
 * @since 0.0.5
 * @example
 * length([1, 2, 3]) // 3
 */
length :: List a -> Integer
export length = (list) => {
  helper = (list_, count) => where(list_) {
    [] =>
      count

    [a, ...xs] =>
      helper(xs, count + 1)
  }

  return helper(list, 0)
}


/**
 * Cut a contiguous segment from a List, from start index to end index.
 * @since 0.0.5
 */
slice :: Integer -> Integer -> List a -> List a
export slice = (start, end, list) => {
  len = length(list)
  helper = (start_, end_, list_) => where(list_) {
    [] =>
      []

    [a, ...xs] =>
      if (start_ == 0 && end_ >= 0) {
        [a, ...helper(0, end_ - 1, xs)]
      } else if (start_ > 0) {
        helper(start_ - 1, end_ - 1, xs)
      } else {
        []
      }
  }

  realStart = start < 0 ? start + len : start

  realEnd = end == 0 ? len - 1 : end < 0 ? end + len - 1 : end

  return helper(realStart, realEnd, list)
}


/**
 * Test whether a given List has no elements.
 *
 * @since 0.0.5
 */
isEmpty :: List a -> Boolean
export isEmpty = (xs) => where(xs) {
  [] =>
    true

  _ =>
    false
}


/**
 * Using a comparison function, select values which are distinct. 
 *
 * @since 0.0.5
 * @example
 * uniqueBy(
 *   (a, b) => a.id == b.id,
 *   [
 *     { id: 1, name: "John" },
 *     { id: 2, name: "Paul" },
 *     { id: 1, name: "George" },
 *     { id: 4, name: "Ringo" }
 *   ]
 * )
 * // [{ id: 1, name: "John" }, { id: 2, name: "Paul" }, { id: 4, name: "Ringo" }]
 */
uniqueBy :: (a -> a -> Boolean) -> List a -> List a
export uniqueBy = (f) => reduce(
  (result, elem) => where(find(f(elem), result)) {
    Just(_) =>
      result

    Nothing =>
      append(elem, result)
  },
  [],
)

descending :: (a -> a -> Comparison) -> a -> List a -> List a -> List (List a)
descending = (compareFn, a, as, xs) => where(xs) {
  [b, ...bs] =>
    compareFn(a, b) == GT
      ? descending(compareFn, b, [a, ...as], bs)
      : [[a, ...as], ...sequences(compareFn, xs)]

  _ =>
    [[a, ...as], ...sequences(compareFn, xs)]
}


ascending :: (a -> a -> Comparison) -> a -> (List a -> List a) -> List a -> List (List a)
ascending = (compareFn, a, as, xs) => where(xs) {
  [b, ...bs] =>
    compareFn(a, b) != GT
      ? ascending(compareFn, b, (ys) => as([a, ...ys]), bs)
      : [as([a]), ...sequences(compareFn, xs)]

  _ =>
    [as([a]), ...sequences(compareFn, xs)]
}


sequences :: (a -> a -> Comparison) -> List a -> List (List a)
sequences = (compareFn, list) => where(list) {
  [a, b, ...xs] =>
    compareFn(a, b) == GT
      ? descending(compareFn, b, [a], xs)
      : ascending(compareFn, b, (l) => [a, ...l], xs)

  xs =>
    [xs]
}


/**
 * Sorts a list based on a comparison function.
 *
 * @since 0.11.0
 */
sortBy :: (a -> a -> Comparison) -> List a -> List a
export sortBy = (compareFn, list) => {
  merge :: List a -> List a -> List a
  merge = (listA, listB) => where(#[listA, listB]) {
    #[[a, ...as], [b, ...bs]] =>
      compareFn(a, b) == GT ? [b, ...merge(listA, bs)] : [a, ...merge(as, listB)]

    #[[], bs] =>
      bs

    #[as, []] =>
      as
  }

  mergePairs :: List (List a) -> List (List a)
  mergePairs = (l) => where(l) {
    [a, b, ...xs] =>
      [merge(a, b), ...mergePairs(xs)]

    xs =>
      xs
  }

  mergeAll :: List (List a) -> List a
  mergeAll = (l) => where(l) {
    [x] =>
      x

    xs =>
      mergeAll(mergePairs(xs))
  }

  return pipe(
    sequences(compareFn),
    mergeAll,
  )(list)
}


/**
 * Sorts a list of Comparable values in ascendant order.
 *
 * @since 0.11.0
 * @example
 * sort([3, 1, 2]) // [1, 2, 3]
 */
sort :: Comparable a => List a -> List a
export sort = sortBy(compare)


/**
 * Sorts a list of Comparable values in ascendant order.
 *
 * @since 0.11.0
 * @example
 * sortAsc([3, 1, 2]) // [1, 2, 3]
 */
sortAsc :: Comparable a => List a -> List a
export sortAsc = sort


reverseCmp :: Comparison -> Comparison
reverseCmp = (cmp) => where(cmp) {
  LT =>
    GT

  GT =>
    LT

  EQ =>
    EQ
}

/**
 * Sorts a list of Comparable values in descendant order.
 *
 * @since 0.11.0
 * @example
 * sortDesc([3, 1, 2]) // [3, 2, 1]
 */
sortDesc :: Comparable a => List a -> List a
export sortDesc = sortBy((a, b) => reverseCmp(compare(a, b)))


/**
 * Remove nested Lists from a given List, one level deep. 
 *
 * @since 0.0.5
 */
flatten :: List (List a) -> List a
export flatten = (list) => where(list) {
  [] =>
    []

  [[], ...vs] =>
    flatten(vs)

  [[x, ...xs], ...vs] =>
    [x, ...flatten([xs, ...vs])]
}


/**
 * Take two lists and combine them pair-wise, such that the elements of List x become the first value
 * of the resulting Tuple, and the elements of List y become the the second value per element.
 *
 * @since 0.0.5
 * @example
 * zip(["a", "b", "c"], [1, 2, 3]) // [#["a", 1], #["b", 2], #["c", 3]]
 */
zip :: List a -> List b -> List #[a, b]
export zip = (as, bs) => where(#[as, bs]) {
  #[[a, ...aa], [b, ...bb]] =>
    [#[a, b], ...zip(aa, bb)]

  #[_, _] =>
    []
}


/**
 * Returns true if the given list contains the given element.
 *
 * @since 0.6.0
 */
includes :: Eq a => a -> List a -> Boolean
export includes = (x, list) => where(list) {
  [] =>
    false

  [a, ...xs] =>
    a == x || includes(x, xs)
}
// a == x ? true : includes(x, xs)



/**
 * Drops n items from the given list.
 *
 * @since 0.11.0
 * @example
 * drop(2, [1, 2, 3, 4, 5, 6]) // [3, 4, 5, 6]
 */
drop :: Integer -> List a -> List a
export drop = (n, list) => slice(n, 0, list)


/**
 * Drops n last items from the given list.
 *
 * @since 0.11.0
 * @example
 * dropLast(2, [1, 2, 3, 4, 5, 6]) // [1, 2, 3, 4]
 */
dropLast :: Integer -> List a -> List a
export dropLast = (n, list) => slice(0, -n, list)


/**
 * Takes n items from the given list.
 *
 * @since 0.11.0
 * @example
 * take(2, [1, 2, 3, 4, 5, 6]) // [1, 2]
 */
take :: Integer -> List a -> List a
export take = (n, list) => slice(0, n - 1, list)


/**
 * Takes n last items from the given list.
 *
 * @since 0.11.0
 * @example
 * takeLast(2, [1, 2, 3, 4, 5, 6]) // [5, 6]
 */
takeLast :: Integer -> List a -> List a
export takeLast = (n, list) => slice(-n, 0, list)


/**
 * Returns a list without all items from the start of the given list
 * for which the predicate evaluates to true until it returns false.
 *
 * @since 0.11.0
 * @example
 * dropWhile((x) => x < 5, [1, 2, 3, 4, 5, 6]), [5, 6])
 */
dropWhile :: (a -> Boolean) -> List a -> List a
export dropWhile = (predicate, list) => where(list) {
  [] =>
    []

  [a, ...xs] =>
    predicate(a) ? dropWhile(predicate, xs) : [a, ...xs]
}


/**
 * Returns a list containing all items from the start of the given list
 * for which the predicate evaluates to true until it returns false and
 * skips all items after.
 *
 * @since 0.11.0
 * @example
 * takeWhile((x) => x < 5, [1, 2, 3, 4, 5, 6]) // [1, 2, 3, 4]
 */
takeWhile :: (a -> Boolean) -> List a -> List a
export takeWhile = (predicate, list) => where(list) {
  [] =>
    []

  [a, ...xs] =>
    predicate(a) ? [a, ...takeWhile(predicate, xs)] : []
}


/**
 * Reverses the given list.
 *
 * @since 0.5.0
 * @example
 * reverse([1, 2, 3])       // [3, 2, 1]
 * reverse(reverse(a)) == a // true
 */
reverse :: List a -> List a
export reverse = (list) => {
  helper :: List a -> List a -> List a
  helper = (acc, l) => where(l) {
    [h, ...xs] =>
      helper([h, ...acc], xs)

    [] =>
      acc
  }

  return helper([], list)
}


/**
 * Returns a list of all the tails for the given list
 *
 * @since 0.18.6
 * @example
 * tails([1, 2, 3]) // [[1, 2, 3], [2, 3], [3], []]
 */
tails :: List a -> List (List a)
export tails = (list) => where(list) {
  [] =>
    [[]]

  [x, ...xs] =>
    [list, ...tails(xs)]
}


/**
 * Returns true if the second list starts with the first one.
 *
 * @since 0.18.6
 * @example
 * startsWith([1, 2, 3], [1, 2, 3, 4, 5, 6]) // true
 * startsWith([2, 3, 4], [1, 2, 3, 4, 5, 6]) // false
 */
startsWith :: Eq a => List a -> List a -> Boolean
export startsWith = (subset, list) => where(#[subset, list]) {
  #[[], _] =>
    true

  #[_, []] =>
    false

  #[[x, ...xs], [y, ...ys]] =>
    x == y && startsWith(xs, ys)
}


/**
 * Returns true if the first list is contained in the second one.
 *
 * @since 0.18.6
 * @example
 * contains([2, 3, 4], [1, 2, 3, 4, 5, 6]) // true
 * contains([2, 8, 5], [1, 2, 3, 4, 5, 6]) // false
 */
contains :: Eq a => List a -> List a -> Boolean
export contains = (needle, haystack) => Function.any(startsWith(needle), tails(haystack))


dropLength :: List a -> List b -> List b
dropLength = (listA, listB) => where(#[listA, listB]) {
  #[[], ys] =>
    ys

  #[_, []] =>
    []

  #[[_, ...xs], [_, ...ys]] =>
    dropLength(xs, ys)
}


/**
 * A version of dropLength that returns Nothing if the second list runs out of
 * elements before the first.
 * 
 * >>> dropLengthMaybe [1..] [1,2,3]
 * Nothing
 */
dropLengthMaybe :: List a -> List b -> Maybe (List b)
dropLengthMaybe = (listA, listB) => where(#[listA, listB]) {
  #[[], ys] =>
    Just(ys)

  #[_, []] =>
    Nothing

  #[[_, ...xs], [_, ...ys]] =>
    dropLengthMaybe(xs, ys)
}


/**
 * Returns true if the second list ends with the first one.
 *
 * @since 0.18.6
 * @example
 * endsWith([4, 5, 6], [1, 2, 3, 4, 5, 6]) // true
 * endsWith([4, 5], [1, 2, 3, 4, 5, 6])    // false
 */
endsWith :: Eq a => List a -> List a -> Boolean
export endsWith = (subset, list) => where(dropLengthMaybe(subset, list)) {
  Just(delta) =>
    subset == dropLength(delta, list)

  _ =>
    false
}


groupBy :: (a -> a -> Boolean) -> List a -> List (List a)
export groupBy = (_eq, list) => {
  go = (p, z, l) => do {
    return where(l) {
      [x, ...xs] =>
        where(go(p, x, xs)) {
          #[ys, zs] =>
            p(z, x) ? #[[x, ...ys], zs] : #[[], [[x, ...ys], ...zs]]
        }

      _ =>
        #[[], []]
    }
  }

  return where(list) {
    [] =>
      []

    [x, ...xs] =>
      where(go(_eq, x, xs)) {
        #[_ys, _zs] =>
          [[x, ..._ys], ..._zs]
      }
  }
}


upsertWith :: (a -> Boolean) -> (Maybe a -> a) -> List a -> List a
export upsertWith = (pred, updater, list) => where(list) {
  [x, ...xs] =>
    pred(x) ? [updater(Just(x)), ...xs] : [x, ...upsertWith(pred, updater, xs)]

  [] =>
    [updater(Nothing)]
}

/**
 * Given a predicate and a list of values it returns true if the predicate returns
 * true for any of the values in the list.
 *
 * @since 0.23.1
 * @example
 * any((x) => x > 10, [1, 2, 3]) // false
 * any((x) => x < 10, [1, 2, 3]) // true
 */
any :: (a -> Boolean) -> List a -> Boolean
export any = (pred, list) => where(list) {
  [] =>
    false

  [x, ...xs] =>
    pred(x) || any(pred, xs)
}

/**
 * Given a predicate and a list of values it returns true if the predicate returns
 * true for all values in the list.
 *
 * @since 0.23.1
 * @example
 * all((x) => x > 2, [1, 2, 3]) // false
 * all((x) => x < 4, [1, 2, 3]) // true
 */
all :: (a -> Boolean) -> List a -> Boolean
export all = (predicate, list) => where(list) {
  [] =>
    true

  [x, ...xs] =>
    predicate(x) && all(predicate, xs)
}

/**
 * Cut a given array at the specificed index and return a tuple of #[beforeIndex, afterIndex] slices
 * @since 0.23.1
 * @example
 * cut(5, range(1, 11)) // #[ [1,2,3,4,5], [6,7,8,9,10]]
 */
cut :: Integer -> List a -> Maybe #[List a, List a]
export cut = (a, xs) => {
  len = length(xs)
  return if (a <= len) {
    Just(#[slice(0, a - 1, xs), slice(a, len, xs)])
  } else {
    Nothing
  }
}
