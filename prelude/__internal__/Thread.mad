import type { Wish } from "Wish"

import { Wish } from "Wish"



writeLock :: a -> {}
export writeLock = extern "madlib__process__writeLock"

writeUnlock :: a -> {}
export writeUnlock = extern "madlib__process__writeUnlock"

readLock :: a -> {}
export readLock = extern "madlib__process__readLock"

readUnlock :: a -> {}
export readUnlock = extern "madlib__process__readUnlock"

mutexLock :: a -> {}
export mutexLock = extern "madlib__process__mutexLock"

mutexUnlock :: a -> {}
export mutexUnlock = extern "madlib__process__mutexUnlock"

threadFFI :: ((e -> {}) -> (a -> {}) -> {}) -> (e -> {}) -> (a -> {}) -> {}
threadFFI = extern "madlib__process__thread"

create :: ((e -> {}) -> (a -> {}) -> {}) -> Wish e a
export create = (handler) => Wish((bad, good) => { threadFFI(handler, bad, good) })
