import type { Maybe } from "Maybe"
import type { Wish } from "Wish"

import {} from "ByteArray"
import List from "List"
import { Nothing } from "Maybe"
import { Just } from "Maybe"
import {} from "Number"
import String from "String"
import { Wish } from "Wish"


#iftarget js
import { isJust } from "Maybe"

#-
{Node}
import prelude_http_https from "https"
import prelude_http_http from "http"
import prelude_http_zlib from "zlib"
{/Node}
-#

#endif

/**
 * Type alias for the http status code from a response
 *
 * @since 0.11.0
 */
export alias Status = Integer
export BadRequest = 400
export Unauthorized = 401
export PaymentRequired = 402
export NotFound = 404
export OK = 200

/**
 * Http header, the unique constructor takes the header name as first parameter
 * and the value as second parameter
 *
 * @since 0.11.0
 * @example
 * Header("content-encoding", "gzip")
 */
export type Header = Header(String, String)


/**
 * Type representing the http method of a request
 *
 * @since 0.11.0
 */
export type Method = CONNECT | DELETE | GET | HEAD | OPTIONS | PATCH | POST | PUT | TRACE


/**
 * Type alias for the response record, representing a http response.
 * The body field is parameterized and the type of the body will most
 * likely be ByteArray or String, depending on which flavor of the
 * request functions you use and what kind of data you expect.
 *
 * @since 0.11.0
 */
export alias Response a = { body :: a, headers :: List Header, status :: Status, }


/**
 * Retrieves all the headers of a given name from a Response record.
 *
 * @since 0.11.0
 */
getHeader :: String -> Response a -> List Header
export getHeader = (headerName, response) => pipe(
  .headers,
  List.filter(where { Header(name, _) => String.toLower(name) == String.toLower(headerName) })
)(response)


// ----- Error ------------------------------------

/**
 * Type representing client errors such as BadUrl.
 *
 * @since 0.11.0
 */
export type ClientError
  // libcurl 9
  = AccessDenied
  // libcurl 6
  | AddressNotFound
  // libcurl 61
  | BadTransferEncoding
  // libcurl 3
  | BadUrl(String)
  // libcurl 7
  | ConnectionFailed
  // libcurl 16, 92
  | Http2FramingError
  // libcurl 18
  | IncompleteResponse
  // all libcurl errors not fitting the other constructors 
  | InternalError
  // libcurl 58
  | InvalidSSLCertificate
  // libcurl 8
  | MalformedResponse
  // libcurl 4
  | NotSupported
  // libcurl 35
  | SSLConnectionFailed
  // libcurl 53
  | SSLEngineNotFound
  // libcurl 66
  | SSLInitializationFailed
  // libcurl 28
  | Timeout
  // libcurl 47
  | TooManyRedirects
  // libcurl 5
  | UnresolvedProxy
  // libcurl 1
  | UnsupportedProtocol


/**
 * General Error type that can either be a BadResponse, in which case the request
 * has been performed but responded with a status code >= 400, or a ClientError,
 * in which case no request has been issued because the request was not correct.
 *
 * @since 0.11.0
 */
export type Error a = BadResponse(Response a) | ClientError(ClientError)


/**
 * Type alias representing requests. The body is optional and is thus a Maybe a,
 * where the body will most likely be a ByteArray or String, depending on what
 * kind of request you perform.
 *
 * @since 0.11.0
 */
export alias Request a = {
  body :: Maybe a,
  headers :: List Header,
  method :: Method,
  url :: String,
}


/**
 * Returns a string representation of a Method value.
 *
 * @since 0.11.0
 */
methodStr :: Method -> String
export methodStr = where {
  GET =>
    "GET"

  POST =>
    "POST"

  PUT =>
    "PUT"

  DELETE =>
    "DELETE"

  PATCH =>
    "PATCH"

  HEAD =>
    "HEAD"

  OPTIONS =>
    "OPTIONS"

  CONNECT =>
    "CONNECT"

  TRACE =>
    "TRACE"
}


#iftarget js
#-
const prelude_http_buildHeaderObj = (headerItems) => {
  let headerObj = {}
  while (headerItems !== null) {
    const k = headerItems.v.__args[0]
    const v = headerItems.v.__args[1]

    headerObj[k] = v
    headerItems = headerItems.n
  }
  
  return headerObj
}

{Node}
const prelude_http_capitalizeHeaderName = (input) => input.replace(/(^|[\s-])\S/g, (match) => {
  return match.toUpperCase();
});
{/Node}
-#


/**
 * Generic function to perform http requests with a String body for the request and the response
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, request({
 *   body: "Some data",
 *   headers: [Header("Accept", "text/plain")],
 *   method: GET,
 *   url: "https://some.url",
 * }))
 */
_request :: (Maybe String -> Boolean) -> Request String -> Wish (Error String) (Response String)
_request = (_isJust, config) => Wish(
  (bad, good) => #-{
    {Browser}
      let headers = config.headers
      const xhr = new XMLHttpRequest();
      xhr.open(config.method.__constructor, config.url)
      xhr.responseType = "arraybuffer"

      while (headers !== null) {
        xhr.setRequestHeader(headers.v.__args[0], headers.v.__args[1])
        headers = headers.n
      }

      if (_isJust(config.body)) {
        xhr.send(config.body.__args[0])
      } else {
        xhr.send()
      }

      xhr.onerror = (err) => {
        // TODO: need to check err and build a correct error here
        return bad({ __constructor: "ClientError", __args: [{ __constructor: "InternalError", __args: [] }]})
      }

      xhr.onload = () => {
        const contentType = xhr.getResponseHeader('Content-Type')
          ? xhr.getResponseHeader('Content-Type').split(";")[0]
          : "text/plain"
        const headerString = xhr.getAllResponseHeaders()
        const headerLines = headerString.split("\r\n")
        const responseHeaders = headerLines
          .map((line) => line
            .split(":")
            .map((s) => s.trim())
          )
          .filter(s => s.length == 2)
          .map(([key, value]) => ({ __constructor: "Header", __args: [key, value] }))

        const headersList = __jsArrayToList__(responseHeaders)

        const buffer = xhr.response
        const ui8 = new Uint8Array(buffer)

        if (xhr.status >= 400) {
          bad({ __constructor: "BadResponse", __args: [{ body: new TextDecoder().decode(ui8), status: xhr.status, headers: headersList }] })
        } else {
          good({ body: new TextDecoder().decode(ui8), status: xhr.status, headers: headersList })
        }
      }

      return () => {
        xhr.abort()
      }
    {/Browser}
    {Node}
      const headers = prelude_http_buildHeaderObj(config.headers)
      let reqFn = prelude_http_http.request
      const protocol = config.url.split("://")[0]
      let isDone = false

      if (protocol === "https") {
        reqFn = prelude_http_https.request
      } else if (protocol !== "http") {
        return bad({
          __constructor: "ClientError",
          __args: [{
            __constructor: "BadUrl",
            __args: [`Invalid protocol '${protocol}'`],
          }],
        })
      }

      if (_isJust(config.body)) {
        headers["Content-Length"] = config.body.__args[0].length
      }

      const req = reqFn(config.url, { method: config.method.__constructor, headers }, (response) => {
        const contentType = response.headers["content-type"]
          ? response.headers["content-type"].split(";")[0]
          : "text/plain"

        let chunks = []
        let responseHeaders = Object.keys(response.headers).flatMap(key => {
            const value = response.headers[key]
            if (Array.isArray(value)) {
              return value.map(v => ({ __constructor: "Header", __args: [prelude_http_capitalizeHeaderName(key), v] }))
            } else {
              return ({ __constructor: "Header", __args: [prelude_http_capitalizeHeaderName(key), value] })
            }
          })

        response.on('data', (chunk) => {
          chunks.push(Buffer.from(chunk, 'binary'));
        });

        const headersList = __jsArrayToList__(responseHeaders)

        response.on('end', () => {
          isDone = true;
          const buffer = Buffer.concat(chunks)
          const responseBody = (response.headers["content-encoding"] === "gzip")
            ? prelude_http_zlib.gunzipSync(buffer)
            : buffer
          if (response.statusCode >= 400) {
            bad({ __constructor: "BadResponse", __args: [{ body: responseBody.toString(), status: response.statusCode, headers: headersList }] })
          } else {
            if (response.headers["content-encoding"] === "gzip") {
              good({ body: responseBody.toString(), status: response.statusCode, headers: headersList })
            } else {
              good({ body: responseBody.toString(), status: response.statusCode, headers: headersList })
            }
          }
        });
      });

      if (_isJust(config.body)) {
        req.write(config.body.__args[0])
      }

      req.on('error', (err) => {
        if (!isDone && err.name !== "AbortError") {
          bad({ __constructor: "ClientError", __args: [{ __constructor: "InternalError", __args: [] }] })
        }
      })
      req.end();

      return () => {
        req.abort()
      }
    {/Node}

  }-#
)


request :: Request String -> Wish (Error String) (Response String)
export request = (req) => pipe(
  _request(isJust),
  chain((response) =>
    if (response.status == 302) {
      where (getHeader("location", response)) {
        [Header(_, nextUrl)] =>
          _request(isJust, { ...req, url: nextUrl })

        _ =>
          of(response)
      }
    } else {
      of(response)
    }
  )
)(req)

/**
 * Generic function to perform http requests with a ByteArray body for the request and the response
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, request({
 *   body: ByteArray.fromString("Some data"),
 *   headers: [Header("Accept", "text/plain")],
 *   method: GET,
 *   url: "https://some.url",
 * }))
 */
_requestBytes :: (Maybe ByteArray -> Boolean) -> Request ByteArray -> Wish (Error ByteArray) (Response ByteArray)
export _requestBytes = (_isJust, config) => Wish(
  (bad, good) => #-{
    {Browser}
      let headers = config.headers
      const xhr = new XMLHttpRequest();
      xhr.open(config.method.__constructor, config.url)
      xhr.responseType = "arraybuffer"

      while (headers !== null) {
        xhr.setRequestHeader(headers.v.__args[0], headers.v.__args[1])
        headers = headers.n
      }

      if (isJust(config.body)) {
        xhr.send(config.body.__args[0])
      } else {
        xhr.send()
      }

      xhr.onerror = (err) => {
        // TODO: need to check err and build a correct error here
        return bad({ __constructor: "ClientError", __args: [{ __constructor: "InternalError", __args: [] }] })
      }

      xhr.onload = () => {
        const contentType = xhr.getResponseHeader('Content-Type')
          ? xhr.getResponseHeader('Content-Type').split(";")[0]
          : "text/plain"
        const headerString = xhr.getAllResponseHeaders()
        const headerLines = headerString.split("\n")
        const responseHeaders = headerLines
          .map((line) => line
            .split(":")
            .map((s) => s.trim())
          )
          .filter(s => s.length == 2)
          .map(([key, value]) => ({ __constructor: "Header", __args: [key, value] }))

        let current = {}
        let headersList = current
        if (responseHeaders.length === 0) {
          headerList = null
        } else {
          responseHeaders.forEach((item) => {
            current = current.n = { v: item, n: null }
          })
          headersList = headersList.n
        }

        const buffer = xhr.response
        const ui8 = new Uint8Array(buffer)

        if (xhr.status >= 400) {
          bad({ __constructor: "BadResponse", __args: [{ body: ui8, status: xhr.status, headers: headersList }] })
        } else {
          good({ body: ui8, status: xhr.status, headers: headersList })
        }
      }

      return () => {
        xhr.abort()
      }
    {/Browser}
    {Node}
      const headers = prelude_http_buildHeaderObj(config.headers)
      let reqFn = prelude_http_http.request
      const protocol = config.url.split("://")[0]
      let isDone = false

      if (protocol === "https") {
        reqFn = prelude_http_https.request
      } else if (protocol !== "http") {
        return bad({
          __constructor: "ClientError",
          __args: [{
            __constructor: "BadUrl",
            __args: [`Invalid protocol '${protocol}'`],
          }],
        })
      }

      if (_isJust(config.body)) {
        headers["Content-Length"] = config.body.__args[0].length
      }

      const req = reqFn(config.url, { method: config.method.__constructor, headers }, (response) => {
        const contentType = response.headers["content-type"]
          ? response.headers["content-type"].split(";")[0]
          : "text/plain"

        let chunks = []
        let headers = Object.keys(response.headers).flatMap(key => {
            const value = response.headers[key]
            if (Array.isArray(value)) {
              return value.map(v => ({ __constructor: "Header", __args: [prelude_http_capitalizeHeaderName(key), v] }))
            } else {
              return ({ __constructor: "Header", __args: [prelude_http_capitalizeHeaderName(key), value] })
            }
          })

        let headersList = __jsArrayToList__(headers)

        response.on('data', (chunk) => {
          chunks.push(Buffer.from(chunk, 'binary'));
        });

        response.on('end', () => {
          isDone = true;
          const buffer = Buffer.concat(chunks)
          const ui8 = new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength / Uint8Array.BYTES_PER_ELEMENT)
          const responseBody = (response.headers["content-encoding"] === "gzip")
            ? prelude_http_zlib.gunzipSync(ui8)
            : ui8

          if (response.statusCode >= 400) {
            bad({ __constructor: "BadResponse", __args: [{ body: responseBody, status: response.statusCode, headers: headersList }] })
          } else {
            good({ body: responseBody, status: response.statusCode, headers: headersList })
          }
        });
      });

      if (_isJust(config.body)) {
        req.write(config.body.__args[0])
      }

      req.on('error', (err) => {
        // TODO: need to check error and build it correctly
        if (!isDone && err.name !== "AbortError") {
          bad({ __constructor: "ClientError", __args: [{ __constructor: "InternalError", __args: [] }] })
        }
      })
      req.end();
    {/Node}

    return () => {
      req.abort()
    }
  }-#
)


// TODO: chain and look if status code is 302 -> request whatever is in location header
requestBytes :: Request ByteArray -> Wish (Error ByteArray) (Response ByteArray)
export requestBytes = (req) => pipe(
  _requestBytes(isJust),
  chain((response) =>
    if (response.status == 302) {
      where (getHeader("location", response)) {
        [Header(_, nextUrl)] =>
          _requestBytes(isJust, { ...req, url: nextUrl })

        _ =>
          of(response)
      }
    } else {
      of(response)
    }
  )
)(req)

#elseif llvm

type RequestId = __Id__

requestFFI :: Request String -> (Error String -> {}) -> (Response String -> {}) -> RequestId
requestFFI = extern "madlib__http__request"


cancelFFI :: RequestId -> {}
cancelFFI = extern "madlib__http__cancel"


/**
 * Generic function to perform http requests with a String body for the request and the response
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, request({
 *   body: "Some data",
 *   headers: [Header("Accept", "text/plain")],
 *   method: GET,
 *   url: "https://some.url",
 * }))
 */
request :: Request String -> Wish (Error String) (Response String)
export request = (config) => Wish((bad, good) => {
  id = requestFFI(config, bad, good)

  return () => {
    cancelFFI(id)
  }
})


requestBytesFFI :: Request ByteArray -> (Error ByteArray -> {}) -> (Response ByteArray -> {}) -> RequestId
requestBytesFFI = extern "madlib__http__requestBytes"


/**
 * Generic function to perform http requests with a ByteArray body for the request and the response
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, requestBytes({
 *   body: ByteArray.fromString("Some data"),
 *   headers: [Header("Accept", "text/plain")],
 *   method: GET,
 *   url: "https://some.url",
 * }))
 */
requestBytes :: Request ByteArray -> Wish (Error ByteArray) (Response ByteArray)
export requestBytes = (config) => Wish((bad, good) => {
  id = requestBytesFFI(config, bad, good)

  return () => {
    cancelFFI(id)
  }
})

#endif

/**
 * Function to perform a simple GET http request with a String body for the response
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, get("https://some.url"))
 */
get :: String -> Wish (Error String) (Response String)
export get = (url) => request({ method: GET, url, headers: [], body: Nothing, })


/**
 * Function to perform a simple GET http request with a ByteArray body for the response
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, getBytes("https://some.url"))
 */
getBytes :: String -> Wish (Error ByteArray) (Response ByteArray)
export getBytes = (url) => requestBytes({ method: GET, url, headers: [], body: Nothing, })


/**
 * Function to perform a GET http request with a String body for the response.
 * It also accepts a lit of headers.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, getWithHeaders("https://some.url", [Header("Accept", "text/plain")]))
 */
getWithHeaders :: String -> List Header -> Wish (Error String) (Response String)
export getWithHeaders = (url, headers) => request({ method: GET, url, headers, body: Nothing, })


/**
 * Function to perform a GET http request with a ByteArray body for the response.
 * It also accepts a lit of headers.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, getBytesWithHeaders("https://some.url", [Header("Accept", "text/plain")]))
 */
getBytesWithHeaders :: String -> List Header -> Wish (Error ByteArray) (Response ByteArray)
export getBytesWithHeaders = (url, headers) => requestBytes({
  method: GET,
  url,
  headers,
  body: Nothing,
})


/**
 * Function to perform a POST http request with a String body for the request and the response.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, post("https://some.url", "Some body"))
 */
post :: String -> String -> Wish (Error String) (Response String)
export post = (url, body) => request({ method: POST, url, headers: [], body: Just(body), })


/**
 * Function to perform a POST http request with a ByteArray body for the request and the response.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, postBytes("https://some.url", ByteArray.fromString("Some body")))
 */
postBytes :: String -> ByteArray -> Wish (Error ByteArray) (Response ByteArray)
export postBytes = (url, body) => requestBytes({
  method: POST,
  url,
  headers: [],
  body: Just(body),
})


/**
 * Function to perform a POST http request with a String body for the request and the response.
 * It also accepts a list of headers.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, postWithHeaders("https://some.url", "Some body", [Header("Accept", "text/plain")]))
 */
postWithHeaders :: String -> String -> List Header -> Wish (Error String) (Response String)
export postWithHeaders = (url, body, headers) => request({
  method: POST,
  url,
  headers,
  body: Just(body),
})


/**
 * Function to perform a POST http request with a ByteArray body for the request and the response.
 * It also accepts a list of headers.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, postBytesWithHeaders(
 *   "https://some.url",
 *   "Some body",
 *   [Header("Accept", "application/zip")]
 * ))
 */
postBytesWithHeaders :: String
-> ByteArray
-> List Header
-> Wish (Error ByteArray) (Response ByteArray)
export postBytesWithHeaders = (url, body, headers) => requestBytes({
  method: POST,
  url,
  headers,
  body: Just(body),
})


/**
 * Function to perform a PUT http request with a String body for the request and the response.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, put("https://some.url", "Some body"))
 */
put :: String -> String -> Wish (Error String) (Response String)
export put = (url, body) => request({ method: PUT, url, headers: [], body: Just(body), })


/**
 * Function to perform a PUT http request with a ByteArray body for the request and the response.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, putBytes("https://some.url", ByteArray.fromString("Some body")))
 */
putBytes :: String -> ByteArray -> Wish (Error ByteArray) (Response ByteArray)
export putBytes = (url, body) => requestBytes({ method: PUT, url, headers: [], body: Just(body), })


/**
 * Function to perform a PUT http request with a String body for the request and the response.
 * It also accepts a list of headers.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, putWithHeaders("https://some.url", "Some body", [Header("Accept", "text/plain")]))
 */
putWithHeaders :: String -> String -> List Header -> Wish (Error String) (Response String)
export putWithHeaders = (url, body, headers) => request({
  method: PUT,
  url,
  body: Just(body),
  headers,
})


/**
 * Function to perform a PUT http request with a ByteArray body for the request and the response.
 * It also accepts a list of headers.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, putBytesWithHeaders(
 *   "https://some.url",
 *   "Some body",
 *   [Header("Accept", "application/zip")]
 * ))
 */
putBytesWithHeaders :: String
-> ByteArray
-> List Header
-> Wish (Error ByteArray) (Response ByteArray)
export putBytesWithHeaders = (url, body, headers) => requestBytes({
  method: PUT,
  url,
  body: Just(body),
  headers,
})


/**
 * Function to perform a DELETE http request with a String body for the request and the response.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, delete("https://some.url", "Some body"))
 */
delete :: String -> String -> Wish (Error String) (Response String)
export delete = (url, body) => request({
  method: DELETE,
  url,
  headers: [],
  body: Just(body),
})


/**
 * Function to perform a DELETE http request with a ByteArray body for the request and the response.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, deleteBytes("https://some.url", ByteArray.fromString("Some body")))
 */
deleteBytes :: String -> ByteArray -> Wish (Error ByteArray) (Response ByteArray)
export deleteBytes = (url, body) => requestBytes({
  method: DELETE,
  url,
  headers: [],
  body: Just(body),
})


/**
 * Function to perform a DELETE http request with a String body for the request and the response.
 * It also accepts a list of headers.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, deleteWithHeaders("https://some.url", "Some body", [Header("Accept", "text/plain")]))
 */
deleteWithHeaders :: String -> String -> List Header -> Wish (Error String) (Response String)
export deleteWithHeaders = (url, body, headers) => request({
  method: DELETE,
  url,
  body: Just(body),
  headers,
})


/**
 * Function to perform a DELETE http request with a ByteArray body for the request and the response.
 * It also accepts a list of headers.
 *
 * @since 0.11.0
 * @example
 * fulfill(IO.log, IO.log, deleteBytesWithHeaders(
 *   "https://some.url",
 *   "Some body",
 *   [Header("Accept", "application/zip")]
 * ))
 */
deleteBytesWithHeaders :: String
-> ByteArray
-> List Header
-> Wish (Error ByteArray) (Response ByteArray)
export deleteBytesWithHeaders = (url, body, headers) => requestBytes({
  method: DELETE,
  url,
  body: Just(body),
  headers,
})
