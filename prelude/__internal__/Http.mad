import W from "Wish"
import type { Wish } from "Wish"
import { Wish } from "Wish"
import B from "Binary"
import type { Maybe } from "Maybe"
import { Just, Nothing, isJust } from "Maybe"
import S from "String"
import L from "List"
import type { Data } from "Data"
import { BinaryData, TextData } from "Data"

#-
{Node}
import https from "https"
import http from "http"
{/Node}
-#

alias Status = Number
export BadRequest = 400
export Unauthorized = 401
export PaymentRequired = 402
export OK = 200

export type Response = Response({ data :: Data, status :: Status })

export type Header = Header(String, String)

export type Method
  = GET
  | POST
  | PUT
  | DELETE
  | PATCH
  | HEAD
  | OPTIONS
  | CONNECT
  | TRACE

alias Request = {
  method  :: Method,
  url     :: String,
  headers :: List Header,
  body    :: Maybe Data
}

methodStr :: Method -> String
export methodStr = where {
  GET => "GET"

  POST => "POST"

  PUT => "PUT"

  DELETE => "DELETE"

  PATCH => "PATCH"

  HEAD => "HEAD"

  OPTIONS => "OPTIONS"

  CONNECT => "CONNECT"

  TRACE => "TRACE"
}

headerKey :: Header -> String
headerKey = where { Header(key, _) => key }

headerValue :: Header -> String
headerValue = where { Header(_, val) => val }

bodyLength :: Data -> Number
bodyLength = where {
  TextData(s) => S.len(s)
  BinaryData(bytes) => B.len(bytes)
}

#-
const buildHeaderObj = (headerItems) => {
  return headerItems.reduce((acc, item) => {
    const k = headerKey(item)
    const v = headerValue(item)

    return { ...acc, [k]: v }
  }, {});
}
-#

isBinary = (mimeType) => where(S.split("/", mimeType)) {
  ["text", _] =>
    false
  
  ["application", subType] =>
    !L.includes(
      subType,
      ["json", "ld+json", "x-httpd-php", "x-sh", "x-csh", "xhtml+xml", "xml"]
    )

  _ =>
    true
}


request :: Request -> Wish Response Response
export request = (config) => Wish((bad, good) => #-{
  {Browser}
    const headers = config.headers
    const xhr = new XMLHttpRequest();
    xhr.open(methodStr(config.method), config.url)
    xhr.responseType = "arraybuffer"

    headers.forEach((header) => {
      xhr.setRequestHeader(headerKey(header), headerValue(header))
    })

    if (isJust(config.body)) {
      xhr.send(config.body.__args[0].__args[0])
    } else {
      xhr.send()
    }

    xhr.onerror = (err) => {
      return bad(Response({ data: TextData("Unknown error"), status: xhr.status }))
    }

    xhr.onload = () => {
      const contentType = xhr.getResponseHeader('Content-Type')
        ? xhr.getResponseHeader('Content-Type').split(";")[0]
        : "text/plain"
      const isBinaryData = isBinary(contentType)

      const cb = xhr.status >= 400 ? bad : good
      const buffer = xhr.response
      const ui8 = new Uint8Array(buffer)

      if (isBinaryData) {
        cb(Response({ data: BinaryData(ui8), status: xhr.status }))
      }
      else {
        cb(Response({ data: TextData(new TextDecoder().decode(ui8)), status: xhr.status }))
      }
    }
  {/Browser}
  {Node}
    const headers = buildHeaderObj(config.headers)
    let reqFn = http.request
    const protocol = config.url.split("://")[0]

    if (protocol === "https") {
      reqFn = https.request
    } else if (protocol === "http") {
    } else {
      return bad(Response({ data: TextData(`Invalid protocol '${protocol}'`), status: 400 }))
    }

    if (isJust(config.body)) {
      headers["Content-Length"] = bodyLength(config.body.__args[0])
    }

    const req = reqFn(config.url, { method: methodStr(config.method), headers }, (response) => {
      if (response.statusCode === 302) {
        W.fulfill(bad)(good)(request({ ...config, url: response.headers.location }))
      }
      else {
        const contentType = response.headers["content-type"]
          ? response.headers["content-type"].split(";")[0]
          : "text/plain"
        const isBinaryData = isBinary(contentType)

        let chunks = isBinaryData ? [] : ""

        response.on('data', (chunk) => {
          if (isBinaryData) {
            chunks.push(chunk)
          }
          else {
            chunks = chunks + chunk
          }
        });

        response.on('end', () => {
          const cb = response.statusCode >= 400 ? bad : good
          if (isBinaryData) {
            const buffer = Buffer.concat(chunks)
            const ui8 = new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength / Uint8Array.BYTES_PER_ELEMENT)

            cb(Response({ data: BinaryData(ui8), status: response.statusCode }))
          }
          else {
            cb(Response({ data: TextData(chunks), status: response.statusCode }))
          }
        });
      }
    });

    if (isJust(config.body)) {
      req.write(config.body.__args[0].__args[0])
    }

    req.on('error', (err) => {
      bad({ data: TextData(err.message), status: 0 })
    })
    req.end();
  {/Node}
}-#)

requestWithBody :: Method -> String -> Data -> Wish Response Response
requestWithBody = (method, url, body) =>
  requestWithBodyAndHeaders(method, url, body, [])

requestWithBodyAndHeaders :: Method -> String -> Data -> List Header -> Wish Response Response
requestWithBodyAndHeaders = (method, url, body, headers) => request({
  method,
  url,
  body: Just(body),
  headers
})

get :: String -> Wish Response Response
export get = (url) => request({
  method: GET,
  url,
  headers: [],
  body: Nothing
})

getWithHeaders :: String -> List Header -> Wish Response Response
export getWithHeaders = (url, headers) => request({
  method: GET,
  url,
  headers,
  body: Nothing
})

post :: String -> Data -> Wish Response Response
export post = (url, body) => requestWithBody(POST, url, body)

postWithHeaders :: String -> Data -> List Header -> Wish Response Response
export postWithHeaders = (url, body, headers) =>
  requestWithBodyAndHeaders(POST, url, body, headers)

put :: String -> Data -> Wish Response Response
export put = (url, body) => requestWithBody(PUT, url, body)

putWithHeaders :: String -> Data -> List Header -> Wish Response Response
export putWithHeaders = (url, body, headers) =>
  requestWithBodyAndHeaders(PUT, url, body, headers)

delete :: String -> Data -> Wish Response Response
export delete = (url, body) => requestWithBody(DELETE, url, body)

deleteWithHeaders :: String -> Data -> List Header -> Wish Response Response
export deleteWithHeaders = (url, body, headers) =>
  requestWithBodyAndHeaders(DELETE, url, body, headers)

