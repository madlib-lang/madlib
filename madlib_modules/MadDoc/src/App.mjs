// file: /home/runner/work/madlib/madlib/.github/workflows/madlib_modules/MadDoc/src/App.mad
import {} from "./../../../__internals__.mjs"
import { JS } from "./State.mjs";
import Json from "./../../../.prelude/JsonParser.mjs";
import String from "./../../../.prelude/String.mjs";
import { Right, Left } from "./../../../.prelude/Either.mjs";
import { PopStateEvent, div, h2, className, onUrlChanged, syncAction, getUrl, text, empty, p, link, to, main, ul } from "./../../MadUI/src/Main.mjs";
import Url from "./../../../.prelude/Url.mjs";
import Maybe from "./../../../.prelude/Maybe.mjs";
import { Expression } from "./Views/Expression.mjs";
import { SideMenu } from "./Views/SideMenu.mjs";
import { Header } from "./Views/Header.mjs";
import { Breadcrumbs } from "./Views/Breadcrumbs.mjs";
import { Type } from "./Views/Type.mjs";
import { Alias } from "./Views/Alias.mjs";
import { Interface } from "./Views/Interface.mjs";
import { Instance } from "./Views/Instance.mjs";
import { parser } from "./Parser/Documentation.mjs";
import { processPath, getModulesToShow, ExpressionResult, TypeResult, AliasResult, InterfaceResult, InstanceResult, ModuleResult } from "./PathResolver.mjs";
import { renderMarkdown } from "./Markdown.mjs";

Inspect['Record_modulesf_0a878c9a5bcad27936b8b739fd384ff2e_pathf_1a878c9a5bcad27936b8b739fd384ff2e_searchf_2a878c9a5bcad27936b8b739fd384ff2e_targetf_3a878c9a5bcad27936b8b739fd384ff2e'] = {};
Inspect['Record_modulesf_0a878c9a5bcad27936b8b739fd384ff2e_pathf_1a878c9a5bcad27936b8b739fd384ff2e_searchf_2a878c9a5bcad27936b8b739fd384ff2e_targetf_3a878c9a5bcad27936b8b739fd384ff2e']['inspect'] = () => (Inspect_c392) => (Inspect_v385) => (Inspect_o378) => (Inspect_h371) => (__$a__ => `{ ` + `modules: ` + Inspect_h371.inspect()(__$a__.modules) + `, ` + `path: ` + Inspect_o378.inspect()(__$a__.path) + `, ` + `search: ` + Inspect_v385.inspect()(__$a__.search) + `, ` + `target: ` + Inspect_c392.inspect()(__$a__.target) + ` }`);
let docJson = `{\n  \"modules\": [\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Wish.mad\",\n      \"moduleName\": \"Wish\",\n      \"description\": \"Wish represents an async computation that needs to be fulfilled. It is\\ncold and will only be run when fulfilled.\",\n      \"typeDeclarations\": [\n        {\n          \"js\": {\n            \"name\": \"Wish\",\n            \"params\": \"e a\",\n            \"constructors\": [\n              \"Wish(((e -> f) -> (a -> b) -> {}))\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Wish\",\n            \"params\": \"e a\",\n            \"constructors\": [\n              \"Wish(((e -> f) -> (a -> b) -> {}))\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor (Wish e)\",\n            \"constraints\": \"\",\n            \"description\": \"The functor instance of Wish provides a way to map over the value it contains.\",\n            \"example\": \"map((x) => x + 1, good(3)) // good(4)\\nmap((x) => x + 1, bad(3))  // bad(3)\",\n            \"since\": \"0.0.5\"\n          },\n          \"llvm\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor (Wish e)\",\n            \"constraints\": \"\",\n            \"description\": \"The functor instance of Wish provides a way to map over the value it contains.\",\n            \"example\": \"map((x) => x + 1, good(3)) // good(4)\\nmap((x) => x + 1, bad(3))  // bad(3)\",\n            \"since\": \"0.0.5\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Applicative\",\n            \"declaration\": \"Applicative (Wish e)\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Applicative\",\n            \"declaration\": \"Applicative (Wish e)\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Monad\",\n            \"declaration\": \"Monad (Wish e)\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Monad\",\n            \"declaration\": \"Monad (Wish e)\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Bifunctor\",\n            \"declaration\": \"Bifunctor Wish\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Bifunctor\",\n            \"declaration\": \"Bifunctor Wish\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"mapRej\",\n            \"description\": \"Maps over the rejected value.\",\n            \"example\": \"mapRej((x) => x + 1, bad(3))  // bad(4)\\nmapRej((x) => x + 1, good(3)) // good(3)\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> b) -> Wish a c -> Wish b c\"\n          },\n          \"llvm\": {\n            \"name\": \"mapRej\",\n            \"description\": \"Maps over the rejected value.\",\n            \"example\": \"mapRej((x) => x + 1, bad(3))  // bad(4)\\nmapRej((x) => x + 1, good(3)) // good(3)\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> b) -> Wish a c -> Wish b c\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"chainRej\",\n            \"description\": \"Chains over the rejected value.\",\n            \"example\": \"chainRej((x) => good(x + 1), bad(3)) // good(4)\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Wish b c) -> Wish a c -> Wish b c\"\n          },\n          \"llvm\": {\n            \"name\": \"chainRej\",\n            \"description\": \"Chains over the rejected value.\",\n            \"example\": \"chainRej((x) => good(x + 1), bad(3)) // good(4)\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Wish b c) -> Wish a c -> Wish b c\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"bichain\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> Wish b c) -> (d -> Wish b c) -> Wish a d -> Wish b c\"\n          },\n          \"llvm\": {\n            \"name\": \"bichain\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> Wish b c) -> (d -> Wish b c) -> Wish a d -> Wish b c\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"good\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"a -> Wish b a\"\n          },\n          \"llvm\": {\n            \"name\": \"good\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"a -> Wish b a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"bad\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"a -> Wish a b\"\n          },\n          \"llvm\": {\n            \"name\": \"bad\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"a -> Wish a b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"parallelN\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> List (Wish a b) -> Wish a (List b)\"\n          },\n          \"llvm\": {\n            \"name\": \"parallelN\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> List (Wish a b) -> Wish a (List b)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"parallel\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List (Wish a b) -> Wish a (List b)\"\n          },\n          \"llvm\": {\n            \"name\": \"parallel\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List (Wish a b) -> Wish a (List b)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"discardError\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b) -> Wish a b -> Wish {} b\"\n          },\n          \"llvm\": {\n            \"name\": \"discardError\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b) -> Wish a b -> Wish {} b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"fulfill\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b) -> (c -> d) -> Wish a c -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"fulfill\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b) -> (c -> d) -> Wish a c -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"after\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> a -> Wish b a\"\n          },\n          \"llvm\": {\n            \"name\": \"after\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> a -> Wish b a\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/IO.mad\",\n      \"moduleName\": \"IO\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"ansi\",\n            \"description\": \"Ansi styles to be used with the ansiColor function.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"{ BGBlack :: String, BGBlue :: String, BGBrightBlack :: String, BGBrightBlue :: String, BGBrightCyan :: String, BGBrightGreen :: String, BGBrightMagenta :: String, BGBrightRed :: String, BGBrightWhite :: String, BGBrightYellow :: String, BGCyan :: String, BGGreen :: String, BGMagenta :: String, BGRed :: String, BGWhite :: String, BGYellow :: String, FGBlack :: String, FGBlue :: String, FGBrightBlack :: String, FGBrightBlue :: String, FGBrightCyan :: String, FGBrightGreen :: String, FGBrightMagenta :: String, FGBrightRed :: String, FGBrightWhite :: String, FGBrightYellow :: String, FGCyan :: String, FGGreen :: String, FGMagenta :: String, FGRed :: String, FGWhite :: String, FGYellow :: String, FormatBold :: String, FormatInvert :: String, FormatNoBold :: String, FormatNoUnderline :: String, FormatUnderline :: String }\"\n          },\n          \"llvm\": {\n            \"name\": \"ansi\",\n            \"description\": \"Ansi styles to be used with the ansiColor function.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"{ BGBlack :: String, BGBlue :: String, BGBrightBlack :: String, BGBrightBlue :: String, BGBrightCyan :: String, BGBrightGreen :: String, BGBrightMagenta :: String, BGBrightRed :: String, BGBrightWhite :: String, BGBrightYellow :: String, BGCyan :: String, BGGreen :: String, BGMagenta :: String, BGRed :: String, BGWhite :: String, BGYellow :: String, FGBlack :: String, FGBlue :: String, FGBrightBlack :: String, FGBrightBlue :: String, FGBrightCyan :: String, FGBrightGreen :: String, FGBrightMagenta :: String, FGBrightRed :: String, FGBrightWhite :: String, FGBrightYellow :: String, FGCyan :: String, FGGreen :: String, FGMagenta :: String, FGRed :: String, FGWhite :: String, FGYellow :: String, FormatBold :: String, FormatInvert :: String, FormatNoBold :: String, FormatNoUnderline :: String, FormatUnderline :: String }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"ansiColor\",\n            \"description\": \"Adds ansi escape codes to a string given a list of styles.\",\n            \"example\": \"ansiColor([ansi.FormatBold, ansi.FGBrightRed], \\\"will be red and bold\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"List String -> String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"ansiColor\",\n            \"description\": \"Adds ansi escape codes to a string given a list of styles.\",\n            \"example\": \"ansiColor([ansi.FormatBold, ansi.FGBrightRed], \\\"will be red and bold\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"List String -> String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"text\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"{ black :: String -> String, blue :: String -> String, bold :: String -> String, boldUnderline :: String -> String, brightBlack :: String -> String, brightBlue :: String -> String, brightCyan :: String -> String, brightGreen :: String -> String, brightMagenta :: String -> String, brightRed :: String -> String, brightWhite :: String -> String, brightYellow :: String -> String, cyan :: String -> String, green :: String -> String, magenta :: String -> String, red :: String -> String, underline :: String -> String, white :: String -> String, yellow :: String -> String }\"\n          },\n          \"llvm\": {\n            \"name\": \"text\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"{ black :: String -> String, blue :: String -> String, bold :: String -> String, boldUnderline :: String -> String, brightBlack :: String -> String, brightBlue :: String -> String, brightCyan :: String -> String, brightGreen :: String -> String, brightMagenta :: String -> String, brightRed :: String -> String, brightWhite :: String -> String, brightYellow :: String -> String, cyan :: String -> String, green :: String -> String, magenta :: String -> String, red :: String -> String, underline :: String -> String, white :: String -> String, yellow :: String -> String }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"dark\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"{ black :: String -> String, blue :: String -> String, cyan :: String -> String, green :: String -> String, magenta :: String -> String, red :: String -> String, white :: String -> String, yellow :: String -> String }\"\n          },\n          \"llvm\": {\n            \"name\": \"dark\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"{ black :: String -> String, blue :: String -> String, cyan :: String -> String, green :: String -> String, magenta :: String -> String, red :: String -> String, white :: String -> String, yellow :: String -> String }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"light\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"{ black :: String -> String, blue :: String -> String, cyan :: String -> String, green :: String -> String, magenta :: String -> String, red :: String -> String, white :: String -> String, yellow :: String -> String }\"\n          },\n          \"llvm\": {\n            \"name\": \"light\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"{ black :: String -> String, blue :: String -> String, cyan :: String -> String, green :: String -> String, magenta :: String -> String, red :: String -> String, white :: String -> String, yellow :: String -> String }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"colortrace\",\n            \"description\": \"Given a color function and a label it prints the given value with\\na label colored by the color function.\",\n            \"example\": \"colortrace(text.green, \\\"label\\\", [1, 2, 3])\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Inspect a => (String -> String) -> String -> a -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"colortrace\",\n            \"description\": \"Given a color function and a label it prints the given value with\\na label colored by the color function.\",\n            \"example\": \"colortrace(text.green, \\\"label\\\", [1, 2, 3])\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Inspect a => (String -> String) -> String -> a -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"red\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"red\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"green\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"green\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"yellow\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"yellow\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"grey\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"grey\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"put\",\n            \"description\": \"Writes a string to stdout without line return.\",\n            \"example\": \"put(\\\"Hello world\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"put\",\n            \"description\": \"Writes a string to stdout without line return.\",\n            \"example\": \"put(\\\"Hello world\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"putLine\",\n            \"description\": \"Writes a string to stdout with line return.\",\n            \"example\": \"putLine(\\\"Hello world\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"putLine\",\n            \"description\": \"Writes a string to stdout with line return.\",\n            \"example\": \"putLine(\\\"Hello world\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"err\",\n            \"description\": \"Writes a string to stderr without line return.\",\n            \"example\": \"err(\\\"Hello world\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"err\",\n            \"description\": \"Writes a string to stderr without line return.\",\n            \"example\": \"err(\\\"Hello world\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"getLine\",\n            \"description\": \"A Wish reading one line from stdin\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Wish IOError String\"\n          },\n          \"llvm\": {\n            \"name\": \"getLine\",\n            \"description\": \"A Wish reading one line from stdin\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Wish IOError String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"get\",\n            \"description\": \"A Wish reading from stdin\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Wish IOError String\"\n          },\n          \"llvm\": {\n            \"name\": \"get\",\n            \"description\": \"A Wish reading from stdin\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Wish IOError String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"log\",\n            \"description\": \"Writes a Madlib value to stdout with line return.\",\n            \"example\": \"log({ x: 7, y: 13 })\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Inspect a => a -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"log\",\n            \"description\": \"Writes a Madlib value to stdout with line return.\",\n            \"example\": \"log({ x: 7, y: 13 })\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Inspect a => a -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"errLine\",\n            \"description\": \"Writes a string to stderr with line return.\",\n            \"example\": \"errLine(\\\"Hello world\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"errLine\",\n            \"description\": \"Writes a string to stderr with line return.\",\n            \"example\": \"errLine(\\\"Hello world\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"putLineAndPass\",\n            \"description\": \"Convenient function to print something in the middle of a pipe.\\nIt prints the given string and returns whatever second parameter\\nis given.\",\n            \"example\": \"putLineAndPass(\\\"Something\\\", 3) // 3\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> a -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"putLineAndPass\",\n            \"description\": \"Convenient function to print something in the middle of a pipe.\\nIt prints the given string and returns whatever second parameter\\nis given.\",\n            \"example\": \"putLineAndPass(\\\"Something\\\", 3) // 3\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> a -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"newLine\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"a -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"newLine\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"a -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"trace\",\n            \"description\": \"Very useful within pipes as it allows one to quickly introspect,\\nwhatever value is currently coming through the pipe.\",\n            \"example\": \"// prints \\\"current value 6\\\" and returns 7\\npipe((x) => x * 2, trace(\\\"current value\\\"), (x) => x + 1)(3)\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Inspect a => String -> a -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"trace\",\n            \"description\": \"Very useful within pipes as it allows one to quickly introspect,\\nwhatever value is currently coming through the pipe.\",\n            \"example\": \"// prints \\\"current value 6\\\" and returns 7\\npipe((x) => x * 2, trace(\\\"current value\\\"), (x) => x + 1)(3)\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Inspect a => String -> a -> a\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Crypto.mad\",\n      \"moduleName\": \"Crypto\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"md5\",\n            \"description\": \"Hash the input String with md5 algorithm\",\n            \"example\": \"md5(\\\"rabbit\\\") // \\\"a51e47f646375ab6bf5dd2c42d3e6181\\\"\",\n            \"since\": \"0.13.0\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"md5\",\n            \"description\": \"Hash the input String with md5 algorithm\",\n            \"example\": \"md5(\\\"rabbit\\\") // \\\"a51e47f646375ab6bf5dd2c42d3e6181\\\"\",\n            \"since\": \"0.13.0\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"sha256\",\n            \"description\": \"Hash the input String with sha256 algorithm\",\n            \"example\": \"md5(\\\"rabbit\\\") // \\\"d37d96b42ad43384915e4513505c30c0b1c4e7c765b5577eda25b5dbd7f26d89\\\"\",\n            \"since\": \"0.13.0\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"sha256\",\n            \"description\": \"Hash the input String with sha256 algorithm\",\n            \"example\": \"md5(\\\"rabbit\\\") // \\\"d37d96b42ad43384915e4513505c30c0b1c4e7c765b5577eda25b5dbd7f26d89\\\"\",\n            \"since\": \"0.13.0\",\n            \"type\": \"String -> String\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Maybe.mad\",\n      \"moduleName\": \"Maybe\",\n      \"description\": \"Maybe is one of the major data types in functional programming and serves to\\nrepresent and encapsulate values which may not exist.\\n\\nWhereas other languages may use values like \`null\` / \`nil\` / \`undefined\`, Madlib provides this monadic\\nstructure to encapsulate uncertainty in a computationally safe way.\",\n      \"typeDeclarations\": [\n        {\n          \"js\": {\n            \"name\": \"Maybe\",\n            \"params\": \"a\",\n            \"constructors\": [\n              \"Just(a)\",\n              \"Nothing\"\n            ],\n            \"description\": \"The Maybe type is used to model uncertain values. It is ideal for values which may not exist,\\nand is used to provide safety and certainty when calculating against potentially uncertain or incorrect inputs.\",\n            \"example\": \"Just(3)     // Just(3) :: Maybe Number\\nJust(false) // Just(false) :: Maybe Boolean\\nNothing     // Nothing :: Maybe a\",\n            \"since\": \"0.0.5\"\n          },\n          \"llvm\": {\n            \"name\": \"Maybe\",\n            \"params\": \"a\",\n            \"constructors\": [\n              \"Just(a)\",\n              \"Nothing\"\n            ],\n            \"description\": \"The Maybe type is used to model uncertain values. It is ideal for values which may not exist,\\nand is used to provide safety and certainty when calculating against potentially uncertain or incorrect inputs.\",\n            \"example\": \"Just(3)     // Just(3) :: Maybe Number\\nJust(false) // Just(false) :: Maybe Boolean\\nNothing     // Nothing :: Maybe a\",\n            \"since\": \"0.0.5\"\n          }\n        }\n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor Maybe\",\n            \"constraints\": \"\",\n            \"description\": \"Map over a given Maybe, returning either Just the transformed value\\n(in the case of successful computation) or Nothing.\",\n            \"example\": \"map((x) => x + 1, Just(0)) // Just(1)\\nmap((x) => x + 1, Nothing) // Nothing\",\n            \"since\": \"0.0.6\"\n          },\n          \"llvm\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor Maybe\",\n            \"constraints\": \"\",\n            \"description\": \"Map over a given Maybe, returning either Just the transformed value\\n(in the case of successful computation) or Nothing.\",\n            \"example\": \"map((x) => x + 1, Just(0)) // Just(1)\\nmap((x) => x + 1, Nothing) // Nothing\",\n            \"since\": \"0.0.6\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Applicative\",\n            \"declaration\": \"Applicative Maybe\",\n            \"constraints\": \"\",\n            \"description\": \"Apply Maybe a function to Maybe a value.\\nIf either value is Nothing, return Nothing.\",\n            \"example\": \"ap(Just((x) => x + 1), Just(0)) // Just(1)\\nap(Just((x) => x + 1), Nothing) // Nothing\\nap(Nothing, Just(3))            // Nothing\",\n            \"since\": \"0.0.6\"\n          },\n          \"llvm\": {\n            \"name\": \"Applicative\",\n            \"declaration\": \"Applicative Maybe\",\n            \"constraints\": \"\",\n            \"description\": \"Apply Maybe a function to Maybe a value.\\nIf either value is Nothing, return Nothing.\",\n            \"example\": \"ap(Just((x) => x + 1), Just(0)) // Just(1)\\nap(Just((x) => x + 1), Nothing) // Nothing\\nap(Nothing, Just(3))            // Nothing\",\n            \"since\": \"0.0.6\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Monad\",\n            \"declaration\": \"Monad Maybe\",\n            \"constraints\": \"\",\n            \"description\": \"Use \`chain\` to avoid a double-wrapped Maybe.\\nInstead of a Just of a Just, \`chain\` will flatten the contained transformation to be only one Monad deep.\",\n            \"example\": \"chain((x) => Just(x + 1), Just(1)) // Just(2)\",\n            \"since\": \"0.0.6\"\n          },\n          \"llvm\": {\n            \"name\": \"Monad\",\n            \"declaration\": \"Monad Maybe\",\n            \"constraints\": \"\",\n            \"description\": \"Use \`chain\` to avoid a double-wrapped Maybe.\\nInstead of a Just of a Just, \`chain\` will flatten the contained transformation to be only one Monad deep.\",\n            \"example\": \"chain((x) => Just(x + 1), Just(1)) // Just(2)\",\n            \"since\": \"0.0.6\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show (Maybe a)\",\n            \"constraints\": \"Show a\",\n            \"description\": \"Use \`show\` to transform a Maybe to a string.\",\n            \"example\": \"show(Just(3))                   // \\\"Just 3\\\"\\nshow((Nothing :: Maybe Number)) // \\\"Nothing\\\"\",\n            \"since\": \"0.0.6\"\n          },\n          \"llvm\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show (Maybe a)\",\n            \"constraints\": \"Show a\",\n            \"description\": \"Use \`show\` to transform a Maybe to a string.\",\n            \"example\": \"show(Just(3))                   // \\\"Just 3\\\"\\nshow((Nothing :: Maybe Number)) // \\\"Nothing\\\"\",\n            \"since\": \"0.0.6\"\n          }\n        }\n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"fromMaybe\",\n            \"description\": \"Extricate the value contained in a Just, or the given fallback value if given a Nothing\",\n            \"example\": \"fromMaybe(3, Just(4)) // 4\\nfromMaybe(3, Nothing) // 3\",\n            \"since\": \"0.0.5\",\n            \"type\": \"a -> Maybe a -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"fromMaybe\",\n            \"description\": \"Extricate the value contained in a Just, or the given fallback value if given a Nothing\",\n            \"example\": \"fromMaybe(3, Just(4)) // 4\\nfromMaybe(3, Nothing) // 3\",\n            \"since\": \"0.0.5\",\n            \"type\": \"a -> Maybe a -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"isJust\",\n            \"description\": \"Returns true if the Maybe is a Just, false otherwise.\",\n            \"example\": \"isJust(Just(\\\"something\\\")) // true\\nisJust(Nothing)           // false\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Maybe a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"isJust\",\n            \"description\": \"Returns true if the Maybe is a Just, false otherwise.\",\n            \"example\": \"isJust(Just(\\\"something\\\")) // true\\nisJust(Nothing)           // false\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Maybe a -> Boolean\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Test.mad\",\n      \"moduleName\": \"Test\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        {\n          \"js\": {\n            \"name\": \"AssertionError\",\n            \"params\": \"a\",\n            \"constructors\": [\n              \"AssertionError(a, a)\",\n              \"Error(a)\",\n              \"ErrorWithMessage(String)\",\n              \"NotImplemented\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"AssertionError\",\n            \"params\": \"a\",\n            \"constructors\": [\n              \"AssertionError(a, a)\",\n              \"Error(a)\",\n              \"ErrorWithMessage(String)\",\n              \"NotImplemented\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"assertEquals\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Eq a => a -> a -> Wish (AssertionError a) {}\"\n          },\n          \"llvm\": {\n            \"name\": \"assertEquals\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Eq a => a -> a -> Wish (AssertionError a) {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"test\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Inspect a => String -> (String -> Wish (AssertionError a) {}) -> Wish String String\"\n          },\n          \"llvm\": {\n            \"name\": \"test\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Inspect a => String -> (String -> Wish (AssertionError a) {}) -> Wish String String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"runAllTestSuites\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List #[String, List (Wish String String)] -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"runAllTestSuites\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List #[String, List (Wish String String)] -> {}\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/JsonValue.mad\",\n      \"moduleName\": \"JsonValue\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        {\n          \"js\": {\n            \"name\": \"JsonValue\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"JsonString(String)\",\n              \"JsonInteger(Integer)\",\n              \"JsonFloat(Float)\",\n              \"JsonBoolean(Boolean)\",\n              \"JsonNull\",\n              \"JsonObject((Dictionary String JsonValue))\",\n              \"JsonArray((List JsonValue))\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"JsonValue\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"JsonString(String)\",\n              \"JsonInteger(Integer)\",\n              \"JsonFloat(Float)\",\n              \"JsonBoolean(Boolean)\",\n              \"JsonNull\",\n              \"JsonObject((Dictionary String JsonValue))\",\n              \"JsonArray((List JsonValue))\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        \n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/List.mad\",\n      \"moduleName\": \"List\",\n      \"description\": \"List utility functions.\\nIn this module you\'ll find everything that is related to List and make working with lists convenient.\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor List\",\n            \"constraints\": \"\",\n            \"description\": \"As with all implementations of \`map\`, transform each value contained in the List.\",\n            \"example\": \"map((x) => x * 2, [1, 2, 3]) // [2, 4, 6]\",\n            \"since\": \"v0.0.6\"\n          },\n          \"llvm\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor List\",\n            \"constraints\": \"\",\n            \"description\": \"As with all implementations of \`map\`, transform each value contained in the List.\",\n            \"example\": \"map((x) => x * 2, [1, 2, 3]) // [2, 4, 6]\",\n            \"since\": \"v0.0.6\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Applicative\",\n            \"declaration\": \"Applicative List\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Applicative\",\n            \"declaration\": \"Applicative List\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Monad\",\n            \"declaration\": \"Monad List\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Monad\",\n            \"declaration\": \"Monad List\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Semigroup\",\n            \"declaration\": \"Semigroup (List a)\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Semigroup\",\n            \"declaration\": \"Semigroup (List a)\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Monoid\",\n            \"declaration\": \"Monoid (List a)\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Monoid\",\n            \"declaration\": \"Monoid (List a)\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"mapMaybe\",\n            \"description\": \"Given a mapping function that returns a Maybe, returns a list of mapped\\nelements, where Nothing values are discarded.\",\n            \"example\": \"mapMaybe((i) => i % 2 == 0 ? Just(i) : Nothing, [1, 2, 3, 4]) // [2, 4]\",\n            \"since\": \"0.5.0\",\n            \"type\": \"(a -> Maybe b) -> List a -> List b\"\n          },\n          \"llvm\": {\n            \"name\": \"mapMaybe\",\n            \"description\": \"Given a mapping function that returns a Maybe, returns a list of mapped\\nelements, where Nothing values are discarded.\",\n            \"example\": \"mapMaybe((i) => i % 2 == 0 ? Just(i) : Nothing, [1, 2, 3, 4]) // [2, 4]\",\n            \"since\": \"0.5.0\",\n            \"type\": \"(a -> Maybe b) -> List a -> List b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"repeat\",\n            \"description\": \"Creates a list containing a value n times.\",\n            \"example\": \"repeat(\'a\', 3) // [\'a\', \'b\', \'c\']\",\n            \"since\": \"0.5.0\",\n            \"type\": \"a -> Integer -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"repeat\",\n            \"description\": \"Creates a list containing a value n times.\",\n            \"example\": \"repeat(\'a\', 3) // [\'a\', \'b\', \'c\']\",\n            \"since\": \"0.5.0\",\n            \"type\": \"a -> Integer -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"repeatWith\",\n            \"description\": \"Creates a list containing n times the value returned by the mapping function,\\nwhich takes the index of the current element as parameter\",\n            \"example\": \"repeatWith((i) => inspect(i), 3) // [\\\"0\\\", \\\"1\\\", \\\"2\\\"]\",\n            \"since\": \"0.5.0\",\n            \"type\": \"(Integer -> a) -> Integer -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"repeatWith\",\n            \"description\": \"Creates a list containing n times the value returned by the mapping function,\\nwhich takes the index of the current element as parameter\",\n            \"example\": \"repeatWith((i) => inspect(i), 3) // [\\\"0\\\", \\\"1\\\", \\\"2\\\"]\",\n            \"since\": \"0.5.0\",\n            \"type\": \"(Integer -> a) -> Integer -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"range\",\n            \"description\": \"Return a list of integers within the given range. The start\\nparameter is inclusive and the end parameter is exclusive.\",\n            \"example\": \"range(3, 3) // []\\nrange(3, 5) // [3, 4]\",\n            \"since\": \"0.12.0\",\n            \"type\": \"Integer -> Integer -> List Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"range\",\n            \"description\": \"Return a list of integers within the given range. The start\\nparameter is inclusive and the end parameter is exclusive.\",\n            \"example\": \"range(3, 3) // []\\nrange(3, 5) // [3, 4]\",\n            \"since\": \"0.12.0\",\n            \"type\": \"Integer -> Integer -> List Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"mapM\",\n            \"description\": \"Maps a list with a function returning an Applicative and returns an\\nApplicative containing the List of all the transformed values.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Applicative m => (a -> m b) -> List a -> m (List b)\"\n          },\n          \"llvm\": {\n            \"name\": \"mapM\",\n            \"description\": \"Maps a list with a function returning an Applicative and returns an\\nApplicative containing the List of all the transformed values.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Applicative m => (a -> m b) -> List a -> m (List b)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"singleton\",\n            \"description\": \"Constructor function that creates a list with length 1. It takes an item of any type, and returns a List of that type.\",\n            \"example\": \"singleton(1)   // [1]\\nsingleton(\\\"1\\\") // [\\\"1\\\"]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"singleton\",\n            \"description\": \"Constructor function that creates a list with length 1. It takes an item of any type, and returns a List of that type.\",\n            \"example\": \"singleton(1)   // [1]\\nsingleton(\\\"1\\\") // [\\\"1\\\"]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"intercalate\",\n            \"description\": \"Inserts the given list between all the lists contained in the second\\nparameter.\",\n            \"example\": \"intercalate([\\\"and\\\"], [[\\\"cats\\\"], [\\\"dogs\\\"], [\\\"rats\\\"]])\\n// [\\\"cats\\\", \\\"and\\\", \\\"dogs\\\", \\\"and\\\", \\\"rats\\\"]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"List a -> List (List a) -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"intercalate\",\n            \"description\": \"Inserts the given list between all the lists contained in the second\\nparameter.\",\n            \"example\": \"intercalate([\\\"and\\\"], [[\\\"cats\\\"], [\\\"dogs\\\"], [\\\"rats\\\"]])\\n// [\\\"cats\\\", \\\"and\\\", \\\"dogs\\\", \\\"and\\\", \\\"rats\\\"]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"List a -> List (List a) -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"intersperse\",\n            \"description\": \"Inserts a value between all elements of a list.\",\n            \"example\": \"intercalate(\\\"and\\\", [\\\"cats\\\", \\\"dogs\\\"]) // [\\\"cats\\\", \\\"and\\\", \\\"dogs\\\"]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"a -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"intersperse\",\n            \"description\": \"Inserts a value between all elements of a list.\",\n            \"example\": \"intercalate(\\\"and\\\", [\\\"cats\\\", \\\"dogs\\\"]) // [\\\"cats\\\", \\\"and\\\", \\\"dogs\\\"]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"a -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"intersperseWithIndex\",\n            \"description\": \"Inserts the result of the given function applied to the current element\'s index\\nbetween each element of the given list.\",\n            \"example\": \"intersperseWithIndex(inspect, [\\\"cats\\\", \\\"dogs\\\"]) // [\\\"cats\\\", \\\"0\\\", \\\"dogs\\\"]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(Integer -> a) -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"intersperseWithIndex\",\n            \"description\": \"Inserts the result of the given function applied to the current element\'s index\\nbetween each element of the given list.\",\n            \"example\": \"intersperseWithIndex(inspect, [\\\"cats\\\", \\\"dogs\\\"]) // [\\\"cats\\\", \\\"0\\\", \\\"dogs\\\"]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(Integer -> a) -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"mapWithIndex\",\n            \"description\": \"Applies a function to each item of a list. This function receives both the current element\\nand its index as parameters, and whatever is returned is used as the new element\'s value.\",\n            \"example\": \"mapWithIndex((x, i) => x ++ show(i), [\\\"a\\\", \\\"b\\\", \\\"c\\\"]) // [\\\"a0\\\", \\\"b1\\\", \\\"c2\\\"]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Integer -> b) -> List a -> List b\"\n          },\n          \"llvm\": {\n            \"name\": \"mapWithIndex\",\n            \"description\": \"Applies a function to each item of a list. This function receives both the current element\\nand its index as parameters, and whatever is returned is used as the new element\'s value.\",\n            \"example\": \"mapWithIndex((x, i) => x ++ show(i), [\\\"a\\\", \\\"b\\\", \\\"c\\\"]) // [\\\"a0\\\", \\\"b1\\\", \\\"c2\\\"]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Integer -> b) -> List a -> List b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"concat\",\n            \"description\": \"Merge two Lists together.\",\n            \"example\": \"concat([1, 2, 3], [4, 5, 6]) // [1, 2, 3, 4, 5, 6]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List a -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"concat\",\n            \"description\": \"Merge two Lists together.\",\n            \"example\": \"concat([1, 2, 3], [4, 5, 6]) // [1, 2, 3, 4, 5, 6]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List a -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"append\",\n            \"description\": \"Add an item to the end of a List.\",\n            \"example\": \"append(2, [1]) // [1, 2]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"a -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"append\",\n            \"description\": \"Add an item to the end of a List.\",\n            \"example\": \"append(2, [1]) // [1, 2]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"a -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"last\",\n            \"description\": \"Safely access the last value in a List (wrapped in Just), or Nothing if the array is empty.\",\n            \"example\": \"last([1, 2, 3]) // Just(3)\\nlast([])        // Nothing\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List a -> Maybe a\"\n          },\n          \"llvm\": {\n            \"name\": \"last\",\n            \"description\": \"Safely access the last value in a List (wrapped in Just), or Nothing if the array is empty.\",\n            \"example\": \"last([1, 2, 3]) // Just(3)\\nlast([])        // Nothing\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List a -> Maybe a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"first\",\n            \"description\": \"Safely access the first value in a List (wrapped in Just), or Nothing if the array is empty.\",\n            \"example\": \"first([1, 2, 3]) // Just(1)\\nfirst([])        // Nothing\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List a -> Maybe a\"\n          },\n          \"llvm\": {\n            \"name\": \"first\",\n            \"description\": \"Safely access the first value in a List (wrapped in Just), or Nothing if the array is empty.\",\n            \"example\": \"first([1, 2, 3]) // Just(1)\\nfirst([])        // Nothing\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List a -> Maybe a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"init\",\n            \"description\": \"Returns a List minus its last item.\",\n            \"example\": \"init([1, 2, 3]) // [1, 2]\\ninit([])        // []\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"init\",\n            \"description\": \"Returns a List minus its last item.\",\n            \"example\": \"init([1, 2, 3]) // [1, 2]\\ninit([])        // []\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"tail\",\n            \"description\": \"Removes the first element of a list.\",\n            \"example\": \"tail([1, 2, 3]) // [2, 3]\\ntail([])        // []\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"tail\",\n            \"description\": \"Removes the first element of a list.\",\n            \"example\": \"tail([1, 2, 3]) // [2, 3]\\ntail([])        // []\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"nth\",\n            \"description\": \"Safely access a value at a given index in a List (wrapped in Just), or Nothing.\",\n            \"example\": \"nth(1, [1, 2, 3]) // Just(2)\\nnth(3, [1, 2, 3]) // Nothing\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Integer -> List a -> Maybe a\"\n          },\n          \"llvm\": {\n            \"name\": \"nth\",\n            \"description\": \"Safely access a value at a given index in a List (wrapped in Just), or Nothing.\",\n            \"example\": \"nth(1, [1, 2, 3]) // Just(2)\\nnth(3, [1, 2, 3]) // Nothing\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Integer -> List a -> Maybe a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"reduceRight\",\n            \"description\": \"Aggregate a single value by iterating over a list, from right-to-left.\\nTakes three parameters:\\n  - an aggregation function, which takes the current aggregated value and the next item in the list.\\n  - an initial value (which must share the same type as the value returned from the transformation function)\\n  - a List\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> b -> b) -> b -> List a -> b\"\n          },\n          \"llvm\": {\n            \"name\": \"reduceRight\",\n            \"description\": \"Aggregate a single value by iterating over a list, from right-to-left.\\nTakes three parameters:\\n  - an aggregation function, which takes the current aggregated value and the next item in the list.\\n  - an initial value (which must share the same type as the value returned from the transformation function)\\n  - a List\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> b -> b) -> b -> List a -> b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"reduceLeft\",\n            \"description\": \"Aggregate a single value by iterating over a list, from left-to-right.\\nTakes three parameters:\\n  - an aggregation function, which takes the current aggregated value and the next item in the list.\\n  - an initial value (which must share the same type as the value returned from the transformation function)\\n  - a List\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> b -> a) -> a -> List b -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"reduceLeft\",\n            \"description\": \"Aggregate a single value by iterating over a list, from left-to-right.\\nTakes three parameters:\\n  - an aggregation function, which takes the current aggregated value and the next item in the list.\\n  - an initial value (which must share the same type as the value returned from the transformation function)\\n  - a List\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> b -> a) -> a -> List b -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"reduce\",\n            \"description\": \"Alias of [reduceL](/List/reduceL).\\nAggregate a single value by iterating over a list, from left-to-right.\\nTakes three parameters:\\n\\n  - an aggregation function, which takes the current aggregated value and the next item in the list.\\n  - an initial value (which must share the same type as the value returned from the transformation function)\\n  - a List\",\n            \"example\": \"reduce((a, b) => a + b, 0, [1, 2, 3]) // 6\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> b -> a) -> a -> List b -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"reduce\",\n            \"description\": \"Alias of [reduceL](/List/reduceL).\\nAggregate a single value by iterating over a list, from left-to-right.\\nTakes three parameters:\\n\\n  - an aggregation function, which takes the current aggregated value and the next item in the list.\\n  - an initial value (which must share the same type as the value returned from the transformation function)\\n  - a List\",\n            \"example\": \"reduce((a, b) => a + b, 0, [1, 2, 3]) // 6\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> b -> a) -> a -> List b -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"reduceM\",\n            \"description\": \"Reduces a list of values with a reducer function that returns a\\nMonad, and returns a Monad of that value.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Monad m => (a -> b -> m a) -> a -> List b -> m a\"\n          },\n          \"llvm\": {\n            \"name\": \"reduceM\",\n            \"description\": \"Reduces a list of values with a reducer function that returns a\\nMonad, and returns a Monad of that value.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Monad m => (a -> b -> m a) -> a -> List b -> m a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"filter\",\n            \"description\": \"Iterate over a List, selecting only values which are matched by predicate function.\",\n            \"example\": \"filter((a) => a % 2 == 0, [1, 2, 3, 4, 5, 6]) // [2, 4, 6]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Boolean) -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"filter\",\n            \"description\": \"Iterate over a List, selecting only values which are matched by predicate function.\",\n            \"example\": \"filter((a) => a % 2 == 0, [1, 2, 3, 4, 5, 6]) // [2, 4, 6]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Boolean) -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"reject\",\n            \"description\": \"Iterate over a List, selecting only values which are not matched by a predicate function.\\nThis is the complement of \`filter\`.\",\n            \"example\": \"reject((a) => a % 2 == 0, [1, 2, 3, 4, 5, 6]) // [1, 3, 5]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Boolean) -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"reject\",\n            \"description\": \"Iterate over a List, selecting only values which are not matched by a predicate function.\\nThis is the complement of \`filter\`.\",\n            \"example\": \"reject((a) => a % 2 == 0, [1, 2, 3, 4, 5, 6]) // [1, 3, 5]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Boolean) -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"find\",\n            \"description\": \"Safely access the first element in a List for which a given\\npredicate function returns true; returning Just the found value or Nothing.\",\n            \"example\": \"find((a) => a % 2 == 0, [1, 2, 3, 4, 5, 6]) // Just(2)\\nfind((a) => a == 0, [1, 2, 3, 4, 5, 6])     // Nothing\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Boolean) -> List a -> Maybe a\"\n          },\n          \"llvm\": {\n            \"name\": \"find\",\n            \"description\": \"Safely access the first element in a List for which a given\\npredicate function returns true; returning Just the found value or Nothing.\",\n            \"example\": \"find((a) => a % 2 == 0, [1, 2, 3, 4, 5, 6]) // Just(2)\\nfind((a) => a == 0, [1, 2, 3, 4, 5, 6])     // Nothing\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Boolean) -> List a -> Maybe a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"length\",\n            \"description\": \"Get the length of a List.\",\n            \"example\": \"length([1, 2, 3]) // 3\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List a -> Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"length\",\n            \"description\": \"Get the length of a List.\",\n            \"example\": \"length([1, 2, 3]) // 3\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List a -> Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"slice\",\n            \"description\": \"Cut a contiguous segment from a List, from start index to end index.\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Integer -> Integer -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"slice\",\n            \"description\": \"Cut a contiguous segment from a List, from start index to end index.\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Integer -> Integer -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"isEmpty\",\n            \"description\": \"Test whether a given List has no elements.\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Eq a => List a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"isEmpty\",\n            \"description\": \"Test whether a given List has no elements.\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Eq a => List a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"uniqueBy\",\n            \"description\": \"Using a comparison function, select values which are distinct.\",\n            \"example\": \"uniqueBy(\\n  (a, b) => a.id == b.id,\\n  [\\n    { id: 1, name: \\\"John\\\" },\\n    { id: 2, name: \\\"Paul\\\" },\\n    { id: 1, name: \\\"George\\\" },\\n    { id: 4, name: \\\"Ringo\\\" }\\n  ]\\n)\\n// [{ id: 1, name: \\\"John\\\" }, { id: 2, name: \\\"Paul\\\" }, { id: 4, name: \\\"Ringo\\\" }]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> a -> Boolean) -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"uniqueBy\",\n            \"description\": \"Using a comparison function, select values which are distinct.\",\n            \"example\": \"uniqueBy(\\n  (a, b) => a.id == b.id,\\n  [\\n    { id: 1, name: \\\"John\\\" },\\n    { id: 2, name: \\\"Paul\\\" },\\n    { id: 1, name: \\\"George\\\" },\\n    { id: 4, name: \\\"Ringo\\\" }\\n  ]\\n)\\n// [{ id: 1, name: \\\"John\\\" }, { id: 2, name: \\\"Paul\\\" }, { id: 4, name: \\\"Ringo\\\" }]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> a -> Boolean) -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"sortBy\",\n            \"description\": \"Sorts a list based on a comparison function.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(a -> a -> Integer) -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"sortBy\",\n            \"description\": \"Sorts a list based on a comparison function.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(a -> a -> Integer) -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"sort\",\n            \"description\": \"Sorts a list of Comparable values in ascendant order.\",\n            \"example\": \"sort([3, 1, 2]) // [1, 2, 3]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Comparable a => List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"sort\",\n            \"description\": \"Sorts a list of Comparable values in ascendant order.\",\n            \"example\": \"sort([3, 1, 2]) // [1, 2, 3]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Comparable a => List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"sortAsc\",\n            \"description\": \"Sorts a list of Comparable values in ascendant order.\",\n            \"example\": \"sortAsc([3, 1, 2]) // [1, 2, 3]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Comparable a => List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"sortAsc\",\n            \"description\": \"Sorts a list of Comparable values in ascendant order.\",\n            \"example\": \"sortAsc([3, 1, 2]) // [1, 2, 3]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Comparable a => List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"sortDesc\",\n            \"description\": \"Sorts a list of Comparable values in descendant order.\",\n            \"example\": \"sortDesc([3, 1, 2]) // [3, 2, 1]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Comparable a => List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"sortDesc\",\n            \"description\": \"Sorts a list of Comparable values in descendant order.\",\n            \"example\": \"sortDesc([3, 1, 2]) // [3, 2, 1]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Comparable a => List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"flatten\",\n            \"description\": \"Remove nested Lists from a given List, one level deep.\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List (List a) -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"flatten\",\n            \"description\": \"Remove nested Lists from a given List, one level deep.\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List (List a) -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"zip\",\n            \"description\": \"Take two lists and combine them pair-wise, such that the elements of List x become the first value\\nof the resulting Tuple, and the elements of List y become the the second value per element.\",\n            \"example\": \"zip([\\\"a\\\", \\\"b\\\", \\\"c\\\"], [1, 2, 3]) // [#[\\\"a\\\", 1], #[\\\"b\\\", 2], #[\\\"c\\\", 3]]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List a -> List b -> List #[a, b]\"\n          },\n          \"llvm\": {\n            \"name\": \"zip\",\n            \"description\": \"Take two lists and combine them pair-wise, such that the elements of List x become the first value\\nof the resulting Tuple, and the elements of List y become the the second value per element.\",\n            \"example\": \"zip([\\\"a\\\", \\\"b\\\", \\\"c\\\"], [1, 2, 3]) // [#[\\\"a\\\", 1], #[\\\"b\\\", 2], #[\\\"c\\\", 3]]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List a -> List b -> List #[a, b]\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"includes\",\n            \"description\": \"Returns true if the given list contains the given element.\",\n            \"example\": \"\",\n            \"since\": \"0.6.0\",\n            \"type\": \"Eq a => a -> List a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"includes\",\n            \"description\": \"Returns true if the given list contains the given element.\",\n            \"example\": \"\",\n            \"since\": \"0.6.0\",\n            \"type\": \"Eq a => a -> List a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"drop\",\n            \"description\": \"Drops n items from the given list.\",\n            \"example\": \"drop(2, [1, 2, 3, 4, 5, 6]) // [3, 4, 5, 6]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Integer -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"drop\",\n            \"description\": \"Drops n items from the given list.\",\n            \"example\": \"drop(2, [1, 2, 3, 4, 5, 6]) // [3, 4, 5, 6]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Integer -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"dropLast\",\n            \"description\": \"Drops n last items from the given list.\",\n            \"example\": \"dropLast(2, [1, 2, 3, 4, 5, 6]) // [1, 2, 3, 4]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Integer -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"dropLast\",\n            \"description\": \"Drops n last items from the given list.\",\n            \"example\": \"dropLast(2, [1, 2, 3, 4, 5, 6]) // [1, 2, 3, 4]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Integer -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"take\",\n            \"description\": \"Takes n items from the given list.\",\n            \"example\": \"take(2, [1, 2, 3, 4, 5, 6]) // [1, 2]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Integer -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"take\",\n            \"description\": \"Takes n items from the given list.\",\n            \"example\": \"take(2, [1, 2, 3, 4, 5, 6]) // [1, 2]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Integer -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"takeLast\",\n            \"description\": \"Takes n last items from the given list.\",\n            \"example\": \"takeLast(2, [1, 2, 3, 4, 5, 6]) // [5, 6]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Integer -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"takeLast\",\n            \"description\": \"Takes n last items from the given list.\",\n            \"example\": \"takeLast(2, [1, 2, 3, 4, 5, 6]) // [5, 6]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Integer -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"dropWhile\",\n            \"description\": \"Returns a list without all items from the start of the given list\\nfor which the predicate evaluates to true until it returns false.\",\n            \"example\": \"dropWhile((x) => x < 5, [1, 2, 3, 4, 5, 6]), [5, 6])\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(a -> Boolean) -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"dropWhile\",\n            \"description\": \"Returns a list without all items from the start of the given list\\nfor which the predicate evaluates to true until it returns false.\",\n            \"example\": \"dropWhile((x) => x < 5, [1, 2, 3, 4, 5, 6]), [5, 6])\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(a -> Boolean) -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"takeWhile\",\n            \"description\": \"Returns a list containing all items from the start of the given list\\nfor which the predicate evaluates to true until it returns false and\\nskips all items after.\",\n            \"example\": \"takeWhile((x) => x < 5, [1, 2, 3, 4, 5, 6]) // [1, 2, 3, 4]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(a -> Boolean) -> List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"takeWhile\",\n            \"description\": \"Returns a list containing all items from the start of the given list\\nfor which the predicate evaluates to true until it returns false and\\nskips all items after.\",\n            \"example\": \"takeWhile((x) => x < 5, [1, 2, 3, 4, 5, 6]) // [1, 2, 3, 4]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(a -> Boolean) -> List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"reverse\",\n            \"description\": \"Reverses the given list.\",\n            \"example\": \"reverse([1, 2, 3])       // [3, 2, 1]\\nreverse(reverse(a)) == a // true\",\n            \"since\": \"0.5.0\",\n            \"type\": \"List a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"reverse\",\n            \"description\": \"Reverses the given list.\",\n            \"example\": \"reverse([1, 2, 3])       // [3, 2, 1]\\nreverse(reverse(a)) == a // true\",\n            \"since\": \"0.5.0\",\n            \"type\": \"List a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"tails\",\n            \"description\": \"Returns a list of all the tails for the given list\",\n            \"example\": \"tails([1, 2, 3]) // [[1, 2, 3], [2, 3], [3], []]\",\n            \"since\": \"0.18.6\",\n            \"type\": \"List a -> List (List a)\"\n          },\n          \"llvm\": {\n            \"name\": \"tails\",\n            \"description\": \"Returns a list of all the tails for the given list\",\n            \"example\": \"tails([1, 2, 3]) // [[1, 2, 3], [2, 3], [3], []]\",\n            \"since\": \"0.18.6\",\n            \"type\": \"List a -> List (List a)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"startsWith\",\n            \"description\": \"Returns true if the second list starts with the first one.\",\n            \"example\": \"startsWith([1, 2, 3], [1, 2, 3, 4, 5, 6]) // true\\nstartsWith([2, 3, 4], [1, 2, 3, 4, 5, 6]) // false\",\n            \"since\": \"0.18.6\",\n            \"type\": \"Eq a => List a -> List a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"startsWith\",\n            \"description\": \"Returns true if the second list starts with the first one.\",\n            \"example\": \"startsWith([1, 2, 3], [1, 2, 3, 4, 5, 6]) // true\\nstartsWith([2, 3, 4], [1, 2, 3, 4, 5, 6]) // false\",\n            \"since\": \"0.18.6\",\n            \"type\": \"Eq a => List a -> List a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"contains\",\n            \"description\": \"Returns true if the first list is contained in the second one.\",\n            \"example\": \"contains([2, 3, 4], [1, 2, 3, 4, 5, 6]) // true\\ncontains([2, 8, 5], [1, 2, 3, 4, 5, 6]) // false\",\n            \"since\": \"0.18.6\",\n            \"type\": \"Eq a => List a -> List a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"contains\",\n            \"description\": \"Returns true if the first list is contained in the second one.\",\n            \"example\": \"contains([2, 3, 4], [1, 2, 3, 4, 5, 6]) // true\\ncontains([2, 8, 5], [1, 2, 3, 4, 5, 6]) // false\",\n            \"since\": \"0.18.6\",\n            \"type\": \"Eq a => List a -> List a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"endsWith\",\n            \"description\": \"Returns true if the second list ends with the first one.\",\n            \"example\": \"endsWith([4, 5, 6], [1, 2, 3, 4, 5, 6]) // true\\nendsWith([4, 5], [1, 2, 3, 4, 5, 6])    // false\",\n            \"since\": \"0.18.6\",\n            \"type\": \"Eq a => List a -> List a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"endsWith\",\n            \"description\": \"Returns true if the second list ends with the first one.\",\n            \"example\": \"endsWith([4, 5, 6], [1, 2, 3, 4, 5, 6]) // true\\nendsWith([4, 5], [1, 2, 3, 4, 5, 6])    // false\",\n            \"since\": \"0.18.6\",\n            \"type\": \"Eq a => List a -> List a -> Boolean\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Alternative.mad\",\n      \"moduleName\": \"Alternative\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        {\n          \"js\": {\n            \"name\": \"Alternative\",\n            \"vars\": \"f\",\n            \"constraints\": \"Applicative f\",\n            \"methods\": [\n              \"aempty :: f a\",\n              \"alt :: f a -> f a -> f a\"\n            ],\n            \"description\": \"Alternative instance brings retry mechanism. It tries the first computation and\\nif it fails it tries the second one.\",\n            \"example\": \"\",\n            \"since\": \"0.8.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Alternative\",\n            \"vars\": \"f\",\n            \"constraints\": \"Applicative f\",\n            \"methods\": [\n              \"aempty :: f a\",\n              \"alt :: f a -> f a -> f a\"\n            ],\n            \"description\": \"Alternative instance brings retry mechanism. It tries the first computation and\\nif it fails it tries the second one.\",\n            \"example\": \"\",\n            \"since\": \"0.8.0\"\n          }\n        }\n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        \n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/File.mad\",\n      \"moduleName\": \"File\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"write\",\n            \"description\": \"Writes a text file. The first argument is the path to the file\\nand the second argument is the text to write to it. It returns\\na Wish and the result is discarded, meaning that it contains Unit.\",\n            \"example\": \"fulfill(() => {}, () => {}, write(\\\"./test.txt\\\", \\\"some content\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> String -> Wish IOError {}\"\n          },\n          \"llvm\": {\n            \"name\": \"write\",\n            \"description\": \"Writes a text file. The first argument is the path to the file\\nand the second argument is the text to write to it. It returns\\na Wish and the result is discarded, meaning that it contains Unit.\",\n            \"example\": \"fulfill(() => {}, () => {}, write(\\\"./test.txt\\\", \\\"some content\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> String -> Wish IOError {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"writeBytes\",\n            \"description\": \"Writes a binary file. The first argument is the path to the file\\nand the second argument is the bytes to write to it. It returns\\na Wish and the result is discarded, meaning that it contains Unit.\",\n            \"example\": \"fulfill(() => {}, () => {}, write(\\\"./test.txt\\\", ByteArray.fromString(\\\"some content\\\")))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray -> Wish IOError {}\"\n          },\n          \"llvm\": {\n            \"name\": \"writeBytes\",\n            \"description\": \"Writes a binary file. The first argument is the path to the file\\nand the second argument is the bytes to write to it. It returns\\na Wish and the result is discarded, meaning that it contains Unit.\",\n            \"example\": \"fulfill(() => {}, () => {}, write(\\\"./test.txt\\\", ByteArray.fromString(\\\"some content\\\")))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray -> Wish IOError {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"read\",\n            \"description\": \"Reads a text file.\",\n            \"example\": \"fulfill(IO.log, IO.putLine, read(\\\"./test.txt\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> Wish IOError String\"\n          },\n          \"llvm\": {\n            \"name\": \"read\",\n            \"description\": \"Reads a text file.\",\n            \"example\": \"fulfill(IO.log, IO.putLine, read(\\\"./test.txt\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> Wish IOError String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"readBytes\",\n            \"description\": \"Reads a binary file.\",\n            \"example\": \"fulfill(IO.log, IO.log, read(\\\"./test.bin\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> Wish IOError ByteArray\"\n          },\n          \"llvm\": {\n            \"name\": \"readBytes\",\n            \"description\": \"Reads a binary file.\",\n            \"example\": \"fulfill(IO.log, IO.log, read(\\\"./test.bin\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> Wish IOError ByteArray\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"exists\",\n            \"description\": \"Checks whether a file exists or not. If the file does not exist\\nthe Wish is rejected.\",\n            \"example\": \"fulfill(always(IO.putLine(\\\"does not exist\\\")), always(IO.putLine(\\\"exists\\\")), exists(\\\"/\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> Wish {} Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"exists\",\n            \"description\": \"Checks whether a file exists or not. If the file does not exist\\nthe Wish is rejected.\",\n            \"example\": \"fulfill(always(IO.putLine(\\\"does not exist\\\")), always(IO.putLine(\\\"exists\\\")), exists(\\\"/\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> Wish {} Boolean\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Http.mad\",\n      \"moduleName\": \"Http\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        {\n          \"js\": {\n            \"name\": \"Header\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"Header(String, String)\"\n            ],\n            \"description\": \"Http header, the unique constructor takes the header name as first parameter\\nand the value as second parameter\",\n            \"example\": \"Header(\\\"content-encoding\\\", \\\"gzip\\\")\",\n            \"since\": \"0.11.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Header\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"Header(String, String)\"\n            ],\n            \"description\": \"Http header, the unique constructor takes the header name as first parameter\\nand the value as second parameter\",\n            \"example\": \"Header(\\\"content-encoding\\\", \\\"gzip\\\")\",\n            \"since\": \"0.11.0\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Method\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"CONNECT\",\n              \"DELETE\",\n              \"GET\",\n              \"HEAD\",\n              \"OPTIONS\",\n              \"PATCH\",\n              \"POST\",\n              \"PUT\",\n              \"TRACE\"\n            ],\n            \"description\": \"Type representing the http method of a request\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Method\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"CONNECT\",\n              \"DELETE\",\n              \"GET\",\n              \"HEAD\",\n              \"OPTIONS\",\n              \"PATCH\",\n              \"POST\",\n              \"PUT\",\n              \"TRACE\"\n            ],\n            \"description\": \"Type representing the http method of a request\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"ClientError\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"AccessDenied\",\n              \"AddressNotFound\",\n              \"BadTransferEncoding\",\n              \"BadUrl(String)\",\n              \"ConnectionFailed\",\n              \"Http2FramingError\",\n              \"IncompleteResponse\",\n              \"InternalError\",\n              \"InvalidSSLCertificate\",\n              \"MalformedResponse\",\n              \"NotSupported\",\n              \"SSLConnectionFailed\",\n              \"SSLEngineNotFound\",\n              \"SSLInitializationFailed\",\n              \"Timeout\",\n              \"TooManyRedirects\",\n              \"UnresolvedProxy\",\n              \"UnsupportedProtocol\"\n            ],\n            \"description\": \"Type representing client errors such as BadUrl.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          },\n          \"llvm\": {\n            \"name\": \"ClientError\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"AccessDenied\",\n              \"AddressNotFound\",\n              \"BadTransferEncoding\",\n              \"BadUrl(String)\",\n              \"ConnectionFailed\",\n              \"Http2FramingError\",\n              \"IncompleteResponse\",\n              \"InternalError\",\n              \"InvalidSSLCertificate\",\n              \"MalformedResponse\",\n              \"NotSupported\",\n              \"SSLConnectionFailed\",\n              \"SSLEngineNotFound\",\n              \"SSLInitializationFailed\",\n              \"Timeout\",\n              \"TooManyRedirects\",\n              \"UnresolvedProxy\",\n              \"UnsupportedProtocol\"\n            ],\n            \"description\": \"Type representing client errors such as BadUrl.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Error\",\n            \"params\": \"a\",\n            \"constructors\": [\n              \"BadResponse((Response a))\",\n              \"ClientError(ClientError)\"\n            ],\n            \"description\": \"General Error type that can either be a BadResponse, in which case the request\\nhas been performed but responded with a status code >= 400, or a ClientError,\\nin which case no request has been issued because the request was not correct.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Error\",\n            \"params\": \"a\",\n            \"constructors\": [\n              \"BadResponse((Response a))\",\n              \"ClientError(ClientError)\"\n            ],\n            \"description\": \"General Error type that can either be a BadResponse, in which case the request\\nhas been performed but responded with a status code >= 400, or a ClientError,\\nin which case no request has been issued because the request was not correct.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          }\n        }\n      ],\n      \"aliases\": [\n        {\n          \"js\": {\n            \"name\": \"Status\",\n            \"params\": \"\",\n            \"aliasedType\": \"Integer\",\n            \"description\": \"Type alias for the http status code from a response\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Status\",\n            \"params\": \"\",\n            \"aliasedType\": \"Integer\",\n            \"description\": \"Type alias for the http status code from a response\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Response\",\n            \"params\": \"a\",\n            \"aliasedType\": \"{ body :: a, headers :: List Header, status :: Status }\",\n            \"description\": \"Type alias for the response record, representing a http response.\\nThe body field is parameterized and the type of the body will most\\nlikely be ByteArray or String, depending on which flavor of the\\nrequest functions you use and what kind of data you expect.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Response\",\n            \"params\": \"a\",\n            \"aliasedType\": \"{ body :: a, headers :: List Header, status :: Status }\",\n            \"description\": \"Type alias for the response record, representing a http response.\\nThe body field is parameterized and the type of the body will most\\nlikely be ByteArray or String, depending on which flavor of the\\nrequest functions you use and what kind of data you expect.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Request\",\n            \"params\": \"a\",\n            \"aliasedType\": \"{ body :: Maybe a, headers :: List Header, method :: Method, url :: String }\",\n            \"description\": \"Type alias representing requests. The body is optional and is thus a Maybe a,\\nwhere the body will most likely be a ByteArray or String, depending on what\\nkind of request you perform.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Request\",\n            \"params\": \"a\",\n            \"aliasedType\": \"{ body :: Maybe a, headers :: List Header, method :: Method, url :: String }\",\n            \"description\": \"Type alias representing requests. The body is optional and is thus a Maybe a,\\nwhere the body will most likely be a ByteArray or String, depending on what\\nkind of request you perform.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          }\n        }\n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"BadRequest\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"BadRequest\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Unauthorized\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"Unauthorized\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"PaymentRequired\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"PaymentRequired\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"NotFound\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"NotFound\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"OK\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"OK\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"getHeader\",\n            \"description\": \"Retrieves all the headers of a given name from a Response record.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> { body :: a, headers :: List Header, status :: Integer } -> List Header\"\n          },\n          \"llvm\": {\n            \"name\": \"getHeader\",\n            \"description\": \"Retrieves all the headers of a given name from a Response record.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> { body :: a, headers :: List Header, status :: Integer } -> List Header\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"methodStr\",\n            \"description\": \"Returns a string representation of a Method value.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Method -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"methodStr\",\n            \"description\": \"Returns a string representation of a Method value.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Method -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"request\",\n            \"description\": \"Generic function to perform http requests with a String body for the request and the response\",\n            \"example\": \"fulfill(IO.log, IO.log, request({\\n  body: \\\"Some data\\\",\\n  headers: [Header(\\\"Accept\\\", \\\"text/plain\\\")],\\n  method: GET,\\n  url: \\\"https://some.url\\\",\\n}))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"{ body :: Maybe String, headers :: List Header, method :: Method, url :: String } -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"request\",\n            \"description\": \"Generic function to perform http requests with a String body for the request and the response\",\n            \"example\": \"fulfill(IO.log, IO.log, request({\\n  body: \\\"Some data\\\",\\n  headers: [Header(\\\"Accept\\\", \\\"text/plain\\\")],\\n  method: GET,\\n  url: \\\"https://some.url\\\",\\n}))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"{ body :: Maybe String, headers :: List Header, method :: Method, url :: String } -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"requestBytes\",\n            \"description\": \"Generic function to perform http requests with a ByteArray body for the request and the response\",\n            \"example\": \"fulfill(IO.log, IO.log, request({\\n  body: ByteArray.fromString(\\\"Some data\\\"),\\n  headers: [Header(\\\"Accept\\\", \\\"text/plain\\\")],\\n  method: GET,\\n  url: \\\"https://some.url\\\",\\n}))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"{ body :: Maybe ByteArray, headers :: List Header, method :: Method, url :: String } -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"requestBytes\",\n            \"description\": \"Generic function to perform http requests with a ByteArray body for the request and the response\",\n            \"example\": \"fulfill(IO.log, IO.log, requestBytes({\\n  body: ByteArray.fromString(\\\"Some data\\\"),\\n  headers: [Header(\\\"Accept\\\", \\\"text/plain\\\")],\\n  method: GET,\\n  url: \\\"https://some.url\\\",\\n}))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"{ body :: Maybe ByteArray, headers :: List Header, method :: Method, url :: String } -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"get\",\n            \"description\": \"Function to perform a simple GET http request with a String body for the response\",\n            \"example\": \"fulfill(IO.log, IO.log, get(\\\"https://some.url\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"get\",\n            \"description\": \"Function to perform a simple GET http request with a String body for the response\",\n            \"example\": \"fulfill(IO.log, IO.log, get(\\\"https://some.url\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"getBytes\",\n            \"description\": \"Function to perform a simple GET http request with a ByteArray body for the response\",\n            \"example\": \"fulfill(IO.log, IO.log, getBytes(\\\"https://some.url\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"getBytes\",\n            \"description\": \"Function to perform a simple GET http request with a ByteArray body for the response\",\n            \"example\": \"fulfill(IO.log, IO.log, getBytes(\\\"https://some.url\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"getWithHeaders\",\n            \"description\": \"Function to perform a GET http request with a String body for the response.\\nIt also accepts a lit of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, getWithHeaders(\\\"https://some.url\\\", [Header(\\\"Accept\\\", \\\"text/plain\\\")]))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> List Header -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"getWithHeaders\",\n            \"description\": \"Function to perform a GET http request with a String body for the response.\\nIt also accepts a lit of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, getWithHeaders(\\\"https://some.url\\\", [Header(\\\"Accept\\\", \\\"text/plain\\\")]))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> List Header -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"getBytesWithHeaders\",\n            \"description\": \"Function to perform a GET http request with a ByteArray body for the response.\\nIt also accepts a lit of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, getBytesWithHeaders(\\\"https://some.url\\\", [Header(\\\"Accept\\\", \\\"text/plain\\\")]))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> List Header -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"getBytesWithHeaders\",\n            \"description\": \"Function to perform a GET http request with a ByteArray body for the response.\\nIt also accepts a lit of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, getBytesWithHeaders(\\\"https://some.url\\\", [Header(\\\"Accept\\\", \\\"text/plain\\\")]))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> List Header -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"post\",\n            \"description\": \"Function to perform a POST http request with a String body for the request and the response.\",\n            \"example\": \"fulfill(IO.log, IO.log, post(\\\"https://some.url\\\", \\\"Some body\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> String -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"post\",\n            \"description\": \"Function to perform a POST http request with a String body for the request and the response.\",\n            \"example\": \"fulfill(IO.log, IO.log, post(\\\"https://some.url\\\", \\\"Some body\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> String -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"postBytes\",\n            \"description\": \"Function to perform a POST http request with a ByteArray body for the request and the response.\",\n            \"example\": \"fulfill(IO.log, IO.log, postBytes(\\\"https://some.url\\\", ByteArray.fromString(\\\"Some body\\\")))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"postBytes\",\n            \"description\": \"Function to perform a POST http request with a ByteArray body for the request and the response.\",\n            \"example\": \"fulfill(IO.log, IO.log, postBytes(\\\"https://some.url\\\", ByteArray.fromString(\\\"Some body\\\")))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"postWithHeaders\",\n            \"description\": \"Function to perform a POST http request with a String body for the request and the response.\\nIt also accepts a list of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, postWithHeaders(\\\"https://some.url\\\", \\\"Some body\\\", [Header(\\\"Accept\\\", \\\"text/plain\\\")]))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> String -> List Header -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"postWithHeaders\",\n            \"description\": \"Function to perform a POST http request with a String body for the request and the response.\\nIt also accepts a list of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, postWithHeaders(\\\"https://some.url\\\", \\\"Some body\\\", [Header(\\\"Accept\\\", \\\"text/plain\\\")]))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> String -> List Header -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"postBytesWithHeaders\",\n            \"description\": \"Function to perform a POST http request with a ByteArray body for the request and the response.\\nIt also accepts a list of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, postBytesWithHeaders(\\n  \\\"https://some.url\\\",\\n  \\\"Some body\\\",\\n  [Header(\\\"Accept\\\", \\\"application/zip\\\")]\\n))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray -> List Header -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"postBytesWithHeaders\",\n            \"description\": \"Function to perform a POST http request with a ByteArray body for the request and the response.\\nIt also accepts a list of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, postBytesWithHeaders(\\n  \\\"https://some.url\\\",\\n  \\\"Some body\\\",\\n  [Header(\\\"Accept\\\", \\\"application/zip\\\")]\\n))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray -> List Header -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"put\",\n            \"description\": \"Function to perform a PUT http request with a String body for the request and the response.\",\n            \"example\": \"fulfill(IO.log, IO.log, put(\\\"https://some.url\\\", \\\"Some body\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> String -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"put\",\n            \"description\": \"Function to perform a PUT http request with a String body for the request and the response.\",\n            \"example\": \"fulfill(IO.log, IO.log, put(\\\"https://some.url\\\", \\\"Some body\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> String -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"putBytes\",\n            \"description\": \"Function to perform a PUT http request with a ByteArray body for the request and the response.\",\n            \"example\": \"fulfill(IO.log, IO.log, putBytes(\\\"https://some.url\\\", ByteArray.fromString(\\\"Some body\\\")))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"putBytes\",\n            \"description\": \"Function to perform a PUT http request with a ByteArray body for the request and the response.\",\n            \"example\": \"fulfill(IO.log, IO.log, putBytes(\\\"https://some.url\\\", ByteArray.fromString(\\\"Some body\\\")))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"putWithHeaders\",\n            \"description\": \"Function to perform a PUT http request with a String body for the request and the response.\\nIt also accepts a list of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, putWithHeaders(\\\"https://some.url\\\", \\\"Some body\\\", [Header(\\\"Accept\\\", \\\"text/plain\\\")]))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> String -> List Header -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"putWithHeaders\",\n            \"description\": \"Function to perform a PUT http request with a String body for the request and the response.\\nIt also accepts a list of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, putWithHeaders(\\\"https://some.url\\\", \\\"Some body\\\", [Header(\\\"Accept\\\", \\\"text/plain\\\")]))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> String -> List Header -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"putBytesWithHeaders\",\n            \"description\": \"Function to perform a PUT http request with a ByteArray body for the request and the response.\\nIt also accepts a list of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, putBytesWithHeaders(\\n  \\\"https://some.url\\\",\\n  \\\"Some body\\\",\\n  [Header(\\\"Accept\\\", \\\"application/zip\\\")]\\n))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray -> List Header -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"putBytesWithHeaders\",\n            \"description\": \"Function to perform a PUT http request with a ByteArray body for the request and the response.\\nIt also accepts a list of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, putBytesWithHeaders(\\n  \\\"https://some.url\\\",\\n  \\\"Some body\\\",\\n  [Header(\\\"Accept\\\", \\\"application/zip\\\")]\\n))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray -> List Header -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"delete\",\n            \"description\": \"Function to perform a DELETE http request with a String body for the request and the response.\",\n            \"example\": \"fulfill(IO.log, IO.log, delete(\\\"https://some.url\\\", \\\"Some body\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> String -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"delete\",\n            \"description\": \"Function to perform a DELETE http request with a String body for the request and the response.\",\n            \"example\": \"fulfill(IO.log, IO.log, delete(\\\"https://some.url\\\", \\\"Some body\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> String -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"deleteBytes\",\n            \"description\": \"Function to perform a DELETE http request with a ByteArray body for the request and the response.\",\n            \"example\": \"fulfill(IO.log, IO.log, deleteBytes(\\\"https://some.url\\\", ByteArray.fromString(\\\"Some body\\\")))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"deleteBytes\",\n            \"description\": \"Function to perform a DELETE http request with a ByteArray body for the request and the response.\",\n            \"example\": \"fulfill(IO.log, IO.log, deleteBytes(\\\"https://some.url\\\", ByteArray.fromString(\\\"Some body\\\")))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"deleteWithHeaders\",\n            \"description\": \"Function to perform a DELETE http request with a String body for the request and the response.\\nIt also accepts a list of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, deleteWithHeaders(\\\"https://some.url\\\", \\\"Some body\\\", [Header(\\\"Accept\\\", \\\"text/plain\\\")]))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> String -> List Header -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"deleteWithHeaders\",\n            \"description\": \"Function to perform a DELETE http request with a String body for the request and the response.\\nIt also accepts a list of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, deleteWithHeaders(\\\"https://some.url\\\", \\\"Some body\\\", [Header(\\\"Accept\\\", \\\"text/plain\\\")]))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> String -> List Header -> Wish (Error String) { body :: String, headers :: List Header, status :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"deleteBytesWithHeaders\",\n            \"description\": \"Function to perform a DELETE http request with a ByteArray body for the request and the response.\\nIt also accepts a list of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, deleteBytesWithHeaders(\\n  \\\"https://some.url\\\",\\n  \\\"Some body\\\",\\n  [Header(\\\"Accept\\\", \\\"application/zip\\\")]\\n))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray -> List Header -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"deleteBytesWithHeaders\",\n            \"description\": \"Function to perform a DELETE http request with a ByteArray body for the request and the response.\\nIt also accepts a list of headers.\",\n            \"example\": \"fulfill(IO.log, IO.log, deleteBytesWithHeaders(\\n  \\\"https://some.url\\\",\\n  \\\"Some body\\\",\\n  [Header(\\\"Accept\\\", \\\"application/zip\\\")]\\n))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray -> List Header -> Wish (Error ByteArray) { body :: ByteArray, headers :: List Header, status :: Integer }\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Monoid.mad\",\n      \"moduleName\": \"Monoid\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        {\n          \"js\": {\n            \"name\": \"Monoid\",\n            \"vars\": \"w\",\n            \"constraints\": \"Semigroup w\",\n            \"methods\": [\n              \"mconcat :: w -> w -> w\",\n              \"mempty :: w\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Monoid\",\n            \"vars\": \"w\",\n            \"constraints\": \"Semigroup w\",\n            \"methods\": [\n              \"mconcat :: w -> w -> w\",\n              \"mempty :: w\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        \n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Thread.mad\",\n      \"moduleName\": \"Thread\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"createMutex\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"{} -> Mutex\"\n          },\n          \"llvm\": {\n            \"name\": \"createMutex\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"{} -> Mutex\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"createLock\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"{} -> Lock\"\n          },\n          \"llvm\": {\n            \"name\": \"createLock\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"{} -> Lock\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"writeLock\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Lock -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"writeLock\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Lock -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"writeUnlock\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Lock -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"writeUnlock\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Lock -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"readLock\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Lock -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"readLock\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Lock -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"readUnlock\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Lock -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"readUnlock\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Lock -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"mutexLock\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Mutex -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"mutexLock\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Mutex -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"mutexUnlock\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Mutex -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"mutexUnlock\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Mutex -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"create\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"((a -> {}) -> (b -> {}) -> {}) -> Wish a b\"\n          },\n          \"llvm\": {\n            \"name\": \"create\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"((a -> {}) -> (b -> {}) -> {}) -> Wish a b\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Compare.mad\",\n      \"moduleName\": \"Compare\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        {\n          \"js\": {\n            \"name\": \"ComparisonResult\",\n            \"params\": \"\",\n            \"aliasedType\": \"Integer\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"ComparisonResult\",\n            \"params\": \"\",\n            \"aliasedType\": \"Integer\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"interfaces\": [\n        {\n          \"js\": {\n            \"name\": \"Comparable\",\n            \"vars\": \"a\",\n            \"constraints\": \"Eq a\",\n            \"methods\": [\n              \"compare :: a -> a -> ComparisonResult\"\n            ],\n            \"description\": \"The interface comparable allows a type to be compared. It contains only one method\\ncompare that can return one of 3 values:\\n  - 1 if the first parameter is greater than the second\\n  - -1 if the first parameter is less than the second\\n  - 0 if the two parameters are equal\\nFor convenience, the 3 values above have corresponding constants:\\n  - MORE\\n  - LESS\\n  - EQUAL\",\n            \"example\": \"compare(1, 2) // -1\\ncompare(2, 1) // 1\\ncompare(2, 2) // 0\",\n            \"since\": \"0.8.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Comparable\",\n            \"vars\": \"a\",\n            \"constraints\": \"Eq a\",\n            \"methods\": [\n              \"compare :: a -> a -> ComparisonResult\"\n            ],\n            \"description\": \"The interface comparable allows a type to be compared. It contains only one method\\ncompare that can return one of 3 values:\\n  - 1 if the first parameter is greater than the second\\n  - -1 if the first parameter is less than the second\\n  - 0 if the two parameters are equal\\nFor convenience, the 3 values above have corresponding constants:\\n  - MORE\\n  - LESS\\n  - EQUAL\",\n            \"example\": \"compare(1, 2) // -1\\ncompare(2, 1) // 1\\ncompare(2, 2) // 0\",\n            \"since\": \"0.8.0\"\n          }\n        }\n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"MORE\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"MORE\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"LESS\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"LESS\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"EQUAL\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"EQUAL\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"eq\",\n            \"description\": \"Returns true if two comparable values are equal\",\n            \"example\": \"eq(1, 3) // false\\neq(3, 3) // true\",\n            \"since\": \"0.13.0\",\n            \"type\": \"Comparable a => a -> a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"eq\",\n            \"description\": \"Returns true if two comparable values are equal\",\n            \"example\": \"eq(1, 3) // false\\neq(3, 3) // true\",\n            \"since\": \"0.13.0\",\n            \"type\": \"Comparable a => a -> a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"notEq\",\n            \"description\": \"Returns true if two comparable values aren\'t equal\",\n            \"example\": \"notEq(1, 3) // true\\nnotEq(3, 3) // false\",\n            \"since\": \"0.13.0\",\n            \"type\": \"Comparable a => a -> a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"notEq\",\n            \"description\": \"Returns true if two comparable values aren\'t equal\",\n            \"example\": \"notEq(1, 3) // true\\nnotEq(3, 3) // false\",\n            \"since\": \"0.13.0\",\n            \"type\": \"Comparable a => a -> a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"gt\",\n            \"description\": \"Takes two comparable values of the same type that implements Comparable and\\nreturn true if the first parameter is strictly greater than the second.\",\n            \"example\": \"gt(3, 2) // true\\ngt(3, 3) // false\",\n            \"since\": \"0.8.0\",\n            \"type\": \"Comparable a => a -> a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"gt\",\n            \"description\": \"Takes two comparable values of the same type that implements Comparable and\\nreturn true if the first parameter is strictly greater than the second.\",\n            \"example\": \"gt(3, 2) // true\\ngt(3, 3) // false\",\n            \"since\": \"0.8.0\",\n            \"type\": \"Comparable a => a -> a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"ge\",\n            \"description\": \"Takes two comparable values of the same type that implements Comparable and\\nreturn true if the first parameter is greater than the second or if they are\\nequal.\",\n            \"example\": \"gt(3, 2) // true\\ngt(3, 3) // true\",\n            \"since\": \"0.8.0\",\n            \"type\": \"Comparable a => a -> a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"ge\",\n            \"description\": \"Takes two comparable values of the same type that implements Comparable and\\nreturn true if the first parameter is greater than the second or if they are\\nequal.\",\n            \"example\": \"gt(3, 2) // true\\ngt(3, 3) // true\",\n            \"since\": \"0.8.0\",\n            \"type\": \"Comparable a => a -> a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"lt\",\n            \"description\": \"Takes two comparable values of the same type that implements Comparable and\\nreturn true if the first parameter is strictly less than the second.\",\n            \"example\": \"lt(3, 2) // false\\nlt(3, 4) // true\\nlt(3, 3) // false\",\n            \"since\": \"0.8.0\",\n            \"type\": \"Comparable a => a -> a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"lt\",\n            \"description\": \"Takes two comparable values of the same type that implements Comparable and\\nreturn true if the first parameter is strictly less than the second.\",\n            \"example\": \"lt(3, 2) // false\\nlt(3, 4) // true\\nlt(3, 3) // false\",\n            \"since\": \"0.8.0\",\n            \"type\": \"Comparable a => a -> a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"le\",\n            \"description\": \"Takes two comparable values of the same type that implements Comparable and\\nreturn true if the first parameter is less than the second or if they are\\nequal.\",\n            \"example\": \"le(3, 2) // false\\nle(3, 4) // true\\nle(3, 3) // true\",\n            \"since\": \"0.8.0\",\n            \"type\": \"Comparable a => a -> a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"le\",\n            \"description\": \"Takes two comparable values of the same type that implements Comparable and\\nreturn true if the first parameter is less than the second or if they are\\nequal.\",\n            \"example\": \"le(3, 2) // false\\nle(3, 4) // true\\nle(3, 3) // true\",\n            \"since\": \"0.8.0\",\n            \"type\": \"Comparable a => a -> a -> Boolean\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Url.mad\",\n      \"moduleName\": \"Url\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"encode\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Maybe String\"\n          },\n          \"llvm\": {\n            \"name\": \"encode\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Maybe String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"decode\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Maybe String\"\n          },\n          \"llvm\": {\n            \"name\": \"decode\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Maybe String\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/String.mad\",\n      \"moduleName\": \"String\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Semigroup\",\n            \"declaration\": \"Semigroup String\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Semigroup\",\n            \"declaration\": \"Semigroup String\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Monoid\",\n            \"declaration\": \"Monoid String\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Monoid\",\n            \"declaration\": \"Monoid String\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable String\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable String\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"toLower\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"toLower\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"toUpper\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"toUpper\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"split\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String -> List String\"\n          },\n          \"llvm\": {\n            \"name\": \"split\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String -> List String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"join\",\n            \"description\": \"Joins a list with a separator and returns a String.\\n\\nIMPORTANT:\\nWhen coming from JS, beware that there is a small difference with Array.prototype.join.\\nIn JS, join relies on its dynamic nature and accepts any type as being valid, and transforms it\\nto a string for you. In Madlib you need to provide an instance of Show for your custom types, and\\nfor Madlib types (eg. tuples, List, Boolean, Maybe) it uses the Show instance defined for them.\",\n            \"example\": \"join(\\\" and \\\", [\\\"cats\\\", \\\"dogs\\\"])   // \\\"cats and dogs\\\"\\njoin(\\\"\\\", [\\\"one\\\", \\\"two\\\", \\\"three\\\"]) // \\\"onetwothree\\\"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"String -> List String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"join\",\n            \"description\": \"Joins a list with a separator and returns a String.\\n\\nIMPORTANT:\\nWhen coming from JS, beware that there is a small difference with Array.prototype.join.\\nIn JS, join relies on its dynamic nature and accepts any type as being valid, and transforms it\\nto a string for you. In Madlib you need to provide an instance of Show for your custom types, and\\nfor Madlib types (eg. tuples, List, Boolean, Maybe) it uses the Show instance defined for them.\",\n            \"example\": \"join(\\\" and \\\", [\\\"cats\\\", \\\"dogs\\\"])   // \\\"cats and dogs\\\"\\njoin(\\\"\\\", [\\\"one\\\", \\\"two\\\", \\\"three\\\"]) // \\\"onetwothree\\\"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"String -> List String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"lines\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> List String\"\n          },\n          \"llvm\": {\n            \"name\": \"lines\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> List String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"unlines\",\n            \"description\": \"Transform a List of Strings into a single String,\\nby adding newlines between each item in the List.\",\n            \"example\": \"unlines([\\\"line1\\\", \\\"line2\\\", \\\"line3\\\"]) // \\\"line1\\\\nline2\\\\nline3\\\"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"unlines\",\n            \"description\": \"Transform a List of Strings into a single String,\\nby adding newlines between each item in the List.\",\n            \"example\": \"unlines([\\\"line1\\\", \\\"line2\\\", \\\"line3\\\"]) // \\\"line1\\\\nline2\\\\nline3\\\"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"List String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"words\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> List String\"\n          },\n          \"llvm\": {\n            \"name\": \"words\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> List String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"unwords\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"unwords\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"toList\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> List Char\"\n          },\n          \"llvm\": {\n            \"name\": \"toList\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> List Char\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"fromList\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List Char -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"fromList\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List Char -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"mapChars\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(Char -> Char) -> String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"mapChars\",\n            \"description\": \"maps the chars of a String\",\n            \"example\": \"\",\n            \"since\": \"0.12.0\",\n            \"type\": \"(Char -> Char) -> String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"filterChars\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(Char -> Boolean) -> String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"filterChars\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(Char -> Boolean) -> String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"reduceChars\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> Char -> a) -> a -> String -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"reduceChars\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> Char -> a) -> a -> String -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"slice\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> Integer -> String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"slice\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> Integer -> String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"isEmpty\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"isEmpty\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"drop\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"drop\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"dropLast\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"dropLast\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"dropWhile\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(Char -> Boolean) -> String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"dropWhile\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(Char -> Boolean) -> String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"take\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"take\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"takeLast\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"takeLast\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"takeWhile\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(Char -> Boolean) -> String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"takeWhile\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(Char -> Boolean) -> String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"charAt\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> String -> Maybe Char\"\n          },\n          \"llvm\": {\n            \"name\": \"charAt\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> String -> Maybe Char\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"firstChar\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Maybe Char\"\n          },\n          \"llvm\": {\n            \"name\": \"firstChar\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Maybe Char\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"lastChar\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Maybe Char\"\n          },\n          \"llvm\": {\n            \"name\": \"lastChar\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Maybe Char\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"trim\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"trim\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"trimStart\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"trimStart\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"trimEnd\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"trimEnd\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"length\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"length\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"repeat\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Char -> Integer -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"repeat\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Char -> Integer -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"match\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"match\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"replace\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String -> String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"replace\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> String -> String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"pushChar\",\n            \"description\": \"pushes a char at the beginning of a String\",\n            \"example\": \"\",\n            \"since\": \"0.12.0\",\n            \"type\": \"Char -> String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"pushChar\",\n            \"description\": \"pushes a char at the beginning of a String\",\n            \"example\": \"\",\n            \"since\": \"0.12.0\",\n            \"type\": \"Char -> String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"appendChar\",\n            \"description\": \"appends a char at the end of a String\",\n            \"example\": \"\",\n            \"since\": \"0.12.0\",\n            \"type\": \"Char -> String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"appendChar\",\n            \"description\": \"appends a char at the end of a String\",\n            \"example\": \"\",\n            \"since\": \"0.12.0\",\n            \"type\": \"Char -> String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"reverse\",\n            \"description\": \"Reverses the given string.\",\n            \"example\": \"reverse(\\\"abc\\\") // \\\"cba\\\"\",\n            \"since\": \"0.5.0\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"reverse\",\n            \"description\": \"Reverses the given string.\",\n            \"example\": \"reverse(\\\"abc\\\") // \\\"cba\\\"\",\n            \"since\": \"0.5.0\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"includes\",\n            \"description\": \"Returns true if the given character is in the given string.\",\n            \"example\": \"includes(\'b\', \\\"abüc\\\") // true\",\n            \"since\": \"0.18.6\",\n            \"type\": \"Char -> String -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"includes\",\n            \"description\": \"Returns true if the given character is in the given string.\",\n            \"example\": \"includes(\'b\', \\\"abüc\\\") // true\",\n            \"since\": \"0.18.6\",\n            \"type\": \"Char -> String -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"startsWith\",\n            \"description\": \"Returns true if the second string starts with the second one.\",\n            \"example\": \"startsWith(\\\"ab\\\", \\\"abüc\\\") // true\\nstartsWith(\\\"bü\\\", \\\"abüc\\\") // false\",\n            \"since\": \"0.18.6\",\n            \"type\": \"String -> String -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"startsWith\",\n            \"description\": \"Returns true if the second string starts with the second one.\",\n            \"example\": \"startsWith(\\\"ab\\\", \\\"abüc\\\") // true\\nstartsWith(\\\"bü\\\", \\\"abüc\\\") // false\",\n            \"since\": \"0.18.6\",\n            \"type\": \"String -> String -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"contains\",\n            \"description\": \"Returns true if the first string is contained in the second one.\",\n            \"example\": \"contains(\\\"b\\\", \\\"abüc\\\")  // true\\ncontains(\\\"aü\\\", \\\"abüc\\\") // false\",\n            \"since\": \"0.18.6\",\n            \"type\": \"String -> String -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"contains\",\n            \"description\": \"Returns true if the first string is contained in the second one.\",\n            \"example\": \"contains(\\\"b\\\", \\\"abüc\\\")  // true\\ncontains(\\\"aü\\\", \\\"abüc\\\") // false\",\n            \"since\": \"0.18.6\",\n            \"type\": \"String -> String -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"endsWith\",\n            \"description\": \"Returns true if the second string ends with the first one.\",\n            \"example\": \"endsWith(\\\"c\\\", \\\"abüc\\\")  // true\\nendsWith(\\\"bü\\\", \\\"abüc\\\") // false\",\n            \"since\": \"0.18.6\",\n            \"type\": \"String -> String -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"endsWith\",\n            \"description\": \"Returns true if the second string ends with the first one.\",\n            \"example\": \"endsWith(\\\"c\\\", \\\"abüc\\\")  // true\\nendsWith(\\\"bü\\\", \\\"abüc\\\") // false\",\n            \"since\": \"0.18.6\",\n            \"type\": \"String -> String -> Boolean\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Set.mad\",\n      \"moduleName\": \"Set\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor Set\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor Set\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"fromList\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Comparable a => List a -> Set a\"\n          },\n          \"llvm\": {\n            \"name\": \"fromList\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Comparable a => List a -> Set a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"toList\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Set a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"toList\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Set a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"insert\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Comparable a => a -> Set a -> Set a\"\n          },\n          \"llvm\": {\n            \"name\": \"insert\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Comparable a => a -> Set a -> Set a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"filter\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> Boolean) -> Set a -> Set a\"\n          },\n          \"llvm\": {\n            \"name\": \"filter\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> Boolean) -> Set a -> Set a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"reduce\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> a) -> a -> Set b -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"reduce\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> a) -> a -> Set b -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"merge\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Comparable a => Set a -> Set a -> Set a\"\n          },\n          \"llvm\": {\n            \"name\": \"merge\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Comparable a => Set a -> Set a -> Set a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"includes\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Eq a => a -> Set a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"includes\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Eq a => a -> Set a -> Boolean\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Coverage.mad\",\n      \"moduleName\": \"Coverage\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable CoverableLine\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable CoverableLine\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable CoverableFunction\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable CoverableFunction\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable CoverableBranch\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable CoverableBranch\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"stringify\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List { brdas :: List LcovLine, brf :: LcovLine, brh :: LcovLine, das :: List LcovLine, fndas :: List LcovLine, fnf :: LcovLine, fnh :: LcovLine, fns :: List LcovLine, lf :: LcovLine, lh :: LcovLine, sf :: LcovLine, tn :: LcovLine } -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"stringify\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List { brdas :: List LcovLine, brf :: LcovLine, brh :: LcovLine, das :: List LcovLine, fndas :: List LcovLine, fnf :: LcovLine, fnh :: LcovLine, fns :: List LcovLine, lf :: LcovLine, lh :: LcovLine, sf :: LcovLine, tn :: LcovLine } -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Reporter\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"{ branchTracker :: String -> Integer -> Integer -> Integer -> { increment :: {} -> {}, read :: {} -> Integer }, functionTracker :: String -> Integer -> String -> { increment :: {} -> {}, read :: {} -> Integer }, generateReport :: a -> {}, lineTracker :: String -> Integer -> { increment :: {} -> {}, read :: {} -> Integer } }\"\n          },\n          \"llvm\": {\n            \"name\": \"Reporter\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"{ branchTracker :: String -> Integer -> Integer -> Integer -> { increment :: {} -> {}, read :: {} -> Integer }, functionTracker :: String -> Integer -> String -> { increment :: {} -> {}, read :: {} -> Integer }, generateReport :: a -> {}, lineTracker :: String -> Integer -> { increment :: {} -> {}, read :: {} -> Integer } }\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Process.mad\",\n      \"moduleName\": \"Process\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        {\n          \"js\": {\n            \"name\": \"CommandResult\",\n            \"params\": \"\",\n            \"aliasedType\": \"{ exitCode :: Integer, stderr :: String, stdout :: String }\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"CommandResult\",\n            \"params\": \"\",\n            \"aliasedType\": \"{ exitCode :: Integer, stderr :: String, stdout :: String }\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"CommandOptions\",\n            \"params\": \"\",\n            \"aliasedType\": \"{ cwd :: String, env :: Dictionary String String }\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"CommandOptions\",\n            \"params\": \"\",\n            \"aliasedType\": \"{ cwd :: String, env :: Dictionary String String }\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"exec\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> List String -> { cwd :: String, env :: Dictionary String String } -> Wish { exitCode :: Integer, stderr :: String, stdout :: String } { exitCode :: Integer, stderr :: String, stdout :: String }\"\n          },\n          \"llvm\": {\n            \"name\": \"exec\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> List String -> { cwd :: String, env :: Dictionary String String } -> Wish { exitCode :: Integer, stderr :: String, stdout :: String } { exitCode :: Integer, stderr :: String, stdout :: String }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Argv\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List String\"\n          },\n          \"llvm\": {\n            \"name\": \"Argv\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Env\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Dictionary String String\"\n          },\n          \"llvm\": {\n            \"name\": \"Env\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Dictionary String String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"getCurrentWorkingDirectory\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"a -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"getCurrentWorkingDirectory\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"a -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"exit\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"exit\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"onExit\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> {}) -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"onExit\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> {}) -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"getExecutablePath\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"a -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"getExecutablePath\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"a -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"getEnv\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Maybe String\"\n          },\n          \"llvm\": {\n            \"name\": \"getEnv\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Maybe String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"DEFAULT_COMMAND_OPTIONS\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"{ cwd :: String, env :: Dictionary String String }\"\n          },\n          \"llvm\": {\n            \"name\": \"DEFAULT_COMMAND_OPTIONS\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"{ cwd :: String, env :: Dictionary String String }\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Control.mad\",\n      \"moduleName\": \"Control\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"while\",\n            \"description\": \"Executes the given function until it returns false.\",\n            \"example\": \"x = 0\\nwhile(() => {\\n  x = x + 1\\n  return x != 5\\n})\\n// x == 5\",\n            \"since\": \"0.13.0\",\n            \"type\": \"({} -> Boolean) -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"while\",\n            \"description\": \"Executes the given function until it returns false.\",\n            \"example\": \"x = 0\\nwhile(() => {\\n  x = x + 1\\n  return x != 5\\n})\\n// x == 5\",\n            \"since\": \"0.13.0\",\n            \"type\": \"({} -> Boolean) -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"loop\",\n            \"description\": \"Given a start value, a predicate function and a transformation function,\\nit applies the transformation function to the value until the predicate\\nfunction returns false.\",\n            \"example\": \"loop(1, (x) => x < 10, (x) => x * 2) // 16\",\n            \"since\": \"0.13.0\",\n            \"type\": \"a -> (a -> Boolean) -> (a -> a) -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"loop\",\n            \"description\": \"Given a start value, a predicate function and a transformation function,\\nit applies the transformation function to the value until the predicate\\nfunction returns false.\",\n            \"example\": \"loop(1, (x) => x < 10, (x) => x * 2) // 16\",\n            \"since\": \"0.13.0\",\n            \"type\": \"a -> (a -> Boolean) -> (a -> a) -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"maybeLoop\",\n            \"description\": \"A function to perform loops. Might be useful as an alternative to recursion\\nwhen the stack size might be a concern.\\nIt takes an initial value, a transformation function that must return a Maybe.\\nIt returns the value contained in the Just in the last iteration before a\\nNothing was returned.\",\n            \"example\": \"maybeLoop(\\n  1,\\n  (x) => x < 10\\n    ? Just(x * 2)\\n    : Nothing\\n)\\n// 16\",\n            \"since\": \"0.7.0\",\n            \"type\": \"a -> (a -> Maybe a) -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"maybeLoop\",\n            \"description\": \"A function to perform loops. Might be useful as an alternative to recursion\\nwhen the stack size might be a concern.\\nIt takes an initial value, a transformation function that must return a Maybe.\\nIt returns the value contained in the Just in the last iteration before a\\nNothing was returned.\",\n            \"example\": \"maybeLoop(\\n  1,\\n  (x) => x < 10\\n    ? Just(x * 2)\\n    : Nothing\\n)\\n// 16\",\n            \"since\": \"0.7.0\",\n            \"type\": \"a -> (a -> Maybe a) -> a\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Monad.mad\",\n      \"moduleName\": \"Monad\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        {\n          \"js\": {\n            \"name\": \"Monad\",\n            \"vars\": \"m\",\n            \"constraints\": \"Applicative m\",\n            \"methods\": [\n              \"chain :: (a -> m b) -> m a -> m b\",\n              \"of :: a -> m a\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"0.0.8\"\n          },\n          \"llvm\": {\n            \"name\": \"Monad\",\n            \"vars\": \"m\",\n            \"constraints\": \"Applicative m\",\n            \"methods\": [\n              \"chain :: (a -> m b) -> m a -> m b\",\n              \"of :: a -> m a\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"0.0.8\"\n          }\n        }\n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"chain2\",\n            \"description\": \"chains two monads\",\n            \"example\": \"chain2((a, b) => of(a + b), Just(1), Just(3)) // Just(4)\",\n            \"since\": \"0.0.8\",\n            \"type\": \"Monad m => (a -> b -> m c) -> m a -> m b -> m c\"\n          },\n          \"llvm\": {\n            \"name\": \"chain2\",\n            \"description\": \"chains two monads\",\n            \"example\": \"chain2((a, b) => of(a + b), Just(1), Just(3)) // Just(4)\",\n            \"since\": \"0.0.8\",\n            \"type\": \"Monad m => (a -> b -> m c) -> m a -> m b -> m c\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"andDo\",\n            \"description\": \"chains two monads and returns the first one, discarding the\\nvalue from the second one.\",\n            \"example\": \"andDo(Just(3), Just(4)) // Just(3)\",\n            \"since\": \"0.0.8\",\n            \"type\": \"Monad m => m a -> m b -> m a\"\n          },\n          \"llvm\": {\n            \"name\": \"andDo\",\n            \"description\": \"chains two monads and returns the first one, discarding the\\nvalue from the second one.\",\n            \"example\": \"andDo(Just(3), Just(4)) // Just(3)\",\n            \"since\": \"0.0.8\",\n            \"type\": \"Monad m => m a -> m b -> m a\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Semigroup.mad\",\n      \"moduleName\": \"Semigroup\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        {\n          \"js\": {\n            \"name\": \"Semigroup\",\n            \"vars\": \"a\",\n            \"constraints\": \"\",\n            \"methods\": [\n              \"assoc :: a -> a -> a\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Semigroup\",\n            \"vars\": \"a\",\n            \"constraints\": \"\",\n            \"methods\": [\n              \"assoc :: a -> a -> a\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        \n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Math.mad\",\n      \"moduleName\": \"Math\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"add\",\n            \"description\": \"Sum two numbers\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Number a => a -> a -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"add\",\n            \"description\": \"Sum two numbers\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Number a => a -> a -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"substract\",\n            \"description\": \"Calculate the difference between two numbers\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Number a => a -> a -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"substract\",\n            \"description\": \"Calculate the difference between two numbers\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Number a => a -> a -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"multiply\",\n            \"description\": \"Return the product of two numbers\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Number a => a -> a -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"multiply\",\n            \"description\": \"Return the product of two numbers\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Number a => a -> a -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"divide\",\n            \"description\": \"Calculate how many times a number can be contained in another number\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Float -> Float -> Float\"\n          },\n          \"llvm\": {\n            \"name\": \"divide\",\n            \"description\": \"Calculate how many times a number can be contained in another number\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Float -> Float -> Float\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"mod\",\n            \"description\": \"Return the euclidean division of one number by another\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Integer -> Integer -> Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"mod\",\n            \"description\": \"Return the euclidean division of one number by another\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Integer -> Integer -> Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"sqrt\",\n            \"description\": \"Find the number which, when multiplied by itself equals the given number.\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Float -> Float\"\n          },\n          \"llvm\": {\n            \"name\": \"sqrt\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Float\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"round\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Float\"\n          },\n          \"llvm\": {\n            \"name\": \"round\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Float\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"ceil\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Float\"\n          },\n          \"llvm\": {\n            \"name\": \"ceil\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Float\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"floor\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Float\"\n          },\n          \"llvm\": {\n            \"name\": \"floor\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Float\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"pow\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Float -> Float\"\n          },\n          \"llvm\": {\n            \"name\": \"pow\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Float -> Float\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"random\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"a -> Float\"\n          },\n          \"llvm\": {\n            \"name\": \"random\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"a -> Float\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"square\",\n            \"description\": \"Find the result of a number times itself\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Number a => a -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"square\",\n            \"description\": \"Find the result of a number times itself\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Number a => a -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"min\",\n            \"description\": \"Returns the smallest number from the two given\",\n            \"example\": \"\",\n            \"since\": \"0.12.0\",\n            \"type\": \"Number a => a -> a -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"min\",\n            \"description\": \"Returns the smallest number from the two given\",\n            \"example\": \"\",\n            \"since\": \"0.12.0\",\n            \"type\": \"Number a => a -> a -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"max\",\n            \"description\": \"Returns the biggest number from the two given\",\n            \"example\": \"\",\n            \"since\": \"0.12.0\",\n            \"type\": \"Number a => a -> a -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"max\",\n            \"description\": \"Returns the biggest number from the two given\",\n            \"example\": \"\",\n            \"since\": \"0.12.0\",\n            \"type\": \"Number a => a -> a -> a\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/IOError.mad\",\n      \"moduleName\": \"IOError\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        {\n          \"js\": {\n            \"name\": \"IOError\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"ArgumentListToLong\",\n              \"PermissionDenied\",\n              \"AddressAlreadyInUse\",\n              \"UnknownError\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"IOError\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"ArgumentListToLong\",\n              \"PermissionDenied\",\n              \"AddressAlreadyInUse\",\n              \"UnknownError\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"fromLibuvError\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> IOError\"\n          },\n          \"llvm\": {\n            \"name\": \"fromLibuvError\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> IOError\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Parse.mad\",\n      \"moduleName\": \"Parse\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        {\n          \"js\": {\n            \"name\": \"Location\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"Loc(Integer, Integer, Integer)\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Location\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"Loc(Integer, Integer, Integer)\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Parser\",\n            \"params\": \"a\",\n            \"constructors\": [\n              \"Parser((String -> Location -> #[List #[a, String], Location]))\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Parser\",\n            \"params\": \"a\",\n            \"constructors\": [\n              \"Parser((String -> Location -> #[List #[a, String], Location]))\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Error\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"Error(Location)\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Error\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"Error(Location)\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor Parser\",\n            \"constraints\": \"\",\n            \"description\": \"maps the contained value of a Parser.\",\n            \"example\": \"type Letter = Letter String\\nmap(Letter, anyChar) // Parser Letter\",\n            \"since\": \"0.0.1\"\n          },\n          \"llvm\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor Parser\",\n            \"constraints\": \"\",\n            \"description\": \"maps the contained value of a Parser.\",\n            \"example\": \"type Letter = Letter String\\nmap(Letter, anyChar) // Parser Letter\",\n            \"since\": \"0.0.1\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Applicative\",\n            \"declaration\": \"Applicative Parser\",\n            \"constraints\": \"\",\n            \"description\": \"This the heart of how parser combinators work. With ap you can apply many\\narguments to a mapping function.\",\n            \"example\": \"parser = pipe(\\n  map((a, b, c) => a ++ b ++ c),\\n  ap($, abcParser),\\n  ap($, abcParser)\\n)(abcParser)\",\n            \"since\": \"0.0.1\"\n          },\n          \"llvm\": {\n            \"name\": \"Applicative\",\n            \"declaration\": \"Applicative Parser\",\n            \"constraints\": \"\",\n            \"description\": \"This the heart of how parser combinators work. With ap you can apply many\\narguments to a mapping function.\",\n            \"example\": \"parser = pipe(\\n  map((a, b, c) => a ++ b ++ c),\\n  ap($, abcParser),\\n  ap($, abcParser)\\n)(abcParser)\",\n            \"since\": \"0.0.1\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Monad\",\n            \"declaration\": \"Monad Parser\",\n            \"constraints\": \"\",\n            \"description\": \"The Monad instance of Parser helps when you need to parse something based on\\nthe previous computation.\",\n            \"example\": \"\",\n            \"since\": \"0.0.1\"\n          },\n          \"llvm\": {\n            \"name\": \"Monad\",\n            \"declaration\": \"Monad Parser\",\n            \"constraints\": \"\",\n            \"description\": \"The Monad instance of Parser helps when you need to parse something based on\\nthe previous computation.\",\n            \"example\": \"\",\n            \"since\": \"0.0.1\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Alternative\",\n            \"declaration\": \"Alternative Parser\",\n            \"constraints\": \"\",\n            \"description\": \"Alternative provides a way to fail over in case a parser failed. alt takes two\\nparsers, and if the first one fails, it tries to run the second one.\",\n            \"example\": \"runParser(alt(char(\\\"c\\\"), char(\\\"a\\\")), \\\"a\\\") // Right \\\"a\\\"\",\n            \"since\": \"0.0.1\"\n          },\n          \"llvm\": {\n            \"name\": \"Alternative\",\n            \"declaration\": \"Alternative Parser\",\n            \"constraints\": \"\",\n            \"description\": \"Alternative provides a way to fail over in case a parser failed. alt takes two\\nparsers, and if the first one fails, it tries to run the second one.\",\n            \"example\": \"runParser(alt(char(\\\"c\\\"), char(\\\"a\\\")), \\\"a\\\") // Right \\\"a\\\"\",\n            \"since\": \"0.0.1\"\n          }\n        }\n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"runParser\",\n            \"description\": \"Runs a given parser with a given input. If it successful it returns a Right\\nof the parsed type, otherwise it returns an error with the location of where\\nit failed.\",\n            \"example\": \"runParser(anyChar, \\\"a\\\")\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser a -> String -> Either Error a\"\n          },\n          \"llvm\": {\n            \"name\": \"runParser\",\n            \"description\": \"Runs a given parser with a given input. If it successful it returns a Right\\nof the parsed type, otherwise it returns an error with the location of where\\nit failed.\",\n            \"example\": \"runParser(anyChar, \\\"a\\\")\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser a -> String -> Either Error a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"fail\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Parser a\"\n          },\n          \"llvm\": {\n            \"name\": \"fail\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Parser a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"anyChar\",\n            \"description\": \"A parser combinator that matches any character and returns a Parser String\\ncontaining that character.\",\n            \"example\": \"parse(anyChar, \\\"?\\\") // Right \\\"?\\\"\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser Char\"\n          },\n          \"llvm\": {\n            \"name\": \"anyChar\",\n            \"description\": \"A parser combinator that matches any character and returns a Parser String\\ncontaining that character.\",\n            \"example\": \"parse(anyChar, \\\"?\\\") // Right \\\"?\\\"\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser Char\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"location\",\n            \"description\": \"A parser combinator that returns the current location in the given input. This\\ncombinator can be used to collect location information for your parsed AST.\",\n            \"example\": \"type Letter = L Location Location String\\nexpected = Right()\\n\\nabcParser = pipe(\\n  map((start, c, end) => L(start, end, c)),\\n  ap($, oneOf([\\\"a\\\", \\\"b\\\", \\\"c\\\"])),\\n  ap($, location)\\n)(location)\\n\\nparser = pipe(\\n  map((a, b, c) => [a, b, c]),\\n  ap($, abcParser),\\n  ap($, abcParser)\\n)(abcParser)\\n\\nrunParser(parser, \\\"cba\\\")\\n// Right [\\n//   L(Loc(0, 0, 0), Loc(1, 0, 1), \\\"c\\\"),\\n//   L(Loc(1, 0, 1), Loc(2, 0, 2), \\\"b\\\"),\\n//   L(Loc(2, 0, 2), Loc(3, 0, 3), \\\"a\\\")\\n// ]\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser Location\"\n          },\n          \"llvm\": {\n            \"name\": \"location\",\n            \"description\": \"A parser combinator that returns the current location in the given input. This\\ncombinator can be used to collect location information for your parsed AST.\",\n            \"example\": \"type Letter = L Location Location String\\nexpected = Right()\\n\\nabcParser = pipe(\\n  map((start, c, end) => L(start, end, c)),\\n  ap($, oneOf([\\\"a\\\", \\\"b\\\", \\\"c\\\"])),\\n  ap($, location)\\n)(location)\\n\\nparser = pipe(\\n  map((a, b, c) => [a, b, c]),\\n  ap($, abcParser),\\n  ap($, abcParser)\\n)(abcParser)\\n\\nrunParser(parser, \\\"cba\\\")\\n// Right [\\n//   L(Loc(0, 0, 0), Loc(1, 0, 1), \\\"c\\\"),\\n//   L(Loc(1, 0, 1), Loc(2, 0, 2), \\\"b\\\"),\\n//   L(Loc(2, 0, 2), Loc(3, 0, 3), \\\"a\\\")\\n// ]\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser Location\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"oneOf\",\n            \"description\": \"A parser combinator that matches any of the given characters.\",\n            \"example\": \"runParser(oneOf([\\\"1\\\", \\\"-\\\", \\\"?\\\"]), \\\"?\\\") // Right \\\"?\\\"\\nrunParser(oneOf([\\\"1\\\", \\\"-\\\", \\\"?\\\"]), \\\"1\\\") // Right \\\"1\\\"\\nrunParser(oneOf([\\\"1\\\", \\\"-\\\", \\\"?\\\"]), \\\"2\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"List Char -> Parser Char\"\n          },\n          \"llvm\": {\n            \"name\": \"oneOf\",\n            \"description\": \"A parser combinator that matches any of the given characters.\",\n            \"example\": \"runParser(oneOf([\\\"1\\\", \\\"-\\\", \\\"?\\\"]), \\\"?\\\") // Right \\\"?\\\"\\nrunParser(oneOf([\\\"1\\\", \\\"-\\\", \\\"?\\\"]), \\\"1\\\") // Right \\\"1\\\"\\nrunParser(oneOf([\\\"1\\\", \\\"-\\\", \\\"?\\\"]), \\\"2\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"List Char -> Parser Char\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"notOneOf\",\n            \"description\": \"A parser combinator that matches all except the given characters.\",\n            \"example\": \"runParser(notOneOf([\\\"1\\\", \\\"-\\\", \\\"?\\\"]), \\\"?\\\") // Left (Loc 0 0 0)\\nrunParser(notOneOf([\\\"1\\\", \\\"-\\\", \\\"?\\\"]), \\\"1\\\") // Left (Loc 0 0 0)\\nrunParser(notOneOf([\\\"1\\\", \\\"-\\\", \\\"?\\\"]), \\\"2\\\") // Right \\\"2\\\"\",\n            \"since\": \"0.0.1\",\n            \"type\": \"List Char -> Parser Char\"\n          },\n          \"llvm\": {\n            \"name\": \"notOneOf\",\n            \"description\": \"A parser combinator that matches all except the given characters.\",\n            \"example\": \"runParser(notOneOf([\\\"1\\\", \\\"-\\\", \\\"?\\\"]), \\\"?\\\") // Left (Loc 0 0 0)\\nrunParser(notOneOf([\\\"1\\\", \\\"-\\\", \\\"?\\\"]), \\\"1\\\") // Left (Loc 0 0 0)\\nrunParser(notOneOf([\\\"1\\\", \\\"-\\\", \\\"?\\\"]), \\\"2\\\") // Right \\\"2\\\"\",\n            \"since\": \"0.0.1\",\n            \"type\": \"List Char -> Parser Char\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"choice\",\n            \"description\": \"A parser combinator that successively tries all given parsers until one\\nsucceeds, or fails if none has succeeded.\",\n            \"example\": \"parser = choice([string(\\\"good\\\"), string(\\\"really good\\\")])\\nrunParser(parser, \\\"good\\\")        // Right \\\"good\\\"\\nrunParser(parser, \\\"really good\\\") // Right \\\"really good\\\"\\nrunParser(parser, \\\"really\\\")      // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"List (Parser a) -> Parser a\"\n          },\n          \"llvm\": {\n            \"name\": \"choice\",\n            \"description\": \"A parser combinator that successively tries all given parsers until one\\nsucceeds, or fails if none has succeeded.\",\n            \"example\": \"parser = choice([string(\\\"good\\\"), string(\\\"really good\\\")])\\nrunParser(parser, \\\"good\\\")        // Right \\\"good\\\"\\nrunParser(parser, \\\"really good\\\") // Right \\\"really good\\\"\\nrunParser(parser, \\\"really\\\")      // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"List (Parser a) -> Parser a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"many\",\n            \"description\": \"A parser combinator that applies 0 or more times the given parser.\",\n            \"example\": \"runParser(many(string(\\\"OK\\\")), \\\"OKOKOK\\\") // Right [\\\"OK\\\", \\\"OK\\\", \\\"OK\\\"]\\nrunParser(many(string(\\\"O\\\")), \\\"OKOKOK\\\")  // Left (Loc 1 0 1)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser a -> Parser (List a)\"\n          },\n          \"llvm\": {\n            \"name\": \"many\",\n            \"description\": \"A parser combinator that applies 0 or more times the given parser.\",\n            \"example\": \"runParser(many(string(\\\"OK\\\")), \\\"OKOKOK\\\") // Right [\\\"OK\\\", \\\"OK\\\", \\\"OK\\\"]\\nrunParser(many(string(\\\"O\\\")), \\\"OKOKOK\\\")  // Left (Loc 1 0 1)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser a -> Parser (List a)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"some\",\n            \"description\": \"A parser combinator that applies 1 or more times the given parser. If no parse\\nfound at all it\'ll fail.\",\n            \"example\": \"runParser(some(string(\\\"OK\\\")), \\\"OKOKOK\\\") // Right [\\\"OK\\\", \\\"OK\\\", \\\"OK\\\"]\\nrunParser(some(string(\\\"OK\\\")), \\\"NOPE\\\")   // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser a -> Parser (List a)\"\n          },\n          \"llvm\": {\n            \"name\": \"some\",\n            \"description\": \"A parser combinator that applies 1 or more times the given parser. If no parse\\nfound at all it\'ll fail.\",\n            \"example\": \"runParser(some(string(\\\"OK\\\")), \\\"OKOKOK\\\") // Right [\\\"OK\\\", \\\"OK\\\", \\\"OK\\\"]\\nrunParser(some(string(\\\"OK\\\")), \\\"NOPE\\\")   // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser a -> Parser (List a)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"manyTill\",\n            \"description\": \"A parser combinator that matches many times the first given parser until the\\nsecond one matches. Note that the input matched by the end parser will then\\nbe consumed. If you don\'t want to consume the end parser\'s matched input,\\nyou can use lookAhead.\",\n            \"example\": \"parser = manyTill(char(\\\"a\\\"), char(\\\"b\\\"))\\nrunParser(parser, \\\"aaaaab\\\") // Right \\\"aaaaa\\\"\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser a -> Parser b -> Parser (List a)\"\n          },\n          \"llvm\": {\n            \"name\": \"manyTill\",\n            \"description\": \"A parser combinator that matches many times the first given parser until the\\nsecond one matches. Note that the input matched by the end parser will then\\nbe consumed. If you don\'t want to consume the end parser\'s matched input,\\nyou can use lookAhead.\",\n            \"example\": \"parser = manyTill(char(\\\"a\\\"), char(\\\"b\\\"))\\nrunParser(parser, \\\"aaaaab\\\") // Right \\\"aaaaa\\\"\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser a -> Parser b -> Parser (List a)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"someTill\",\n            \"description\": \"A parser combinator that matches one or more times the first given parser until the\\nsecond one matches. If the first parser does not match the input, it will fail.\\nNote that the input matched by the end parser will then be consumed. If you don\'t\\nwant to consume the end parser\'s matched input, you can use lookAhead.\",\n            \"example\": \"parser1 = someTill(char(\\\"a\\\"), char(\\\"b\\\"))\\nrunParser(parser1, \\\"aaaaab\\\") // Right \\\"aaaaa\\\"\\n\\nparser2 = someTill(char(\\\"a\\\"), char(\\\"b\\\"))\\nrunParser(parser2, \\\"b\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser a -> Parser b -> Parser (List a)\"\n          },\n          \"llvm\": {\n            \"name\": \"someTill\",\n            \"description\": \"A parser combinator that matches one or more times the first given parser until the\\nsecond one matches. If the first parser does not match the input, it will fail.\\nNote that the input matched by the end parser will then be consumed. If you don\'t\\nwant to consume the end parser\'s matched input, you can use lookAhead.\",\n            \"example\": \"parser1 = someTill(char(\\\"a\\\"), char(\\\"b\\\"))\\nrunParser(parser1, \\\"aaaaab\\\") // Right \\\"aaaaa\\\"\\n\\nparser2 = someTill(char(\\\"a\\\"), char(\\\"b\\\"))\\nrunParser(parser2, \\\"b\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser a -> Parser b -> Parser (List a)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"lookAhead\",\n            \"description\": \"A parser combinator that makes the given parser not consume any input.\",\n            \"example\": \"alt(char(\\\"a\\\"), lookAhead(anyChar))\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser a -> Parser a\"\n          },\n          \"llvm\": {\n            \"name\": \"lookAhead\",\n            \"description\": \"A parser combinator that makes the given parser not consume any input.\",\n            \"example\": \"alt(char(\\\"a\\\"), lookAhead(anyChar))\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser a -> Parser a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"takeWhile\",\n            \"description\": \"A parser combinator that parses all characters while the given predicate\\nreturns true.\",\n            \"example\": \"runParser(takeWhile(notEquals(\\\"-\\\")), \\\"abcdef-\\\")\",\n            \"since\": \"0.0.1\",\n            \"type\": \"(Char -> Boolean) -> Parser (List Char)\"\n          },\n          \"llvm\": {\n            \"name\": \"takeWhile\",\n            \"description\": \"A parser combinator that parses all characters while the given predicate\\nreturns true.\",\n            \"example\": \"runParser(takeWhile(notEquals(\\\"-\\\")), \\\"abcdef-\\\")\",\n            \"since\": \"0.0.1\",\n            \"type\": \"(Char -> Boolean) -> Parser (List Char)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"sepBy\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Parser a -> Parser b -> Parser (List a)\"\n          },\n          \"llvm\": {\n            \"name\": \"sepBy\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Parser a -> Parser b -> Parser (List a)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"satisfy\",\n            \"description\": \"A parser combinator that parses a character based on a given predicate.\",\n            \"example\": \"runParser(satisfy(isDigit), \\\"1\\\")  // Right \\\"1\\\"\\nrunParser(satisfy(isLetter), \\\"1\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"(Char -> Boolean) -> Parser Char\"\n          },\n          \"llvm\": {\n            \"name\": \"satisfy\",\n            \"description\": \"A parser combinator that parses a character based on a given predicate.\",\n            \"example\": \"runParser(satisfy(isDigit), \\\"1\\\")  // Right \\\"1\\\"\\nrunParser(satisfy(isLetter), \\\"1\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"(Char -> Boolean) -> Parser Char\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"char\",\n            \"description\": \"A parser combinator that parses a single given character.\",\n            \"example\": \"runParser(char(\\\"a\\\"), \\\"a\\\") // Right \\\"a\\\"\\nrunParser(char(\\\"a\\\"), \\\"b\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Char -> Parser Char\"\n          },\n          \"llvm\": {\n            \"name\": \"char\",\n            \"description\": \"A parser combinator that parses a single given character.\",\n            \"example\": \"runParser(char(\\\"a\\\"), \\\"a\\\") // Right \\\"a\\\"\\nrunParser(char(\\\"a\\\"), \\\"b\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Char -> Parser Char\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"notChar\",\n            \"description\": \"The complement of char, it parses any char that not the one given.\",\n            \"example\": \"runParser(notChar(\\\"a\\\"), \\\"a\\\") // Left (Loc 0 0 0)\\nrunParser(notChar(\\\"a\\\"), \\\"b\\\") // Right \\\"a\\\"\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Char -> Parser Char\"\n          },\n          \"llvm\": {\n            \"name\": \"notChar\",\n            \"description\": \"The complement of char, it parses any char that not the one given.\",\n            \"example\": \"runParser(notChar(\\\"a\\\"), \\\"a\\\") // Left (Loc 0 0 0)\\nrunParser(notChar(\\\"a\\\"), \\\"b\\\") // Right \\\"a\\\"\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Char -> Parser Char\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"eof\",\n            \"description\": \"A parser combinator that parses the eof token, or the end of the input.\",\n            \"example\": \"runParser(eof, \\\"\\\")  // Right ()\\nrunParser(eof, \\\"a\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser {}\"\n          },\n          \"llvm\": {\n            \"name\": \"eof\",\n            \"description\": \"A parser combinator that parses the eof token, or the end of the input.\",\n            \"example\": \"runParser(eof, \\\"\\\")  // Right ()\\nrunParser(eof, \\\"a\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"string\",\n            \"description\": \"A parser combinator that parses a given string.\",\n            \"example\": \"runParser(string(\\\"hello world\\\"), \\\"hello world\\\") // Right \\\"hello world\\\"\\nrunParser(string(\\\"hello world\\\"), \\\"hello\\\")       // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"String -> Parser String\"\n          },\n          \"llvm\": {\n            \"name\": \"string\",\n            \"description\": \"A parser combinator that parses a given string.\",\n            \"example\": \"runParser(string(\\\"hello world\\\"), \\\"hello world\\\") // Right \\\"hello world\\\"\\nrunParser(string(\\\"hello world\\\"), \\\"hello\\\")       // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"String -> Parser String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"spaces\",\n            \"description\": \"A parser combinator that parses empty characters such as spaces, line returns\\nor tabs.\",\n            \"example\": \"runParser(spaces, \\\" \\\\t\\\\n\\\")  // Right \\\" \\\\t\\\\n\\\"\\nrunParser(spaces, \\\" \\\\t\\\\na\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser (List Char)\"\n          },\n          \"llvm\": {\n            \"name\": \"spaces\",\n            \"description\": \"A parser combinator that parses empty characters such as spaces, line returns\\nor tabs.\",\n            \"example\": \"runParser(spaces, \\\" \\\\t\\\\n\\\")  // Right \\\" \\\\t\\\\n\\\"\\nrunParser(spaces, \\\" \\\\t\\\\na\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser (List Char)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"token\",\n            \"description\": \"A parser combinator that parses the given parser and discards all trailing\\nspaces.\",\n            \"example\": \"runParser(token(string(\\\"hello\\\")), \\\"hello\\\\n\\\")  // Right \\\"hello\\\"\\nrunParser(token(string(\\\"hello\\\")), \\\"hello\\\\n!\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser a -> Parser a\"\n          },\n          \"llvm\": {\n            \"name\": \"token\",\n            \"description\": \"A parser combinator that parses the given parser and discards all trailing\\nspaces.\",\n            \"example\": \"runParser(token(string(\\\"hello\\\")), \\\"hello\\\\n\\\")  // Right \\\"hello\\\"\\nrunParser(token(string(\\\"hello\\\")), \\\"hello\\\\n!\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser a -> Parser a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"symbol\",\n            \"description\": \"A parser combinator that parses a given string and discards all trailing\\nspaces.\",\n            \"example\": \"runParser(symbol(\\\"hello\\\"), \\\"hello\\\\n\\\")  // Right \\\"hello\\\"\\nrunParser(symbol(\\\"hello\\\"), \\\"hello\\\\n!\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"String -> Parser String\"\n          },\n          \"llvm\": {\n            \"name\": \"symbol\",\n            \"description\": \"A parser combinator that parses a given string and discards all trailing\\nspaces.\",\n            \"example\": \"runParser(symbol(\\\"hello\\\"), \\\"hello\\\\n\\\")  // Right \\\"hello\\\"\\nrunParser(symbol(\\\"hello\\\"), \\\"hello\\\\n!\\\") // Left (Loc 0 0 0)\",\n            \"since\": \"0.0.1\",\n            \"type\": \"String -> Parser String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"digit\",\n            \"description\": \"A parser combinator that parses a digit.\",\n            \"example\": \"\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser Char\"\n          },\n          \"llvm\": {\n            \"name\": \"digit\",\n            \"description\": \"A parser combinator that parses a digit.\",\n            \"example\": \"\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser Char\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"letter\",\n            \"description\": \"A parser combinator that parses a letter.\",\n            \"example\": \"\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser Char\"\n          },\n          \"llvm\": {\n            \"name\": \"letter\",\n            \"description\": \"A parser combinator that parses a letter.\",\n            \"example\": \"\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser Char\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"letters\",\n            \"description\": \"A parser combinator that parses many letters.\",\n            \"example\": \"\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser (List Char)\"\n          },\n          \"llvm\": {\n            \"name\": \"letters\",\n            \"description\": \"A parser combinator that parses many letters.\",\n            \"example\": \"\",\n            \"since\": \"0.0.1\",\n            \"type\": \"Parser (List Char)\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/JsonParser.mad\",\n      \"moduleName\": \"JsonParser\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        {\n          \"js\": {\n            \"name\": \"Parser\",\n            \"params\": \"r\",\n            \"constructors\": [\n              \"Parser((JsonValue -> Either String r))\"\n            ],\n            \"description\": \"Parser type\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Parser\",\n            \"params\": \"r\",\n            \"constructors\": [\n              \"Parser((JsonValue -> Either String r))\"\n            ],\n            \"description\": \"Parser type\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          }\n        }\n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor Parser\",\n            \"constraints\": \"\",\n            \"description\": \"Functor instance of the json parser. It maps over the value contained\\nin the parser\",\n            \"example\": \"map((x) => x + 1, succeed(4)) // succeed(5)\",\n            \"since\": \"0.11.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor Parser\",\n            \"constraints\": \"\",\n            \"description\": \"Functor instance of the json parser. It maps over the value contained\\nin the parser\",\n            \"example\": \"map((x) => x + 1, succeed(4)) // succeed(5)\",\n            \"since\": \"0.11.0\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Applicative\",\n            \"declaration\": \"Applicative Parser\",\n            \"constraints\": \"\",\n            \"description\": \"Applicative instance of the json parser.\",\n            \"example\": \"ap(pure((x) => x + 1), succeed(4)) // succeed(5)\",\n            \"since\": \"0.11.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Applicative\",\n            \"declaration\": \"Applicative Parser\",\n            \"constraints\": \"\",\n            \"description\": \"Applicative instance of the json parser.\",\n            \"example\": \"ap(pure((x) => x + 1), succeed(4)) // succeed(5)\",\n            \"since\": \"0.11.0\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Monad\",\n            \"declaration\": \"Monad Parser\",\n            \"constraints\": \"\",\n            \"description\": \"Monad instance of the json parser.\",\n            \"example\": \"chain((x) => of(x + 1), succeed(4)) // succeed(5)\",\n            \"since\": \"0.11.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Monad\",\n            \"declaration\": \"Monad Parser\",\n            \"constraints\": \"\",\n            \"description\": \"Monad instance of the json parser.\",\n            \"example\": \"chain((x) => of(x + 1), succeed(4)) // succeed(5)\",\n            \"since\": \"0.11.0\"\n          }\n        }\n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"jsonValue\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Parser JsonValue\"\n          },\n          \"llvm\": {\n            \"name\": \"jsonValue\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Parser JsonValue\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"parse\",\n            \"description\": \"Runs the given parser on a string input and returns and Either\\nwhich contains the value or is a Left if it failed.\",\n            \"example\": \"parse(string, \`\\\"Json string\\\"\`) // Right(\\\"Json string\\\")\\nparse(string, \`3\`) // Left(\\\"Error parsing string\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Parser a -> String -> Either String a\"\n          },\n          \"llvm\": {\n            \"name\": \"parse\",\n            \"description\": \"Runs the given parser on a string input and returns and Either\\nwhich contains the value or is a Left if it failed.\",\n            \"example\": \"parse(string, \`\\\"Json string\\\"\`) // Right(\\\"Json string\\\")\\nparse(string, \`3\`) // Left(\\\"Error parsing string\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Parser a -> String -> Either String a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"succeed\",\n            \"description\": \"Parser constructor function\",\n            \"example\": \"succeed(47)\",\n            \"since\": \"0.11.0\",\n            \"type\": \"a -> Parser a\"\n          },\n          \"llvm\": {\n            \"name\": \"succeed\",\n            \"description\": \"Parser constructor function\",\n            \"example\": \"succeed(47)\",\n            \"since\": \"0.11.0\",\n            \"type\": \"a -> Parser a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"fail\",\n            \"description\": \"Creates a failing parser from an error string\",\n            \"example\": \"fail(\\\"This did not work out\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> Parser a\"\n          },\n          \"llvm\": {\n            \"name\": \"fail\",\n            \"description\": \"Creates a failing parser from an error string\",\n            \"example\": \"fail(\\\"This did not work out\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> Parser a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"string\",\n            \"description\": \"String parser, it parses a json string of the form \\\"string content\\\"\",\n            \"example\": \"parse(string, \`\\\"Json string\\\"\`) // Right(\\\"Json string\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Parser String\"\n          },\n          \"llvm\": {\n            \"name\": \"string\",\n            \"description\": \"String parser, it parses a json string of the form \\\"string content\\\"\",\n            \"example\": \"parse(string, \`\\\"Json string\\\"\`) // Right(\\\"Json string\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Parser String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"integer\",\n            \"description\": \"Integer parser, it parses an integer of the form 33\",\n            \"example\": \"parse(integer, \`4\`) // Right(4)\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Parser Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"integer\",\n            \"description\": \"Integer parser, it parses an integer of the form 33\",\n            \"example\": \"parse(integer, \`4\`) // Right(4)\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Parser Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"float\",\n            \"description\": \"Float parser, it parses an integer of the form 33.3\",\n            \"example\": \"parse(float, \`33.3\`) // Right(33.3)\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Parser Float\"\n          },\n          \"llvm\": {\n            \"name\": \"float\",\n            \"description\": \"Float parser, it parses an integer of the form 33.3\",\n            \"example\": \"parse(float, \`33.3\`) // Right(33.3)\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Parser Float\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"boolean\",\n            \"description\": \"Boolean parser, it parses the value true or false\",\n            \"example\": \"parse(boolean, \`true\`)    // Right(true)\\nparse(boolean, \`false\`)   // Right(false)\\nparse(boolean, \`\\\"false\\\"\`) // Left(\\\"Error parsing boolean\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Parser Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"boolean\",\n            \"description\": \"Boolean parser, it parses the value true or false\",\n            \"example\": \"parse(boolean, \`true\`)    // Right(true)\\nparse(boolean, \`false\`)   // Right(false)\\nparse(boolean, \`\\\"false\\\"\`) // Left(\\\"Error parsing boolean\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Parser Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"list\",\n            \"description\": \"List parser, it parses a json list of the form [value1, value2].\\nThe list must be homogenous and the parser given as a parameter\\nmust match the type of what the list contains.\",\n            \"example\": \"parse(list(string), \`[\\\"one string\\\", \\\"two strings\\\"]\`)\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Parser a -> Parser (List a)\"\n          },\n          \"llvm\": {\n            \"name\": \"list\",\n            \"description\": \"List parser, it parses a json list of the form [value1, value2].\\nThe list must be homogenous and the parser given as a parameter\\nmust match the type of what the list contains.\",\n            \"example\": \"parse(list(string), \`[\\\"one string\\\", \\\"two strings\\\"]\`)\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Parser a -> Parser (List a)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"dict\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Parser a -> Parser (Dictionary String a)\"\n          },\n          \"llvm\": {\n            \"name\": \"dict\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Parser a -> Parser (Dictionary String a)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"maybe\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Parser a -> Parser (Maybe a)\"\n          },\n          \"llvm\": {\n            \"name\": \"maybe\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Parser a -> Parser (Maybe a)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"lazy\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"({} -> Parser a) -> Parser a\"\n          },\n          \"llvm\": {\n            \"name\": \"lazy\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"({} -> Parser a) -> Parser a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"field\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Parser a -> Parser a\"\n          },\n          \"llvm\": {\n            \"name\": \"field\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Parser a -> Parser a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"path\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List String -> Parser a -> Parser a\"\n          },\n          \"llvm\": {\n            \"name\": \"path\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List String -> Parser a -> Parser a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"chain1\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> Parser b) -> Parser a -> Parser b\"\n          },\n          \"llvm\": {\n            \"name\": \"chain1\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> Parser b) -> Parser a -> Parser b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"chain2\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> Parser c) -> Parser a -> Parser b -> Parser c\"\n          },\n          \"llvm\": {\n            \"name\": \"chain2\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> Parser c) -> Parser a -> Parser b -> Parser c\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"chain3\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> Parser d) -> Parser a -> Parser b -> Parser c -> Parser d\"\n          },\n          \"llvm\": {\n            \"name\": \"chain3\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> Parser d) -> Parser a -> Parser b -> Parser c -> Parser d\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"chain4\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> Parser e) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e\"\n          },\n          \"llvm\": {\n            \"name\": \"chain4\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> Parser e) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"chain5\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> Parser f) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f\"\n          },\n          \"llvm\": {\n            \"name\": \"chain5\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> Parser f) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"chain6\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> f -> Parser g) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f -> Parser g\"\n          },\n          \"llvm\": {\n            \"name\": \"chain6\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> f -> Parser g) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f -> Parser g\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"chain7\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> f -> g -> Parser h) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f -> Parser g -> Parser h\"\n          },\n          \"llvm\": {\n            \"name\": \"chain7\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> f -> g -> Parser h) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f -> Parser g -> Parser h\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"chain8\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> f -> g -> h -> Parser i) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f -> Parser g -> Parser h -> Parser i\"\n          },\n          \"llvm\": {\n            \"name\": \"chain8\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> f -> g -> h -> Parser i) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f -> Parser g -> Parser h -> Parser i\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"map1\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b) -> Parser a -> Parser b\"\n          },\n          \"llvm\": {\n            \"name\": \"map1\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b) -> Parser a -> Parser b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"map2\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c) -> Parser a -> Parser b -> Parser c\"\n          },\n          \"llvm\": {\n            \"name\": \"map2\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c) -> Parser a -> Parser b -> Parser c\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"map3\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d) -> Parser a -> Parser b -> Parser c -> Parser d\"\n          },\n          \"llvm\": {\n            \"name\": \"map3\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d) -> Parser a -> Parser b -> Parser c -> Parser d\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"map4\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e\"\n          },\n          \"llvm\": {\n            \"name\": \"map4\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"map5\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> f) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f\"\n          },\n          \"llvm\": {\n            \"name\": \"map5\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> f) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"map6\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> f -> g) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f -> Parser g\"\n          },\n          \"llvm\": {\n            \"name\": \"map6\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> f -> g) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f -> Parser g\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"map7\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> f -> g -> h) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f -> Parser g -> Parser h\"\n          },\n          \"llvm\": {\n            \"name\": \"map7\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> f -> g -> h) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f -> Parser g -> Parser h\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"map8\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> f -> g -> h -> i) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f -> Parser g -> Parser h -> Parser i\"\n          },\n          \"llvm\": {\n            \"name\": \"map8\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b -> c -> d -> e -> f -> g -> h -> i) -> Parser a -> Parser b -> Parser c -> Parser d -> Parser e -> Parser f -> Parser g -> Parser h -> Parser i\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Dictionary.mad\",\n      \"moduleName\": \"Dictionary\",\n      \"description\": \"Dictionary represents a key - value data structure.\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor (Dictionary k)\",\n            \"constraints\": \"\",\n            \"description\": \"Map over a Dictionary with a function that takes the value and transforms it.\",\n            \"example\": \"map((x) => x / 2, fromList([#[\\\"Sidney\\\", 3], #[\\\"New York\\\", 18], #[\\\"London\\\", 2]]))\\n// fromList([#[\\\"Sidney\\\", 1.5], #[\\\"New York\\\", 9], #[\\\"London\\\", 1]])\",\n            \"since\": \"0.0.5\"\n          },\n          \"llvm\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor (Dictionary k)\",\n            \"constraints\": \"\",\n            \"description\": \"Map over a Dictionary with a function that takes the value and transforms it.\",\n            \"example\": \"map((x) => x / 2, fromList([#[\\\"Sidney\\\", 3], #[\\\"New York\\\", 18], #[\\\"London\\\", 2]]))\\n// fromList([#[\\\"Sidney\\\", 1.5], #[\\\"New York\\\", 9], #[\\\"London\\\", 1]])\",\n            \"since\": \"0.0.5\"\n          }\n        }\n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"fromList\",\n            \"description\": \"Creates a Dictionary from a list of <key, value> tuples\",\n            \"example\": \"fromList([#[\\\"one\\\", 2], #[\\\"two\\\", 2]])\\nfromList([#[\\\"a\\\", 2], #[\\\"b\\\", 2], #[\\\"c\\\", 3]])\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Comparable a => List #[a, b] -> Dictionary a b\"\n          },\n          \"llvm\": {\n            \"name\": \"fromList\",\n            \"description\": \"Creates a Dictionary from a list of <key, value> tuples\",\n            \"example\": \"fromList([#[\\\"one\\\", 2], #[\\\"two\\\", 2]])\\nfromList([#[\\\"a\\\", 2], #[\\\"b\\\", 2], #[\\\"c\\\", 3]])\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Comparable a => List #[a, b] -> Dictionary a b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"empty\",\n            \"description\": \"The empty Dictionary\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Dictionary a b\"\n          },\n          \"llvm\": {\n            \"name\": \"empty\",\n            \"description\": \"The empty Dictionary\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Dictionary a b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"insert\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Comparable a => a -> b -> Dictionary a b -> Dictionary a b\"\n          },\n          \"llvm\": {\n            \"name\": \"insert\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Comparable a => a -> b -> Dictionary a b -> Dictionary a b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"update\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Comparable a => (b -> b) -> a -> Dictionary a b -> Dictionary a b\"\n          },\n          \"llvm\": {\n            \"name\": \"update\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Comparable a => (b -> b) -> a -> Dictionary a b -> Dictionary a b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"get\",\n            \"description\": \"Get a value from a Dictionary given a key.\",\n            \"example\": \"get(\\\"john\\\", fromList([#[\\\"john\\\", { age: 32 }]])) // Just({ age: 32 })\\nget(\\\"paul\\\", fromList([#[\\\"john\\\", { age: 32 }]])) // Nothing\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Comparable a => a -> Dictionary a b -> Maybe b\"\n          },\n          \"llvm\": {\n            \"name\": \"get\",\n            \"description\": \"Get a value from a Dictionary given a key.\",\n            \"example\": \"get(\\\"john\\\", fromList([#[\\\"john\\\", { age: 32 }]])) // Just({ age: 32 })\\nget(\\\"paul\\\", fromList([#[\\\"john\\\", { age: 32 }]])) // Nothing\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Comparable a => a -> Dictionary a b -> Maybe b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"merge\",\n            \"description\": \"Combine two Dictionaries together.\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Comparable a => Dictionary a b -> Dictionary a b -> Dictionary a b\"\n          },\n          \"llvm\": {\n            \"name\": \"merge\",\n            \"description\": \"Combine two Dictionaries together.\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Comparable a => Dictionary a b -> Dictionary a b -> Dictionary a b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"length\",\n            \"description\": \"Enumerate the number of keys in a Dictionary\",\n            \"example\": \"length(fromList([#[\\\"Sidney\\\", 3], #[\\\"New York\\\", 18], #[\\\"London\\\", 2]])) // 3\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Dictionary a b -> Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"length\",\n            \"description\": \"Enumerate the number of keys in a Dictionary\",\n            \"example\": \"length(fromList([#[\\\"Sidney\\\", 3], #[\\\"New York\\\", 18], #[\\\"London\\\", 2]])) // 3\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Dictionary a b -> Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"toList\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Dictionary a b -> List #[a, b]\"\n          },\n          \"llvm\": {\n            \"name\": \"toList\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Dictionary a b -> List #[a, b]\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"mapM\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Applicative m => (a -> m b) -> Dictionary c a -> m (Dictionary c b)\"\n          },\n          \"llvm\": {\n            \"name\": \"mapM\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Applicative m => (a -> m b) -> Dictionary c a -> m (Dictionary c b)\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"mapWithKey\",\n            \"description\": \"Map over a Dictionary with a function that takes the key and value and returns the new value.\",\n            \"example\": \"mapWithKey(\\n  (city, x) => city == \\\"Sidney\\\" ? 9 : x / 2,\\n  fromList([#[\\\"Sidney\\\", 3], #[\\\"New York\\\", 18], #[\\\"London\\\", 2]])\\n)\\n// fromList([#[\\\"Sidney\\\", 9], #[\\\"New York\\\", 9], #[\\\"London\\\", 1]])\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> b -> c) -> Dictionary a b -> Dictionary a c\"\n          },\n          \"llvm\": {\n            \"name\": \"mapWithKey\",\n            \"description\": \"Map over a Dictionary with a function that takes the key and value and returns the new value.\",\n            \"example\": \"mapWithKey(\\n  (city, x) => city == \\\"Sidney\\\" ? 9 : x / 2,\\n  fromList([#[\\\"Sidney\\\", 3], #[\\\"New York\\\", 18], #[\\\"London\\\", 2]])\\n)\\n// fromList([#[\\\"Sidney\\\", 9], #[\\\"New York\\\", 9], #[\\\"London\\\", 1]])\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> b -> c) -> Dictionary a b -> Dictionary a c\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"keys\",\n            \"description\": \"List all keys in a Dictionary\",\n            \"example\": \"keys(fromList([#[true, \\\"Go for it\\\"], #[false, \\\"NOGO\\\"]])) // [true, false]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Dictionary a b -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"keys\",\n            \"description\": \"List all keys in a Dictionary\",\n            \"example\": \"keys(fromList([#[true, \\\"Go for it\\\"], #[false, \\\"NOGO\\\"]])) // [true, false]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Dictionary a b -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"values\",\n            \"description\": \"List all values in a Dictionary\",\n            \"example\": \"values(fromList([#[true, \\\"Go for it\\\"], #[false, \\\"NOGO\\\"]])) // [\\\"Go for it\\\", \\\"NOGO\\\"]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Dictionary a b -> List b\"\n          },\n          \"llvm\": {\n            \"name\": \"values\",\n            \"description\": \"List all values in a Dictionary\",\n            \"example\": \"values(fromList([#[true, \\\"Go for it\\\"], #[false, \\\"NOGO\\\"]])) // [\\\"Go for it\\\", \\\"NOGO\\\"]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Dictionary a b -> List b\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Date.mad\",\n      \"moduleName\": \"Date\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        {\n          \"js\": {\n            \"name\": \"DateTime\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"DateTime(Integer)\"\n            ],\n            \"description\": \"The DateTime type represents a date and time at UTC.\",\n            \"example\": \"now()\",\n            \"since\": \"0.15.0\"\n          },\n          \"llvm\": {\n            \"name\": \"DateTime\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"DateTime(Integer)\"\n            ],\n            \"description\": \"The DateTime type represents a date and time at UTC.\",\n            \"example\": \"now()\",\n            \"since\": \"0.15.0\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"LocalDateTime\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"LocalDateTime(Integer)\"\n            ],\n            \"description\": \"The LocalDateTime type represents a date and time for\\nthe timezone of the local machine.\",\n            \"example\": \"\",\n            \"since\": \"0.15.0\"\n          },\n          \"llvm\": {\n            \"name\": \"LocalDateTime\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"LocalDateTime(Integer)\"\n            ],\n            \"description\": \"The LocalDateTime type represents a date and time for\\nthe timezone of the local machine.\",\n            \"example\": \"\",\n            \"since\": \"0.15.0\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"TimeUnit\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"Millisecond\",\n              \"Second\",\n              \"Minute\",\n              \"Hour\",\n              \"Day\",\n              \"Month\",\n              \"Year\"\n            ],\n            \"description\": \"TimeUnit type used for some operations on dates\",\n            \"example\": \"\",\n            \"since\": \"0.15.0\"\n          },\n          \"llvm\": {\n            \"name\": \"TimeUnit\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"Millisecond\",\n              \"Second\",\n              \"Minute\",\n              \"Hour\",\n              \"Day\",\n              \"Month\",\n              \"Year\"\n            ],\n            \"description\": \"TimeUnit type used for some operations on dates\",\n            \"example\": \"\",\n            \"since\": \"0.15.0\"\n          }\n        }\n      ],\n      \"aliases\": [\n        {\n          \"js\": {\n            \"name\": \"DateInfo\",\n            \"params\": \"\",\n            \"aliasedType\": \"{ day :: Integer, hours :: Integer, milliseconds :: Integer, minutes :: Integer, month :: Integer, seconds :: Integer, year :: Integer }\",\n            \"description\": \"Date info is a record representation of a DateTime with\\nfields going up to the millisecond.\\n\\nmonth range is: [1-12]\\nday range is: [1-31]\\nhours range is: [0-23]\\nminutes and seconds range is: [0-59]\\nmilliseconds range is: [0-999]\",\n            \"example\": \"\",\n            \"since\": \"0.15.0\"\n          },\n          \"llvm\": {\n            \"name\": \"DateInfo\",\n            \"params\": \"\",\n            \"aliasedType\": \"{ day :: Integer, hours :: Integer, milliseconds :: Integer, minutes :: Integer, month :: Integer, seconds :: Integer, year :: Integer }\",\n            \"description\": \"Date info is a record representation of a DateTime with\\nfields going up to the millisecond.\\n\\nmonth range is: [1-12]\\nday range is: [1-31]\\nhours range is: [0-23]\\nminutes and seconds range is: [0-59]\\nmilliseconds range is: [0-999]\",\n            \"example\": \"\",\n            \"since\": \"0.15.0\"\n          }\n        }\n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"now\",\n            \"description\": \"Returns the current time as a DateTime value\",\n            \"example\": \"now()\",\n            \"since\": \"0.15.0\",\n            \"type\": \"{} -> DateTime\"\n          },\n          \"llvm\": {\n            \"name\": \"now\",\n            \"description\": \"Returns the current time as a DateTime value\",\n            \"example\": \"now()\",\n            \"since\": \"0.15.0\",\n            \"type\": \"{} -> DateTime\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"toISOString\",\n            \"description\": \"Converts a DateTime to a String in ISO format:\\n{year}-{month}-{day}T{hours}:{minutes}:{seconds}.{milliseconds}Z\",\n            \"example\": \"toISOString(now()) // \\\"2022-10-13T19:01:00.000Z\\\" at the time of writing this\",\n            \"since\": \"0.15.0\",\n            \"type\": \"DateTime -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"toISOString\",\n            \"description\": \"Converts a DateTime to a String in ISO format:\\n{year}-{month}-{day}T{hours}:{minutes}:{seconds}.{milliseconds}Z\",\n            \"example\": \"toISOString(now()) // \\\"2022-10-13T19:01:00.000Z\\\" at the time of writing this\",\n            \"since\": \"0.15.0\",\n            \"type\": \"DateTime -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"getTimestamp\",\n            \"description\": \"Returns the inner integer timestamp of a DateTime\",\n            \"example\": \"getTimeStamp(now())\",\n            \"since\": \"0.15.0\",\n            \"type\": \"DateTime -> Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"getTimestamp\",\n            \"description\": \"Returns the inner integer timestamp of a DateTime\",\n            \"example\": \"getTimeStamp(now())\",\n            \"since\": \"0.15.0\",\n            \"type\": \"DateTime -> Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"toDateInfo\",\n            \"description\": \"Converts a DateTime value to a DateInfo record, allowing to easily read\\nall components of a date such as the month or day.\",\n            \"example\": \"toDateInfo(now())\",\n            \"since\": \"0.15.0\",\n            \"type\": \"DateTime -> { day :: Integer, hours :: Integer, milliseconds :: Integer, minutes :: Integer, month :: Integer, seconds :: Integer, year :: Integer }\"\n          },\n          \"llvm\": {\n            \"name\": \"toDateInfo\",\n            \"description\": \"Converts a DateTime value to a DateInfo record, allowing to easily read\\nall components of a date such as the month or day.\",\n            \"example\": \"toDateInfo(now())\",\n            \"since\": \"0.15.0\",\n            \"type\": \"DateTime -> { day :: Integer, hours :: Integer, milliseconds :: Integer, minutes :: Integer, month :: Integer, seconds :: Integer, year :: Integer }\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"fromDateInfo\",\n            \"description\": \"Creates a DateTime value from a DateInfo record.\",\n            \"example\": \"fromDateInfo({\\n  year: 2022,\\n  month: 12,\\n  day: 31,\\n  hours: 21,\\n  minutes: 45,\\n  seconds: 0,\\n  milliseconds: 0,\\n})\\n// DateTime(1672523100000)\",\n            \"since\": \"0.15.0\",\n            \"type\": \"{ day :: Integer, hours :: Integer, milliseconds :: Integer, minutes :: Integer, month :: Integer, seconds :: Integer, year :: Integer } -> DateTime\"\n          },\n          \"llvm\": {\n            \"name\": \"fromDateInfo\",\n            \"description\": \"Creates a DateTime value from a DateInfo record.\",\n            \"example\": \"fromDateInfo({\\n  year: 2022,\\n  month: 12,\\n  day: 31,\\n  hours: 21,\\n  minutes: 45,\\n  seconds: 0,\\n  milliseconds: 0,\\n})\\n// DateTime(1672523100000)\",\n            \"since\": \"0.15.0\",\n            \"type\": \"{ day :: Integer, hours :: Integer, milliseconds :: Integer, minutes :: Integer, month :: Integer, seconds :: Integer, year :: Integer } -> DateTime\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"add\",\n            \"description\": \"Adds a temporal value to a DateTime\",\n            \"example\": \"add(1, Hour, DateTime(0)) // DateTime(3600000)\",\n            \"since\": \"0.15.0\",\n            \"type\": \"Integer -> TimeUnit -> DateTime -> DateTime\"\n          },\n          \"llvm\": {\n            \"name\": \"add\",\n            \"description\": \"Adds a temporal value to a DateTime\",\n            \"example\": \"add(1, Hour, DateTime(0)) // DateTime(3600000)\",\n            \"since\": \"0.15.0\",\n            \"type\": \"Integer -> TimeUnit -> DateTime -> DateTime\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"addMilliseconds\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> DateTime -> DateTime\"\n          },\n          \"llvm\": {\n            \"name\": \"addMilliseconds\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> DateTime -> DateTime\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"addSeconds\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> DateTime -> DateTime\"\n          },\n          \"llvm\": {\n            \"name\": \"addSeconds\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> DateTime -> DateTime\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"addMinutes\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> DateTime -> DateTime\"\n          },\n          \"llvm\": {\n            \"name\": \"addMinutes\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> DateTime -> DateTime\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"addHours\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> DateTime -> DateTime\"\n          },\n          \"llvm\": {\n            \"name\": \"addHours\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> DateTime -> DateTime\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"addDays\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> DateTime -> DateTime\"\n          },\n          \"llvm\": {\n            \"name\": \"addDays\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> DateTime -> DateTime\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"addMonths\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> DateTime -> DateTime\"\n          },\n          \"llvm\": {\n            \"name\": \"addMonths\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> DateTime -> DateTime\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"addYears\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> DateTime -> DateTime\"\n          },\n          \"llvm\": {\n            \"name\": \"addYears\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> DateTime -> DateTime\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Applicative.mad\",\n      \"moduleName\": \"Applicative\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        {\n          \"js\": {\n            \"name\": \"Applicative\",\n            \"vars\": \"m\",\n            \"constraints\": \"Functor m\",\n            \"methods\": [\n              \"ap :: m (a -> b) -> m a -> m b\",\n              \"pure :: a -> m a\"\n            ],\n            \"description\": \"Applicative is useful to sequence computations and combine their results. It\\nis best used in combination with Functor\'s map function.\",\n            \"example\": \"pipe(\\n  map((a, b) => a + b),\\n  ap($, Just(4))\\n)(Just(3))\\n// output: Just(7)\\n// in this example we can see how we can extend map and make it work with a\\n// binary function.\",\n            \"since\": \"0.2.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Applicative\",\n            \"vars\": \"m\",\n            \"constraints\": \"Functor m\",\n            \"methods\": [\n              \"ap :: m (a -> b) -> m a -> m b\",\n              \"pure :: a -> m a\"\n            ],\n            \"description\": \"Applicative is useful to sequence computations and combine their results. It\\nis best used in combination with Functor\'s map function.\",\n            \"example\": \"pipe(\\n  map((a, b) => a + b),\\n  ap($, Just(4))\\n)(Just(3))\\n// output: Just(7)\\n// in this example we can see how we can extend map and make it work with a\\n// binary function.\",\n            \"since\": \"0.2.0\"\n          }\n        }\n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"apL\",\n            \"description\": \"Sequence actions, discarding the value of the second argument.\",\n            \"example\": \"\",\n            \"since\": \"0.2.0\",\n            \"type\": \"Applicative m => m a -> m b -> m a\"\n          },\n          \"llvm\": {\n            \"name\": \"apL\",\n            \"description\": \"Sequence actions, discarding the value of the second argument.\",\n            \"example\": \"\",\n            \"since\": \"0.2.0\",\n            \"type\": \"Applicative m => m a -> m b -> m a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"liftA2\",\n            \"description\": \"Maps two Applicative inputs\",\n            \"example\": \"liftA2((a, b) => a + b, Just(2), Just(3)) // Just(5)\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Applicative m => (a -> b -> c) -> m a -> m b -> m c\"\n          },\n          \"llvm\": {\n            \"name\": \"liftA2\",\n            \"description\": \"Maps two Applicative inputs\",\n            \"example\": \"liftA2((a, b) => a + b, Just(2), Just(3)) // Just(5)\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Applicative m => (a -> b -> c) -> m a -> m b -> m c\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"liftA3\",\n            \"description\": \"Maps three Applicative inputs\",\n            \"example\": \"liftA2((a, b, c) => a + b + c, Just(2), Just(1), Just(2)) // Just(5)\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Applicative m => (a -> b -> c -> d) -> m a -> m b -> m c -> m d\"\n          },\n          \"llvm\": {\n            \"name\": \"liftA3\",\n            \"description\": \"Maps three Applicative inputs\",\n            \"example\": \"liftA2((a, b, c) => a + b + c, Just(2), Just(1), Just(2)) // Just(5)\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Applicative m => (a -> b -> c -> d) -> m a -> m b -> m c -> m d\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/JsonPrinter.mad\",\n      \"moduleName\": \"JsonPrinter\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"jsonToDoc\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"JsonValue -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"jsonToDoc\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"JsonValue -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"string\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> JsonValue\"\n          },\n          \"llvm\": {\n            \"name\": \"string\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> JsonValue\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"integer\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> JsonValue\"\n          },\n          \"llvm\": {\n            \"name\": \"integer\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> JsonValue\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"float\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> JsonValue\"\n          },\n          \"llvm\": {\n            \"name\": \"float\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> JsonValue\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"boolean\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Boolean -> JsonValue\"\n          },\n          \"llvm\": {\n            \"name\": \"boolean\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Boolean -> JsonValue\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"null\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"JsonValue\"\n          },\n          \"llvm\": {\n            \"name\": \"null\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"JsonValue\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"list\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> JsonValue) -> List a -> JsonValue\"\n          },\n          \"llvm\": {\n            \"name\": \"list\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> JsonValue) -> List a -> JsonValue\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"dict\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> JsonValue) -> Dictionary String a -> JsonValue\"\n          },\n          \"llvm\": {\n            \"name\": \"dict\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> JsonValue) -> Dictionary String a -> JsonValue\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"object\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List #[String, JsonValue] -> JsonValue\"\n          },\n          \"llvm\": {\n            \"name\": \"object\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List #[String, JsonValue] -> JsonValue\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"printJson\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> JsonValue -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"printJson\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> JsonValue -> String\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Tuple.mad\",\n      \"moduleName\": \"Tuple\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show (#[a, b])\",\n            \"constraints\": \"Show a, Show b\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show (#[a, b])\",\n            \"constraints\": \"Show a, Show b\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show (#[a, b, c])\",\n            \"constraints\": \"Show a, Show b, Show c\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show (#[a, b, c])\",\n            \"constraints\": \"Show a, Show b, Show c\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show (#[a, b, c, d])\",\n            \"constraints\": \"Show a, Show b, Show c, Show d\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show (#[a, b, c, d])\",\n            \"constraints\": \"Show a, Show b, Show c, Show d\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"fst\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"#[a, b] -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"fst\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"#[a, b] -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"snd\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"#[a, b] -> b\"\n          },\n          \"llvm\": {\n            \"name\": \"snd\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"#[a, b] -> b\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/PrettyPrint.mad\",\n      \"moduleName\": \"PrettyPrint\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        {\n          \"js\": {\n            \"name\": \"Doc\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"EmptyDoc\",\n              \"CharDoc(Char)\",\n              \"TextDoc(Integer, String)\",\n              \"LineDoc(Boolean)\",\n              \"CatDoc(Doc, Doc)\",\n              \"NestDoc(Integer, ({} -> Doc))\",\n              \"UnionDoc(Doc, Doc)\",\n              \"ColumnDoc((Integer -> Doc))\",\n              \"NestingDoc((Integer -> Doc))\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Doc\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"EmptyDoc\",\n              \"CharDoc(Char)\",\n              \"TextDoc(Integer, String)\",\n              \"LineDoc(Boolean)\",\n              \"CatDoc(Doc, Doc)\",\n              \"NestDoc(Integer, ({} -> Doc))\",\n              \"UnionDoc(Doc, Doc)\",\n              \"ColumnDoc((Integer -> Doc))\",\n              \"NestingDoc((Integer -> Doc))\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"SimpleDoc\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"SEmpty\",\n              \"SChar(Char, SimpleDoc)\",\n              \"SText(Integer, String, ({} -> SimpleDoc))\",\n              \"SLine(Integer, SimpleDoc)\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"SimpleDoc\",\n            \"params\": \"\",\n            \"constructors\": [\n              \"SEmpty\",\n              \"SChar(Char, SimpleDoc)\",\n              \"SText(Integer, String, ({} -> SimpleDoc))\",\n              \"SLine(Integer, SimpleDoc)\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"empty\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"empty\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"line\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"line\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"linebreak\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"linebreak\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"char\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Char -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"char\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Char -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"space\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"space\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"colon\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"colon\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"comma\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"comma\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"dot\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"dot\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"quote\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"quote\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"lbracket\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"lbracket\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"rbracket\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"rbracket\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"lbrace\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"lbrace\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"rbrace\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"rbrace\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"quotes\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"quotes\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"brackets\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"brackets\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"braces\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"braces\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"text\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"text\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"String -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"group\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"group\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"flatten\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"flatten\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"softline\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"softline\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"softbreak\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"softbreak\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"enclose\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> Doc -> Doc -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"enclose\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> Doc -> Doc -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"beside\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> Doc -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"beside\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> Doc -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"hcat\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List Doc -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"hcat\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"List Doc -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"sepBy\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> List Doc -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"sepBy\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Doc -> List Doc -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"nest\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> Doc -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"nest\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> Doc -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"column\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(Integer -> Doc) -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"column\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(Integer -> Doc) -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"nesting\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(Integer -> Doc) -> Doc\"\n          },\n          \"llvm\": {\n            \"name\": \"nesting\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(Integer -> Doc) -> Doc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"renderPretty\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Integer -> Doc -> SimpleDoc\"\n          },\n          \"llvm\": {\n            \"name\": \"renderPretty\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Integer -> Doc -> SimpleDoc\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"prettyPrint\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> Doc -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"prettyPrint\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> Doc -> String\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/ByteArray.mad\",\n      \"moduleName\": \"ByteArray\",\n      \"description\": \"ByteArray is a specialized array type that only contains bytes. It has a\\nfast path to convert to and from string which makes it practical when\\ndealing with raw bytes representing text data.\\n\\nNote: Most IO apis such as File or Http provide both functions that work with\\nString and functions that work with ByteArray.\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"toString\",\n            \"description\": \"Converts a byte array to a string\",\n            \"example\": \"toString(fromList([90, 91, 92]))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"ByteArray -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"toString\",\n            \"description\": \"Converts a byte array to a string\",\n            \"example\": \"toString(fromList([90, 91, 92]))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"ByteArray -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"fromString\",\n            \"description\": \"Creates a byte array from a string.\",\n            \"example\": \"fromString(\\\"abc\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray\"\n          },\n          \"llvm\": {\n            \"name\": \"fromString\",\n            \"description\": \"Creates a byte array from a string.\",\n            \"example\": \"fromString(\\\"abc\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"String -> ByteArray\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"toList\",\n            \"description\": \"Converts a byte array to a list of bytes.\",\n            \"example\": \"toList(fromString(\\\"abc\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"ByteArray -> List Byte\"\n          },\n          \"llvm\": {\n            \"name\": \"toList\",\n            \"description\": \"Converts a byte array to a list of bytes.\",\n            \"example\": \"toList(fromString(\\\"abc\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"ByteArray -> List Byte\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"fromList\",\n            \"description\": \"Creates a byte array from a list of bytes.\",\n            \"example\": \"fromList([90, 91, 92])\",\n            \"since\": \"0.11.0\",\n            \"type\": \"List Byte -> ByteArray\"\n          },\n          \"llvm\": {\n            \"name\": \"fromList\",\n            \"description\": \"Creates a byte array from a list of bytes.\",\n            \"example\": \"fromList([90, 91, 92])\",\n            \"since\": \"0.11.0\",\n            \"type\": \"List Byte -> ByteArray\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"concat\",\n            \"description\": \"Concatenates two byte arrays\",\n            \"example\": \"concat(fromString(\\\"123\\\"), fromString(\\\"456\\\")) // fromString(\\\"123456\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"ByteArray -> ByteArray -> ByteArray\"\n          },\n          \"llvm\": {\n            \"name\": \"concat\",\n            \"description\": \"Concatenates two byte arrays\",\n            \"example\": \"concat(fromString(\\\"123\\\"), fromString(\\\"456\\\")) // fromString(\\\"123456\\\")\",\n            \"since\": \"0.11.0\",\n            \"type\": \"ByteArray -> ByteArray -> ByteArray\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"mapBytes\",\n            \"description\": \"Maps the bytes of a byte array, applying the given function to each byte.\",\n            \"example\": \"mapBytes(substract(10), fromString(\\\"pqr\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(Byte -> Byte) -> ByteArray -> ByteArray\"\n          },\n          \"llvm\": {\n            \"name\": \"mapBytes\",\n            \"description\": \"Maps the bytes of a byte array, applying the given function to each byte.\",\n            \"example\": \"mapBytes(substract(10), fromString(\\\"pqr\\\"))\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(Byte -> Byte) -> ByteArray -> ByteArray\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"reduce\",\n            \"description\": \"Reduces a byte array to a value, given a reducer function, an initial value, and a byte array.\",\n            \"example\": \"reduce(add, 0, fromList([1, 2, 3])) // 6\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(Byte -> Byte -> a) -> a -> ByteArray -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"reduce\",\n            \"description\": \"Reduces a byte array to a value, given a reducer function, an initial value, and a byte array.\",\n            \"example\": \"reduce(add, 0, fromList([1, 2, 3])) // 6\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(Byte -> Byte -> a) -> a -> ByteArray -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"length\",\n            \"description\": \"Returns the length of a ByteArray.\",\n            \"example\": \"length(fromString(\\\"abc\\\")) // 3\",\n            \"since\": \"0.7.0\",\n            \"type\": \"ByteArray -> Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"length\",\n            \"description\": \"Returns the length of a ByteArray.\",\n            \"example\": \"length(fromString(\\\"abc\\\")) // 3\",\n            \"since\": \"0.7.0\",\n            \"type\": \"ByteArray -> Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"empty\",\n            \"description\": \"The empty byte array\",\n            \"example\": \"empty == empty // true\",\n            \"since\": \"0.11.0\",\n            \"type\": \"ByteArray\"\n          },\n          \"llvm\": {\n            \"name\": \"empty\",\n            \"description\": \"The empty byte array\",\n            \"example\": \"empty == empty // true\",\n            \"since\": \"0.11.0\",\n            \"type\": \"ByteArray\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Char.mad\",\n      \"moduleName\": \"Char\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable Char\",\n            \"constraints\": \"\",\n            \"description\": \"Comparable implementation for characters\",\n            \"example\": \"compare(\'a\', \'b\') // MORE\\ncompare(\'b\', \'a\') // LESS\\ncompare(\'a\', \'a\') // EQUAL\",\n            \"since\": \"0.13.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable Char\",\n            \"constraints\": \"\",\n            \"description\": \"Comparable implementation for characters\",\n            \"example\": \"compare(\'a\', \'b\') // MORE\\ncompare(\'b\', \'a\') // LESS\\ncompare(\'a\', \'a\') // EQUAL\",\n            \"since\": \"0.13.0\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show Char\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show Char\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"isDigit\",\n            \"description\": \"Returns true if the character is a digit, false otherwise.\",\n            \"example\": \"isDigit(\'a\') // false\\nisDigit(\'3\') // true\",\n            \"since\": \"0.13.0\",\n            \"type\": \"Char -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"isDigit\",\n            \"description\": \"Returns true if the character is a digit, false otherwise.\",\n            \"example\": \"isDigit(\'a\') // false\\nisDigit(\'3\') // true\",\n            \"since\": \"0.13.0\",\n            \"type\": \"Char -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"isLetter\",\n            \"description\": \"Returns true if the character is a letter, false otherwise. Note that if the\\ninput contains more than one character, false is returned.\",\n            \"example\": \"isLetter(\'0\') // false\\nisLetter(\'=\') // false\\nisLetter(\'a\') // true\",\n            \"since\": \"0.13.0\",\n            \"type\": \"Char -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"isLetter\",\n            \"description\": \"Returns true if the character is a letter, false otherwise. Note that if the\\ninput contains more than one character, false is returned.\",\n            \"example\": \"isLetter(\'0\') // false\\nisLetter(\'=\') // false\\nisLetter(\'a\') // true\",\n            \"since\": \"0.13.0\",\n            \"type\": \"Char -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"toLower\",\n            \"description\": \"Returns the lower cased version of a character\",\n            \"example\": \"toLower(\'A\') // \'a\'\\ntoLower(\'a\') // \'a\'\",\n            \"since\": \"0.13.0\",\n            \"type\": \"Char -> Char\"\n          },\n          \"llvm\": {\n            \"name\": \"toLower\",\n            \"description\": \"Returns the lower cased version of a character\",\n            \"example\": \"toLower(\'A\') // \'a\'\\ntoLower(\'a\') // \'a\'\",\n            \"since\": \"0.13.0\",\n            \"type\": \"Char -> Char\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"toUpper\",\n            \"description\": \"Returns the upper cased version of a character\",\n            \"example\": \"toLower(\'A\') // \'A\'\\ntoLower(\'a\') // \'A\'\",\n            \"since\": \"0.13.0\",\n            \"type\": \"Char -> Char\"\n          },\n          \"llvm\": {\n            \"name\": \"toUpper\",\n            \"description\": \"Returns the upper cased version of a character\",\n            \"example\": \"toLower(\'A\') // \'A\'\\ntoLower(\'a\') // \'A\'\",\n            \"since\": \"0.13.0\",\n            \"type\": \"Char -> Char\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Number.mad\",\n      \"moduleName\": \"Number\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable Integer\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable Integer\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable Byte\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable Byte\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable Float\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable Float\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show Integer\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show Integer\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show Byte\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show Byte\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show Float\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show Float\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Scan\",\n            \"declaration\": \"Scan Integer\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Scan\",\n            \"declaration\": \"Scan Integer\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Scan\",\n            \"declaration\": \"Scan Float\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Scan\",\n            \"declaration\": \"Scan Float\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Scan\",\n            \"declaration\": \"Scan Byte\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Scan\",\n            \"declaration\": \"Scan Byte\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"integerToFloat\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> Float\"\n          },\n          \"llvm\": {\n            \"name\": \"integerToFloat\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> Float\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"integerToByte\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> Byte\"\n          },\n          \"llvm\": {\n            \"name\": \"integerToByte\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Integer -> Byte\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"byteToFloat\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Byte -> Float\"\n          },\n          \"llvm\": {\n            \"name\": \"byteToFloat\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Byte -> Float\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"byteToInteger\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Byte -> Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"byteToInteger\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Byte -> Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"floatToInteger\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"floatToInteger\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"floatToByte\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Byte\"\n          },\n          \"llvm\": {\n            \"name\": \"floatToByte\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"Float -> Byte\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"formatDecimal\",\n            \"description\": \"Formats a a number given as the first parameter to a string containing the\\namount of numbers after the . given by the second parameter.\",\n            \"example\": \"formatDecimal(3.14159, 2) // \\\"3.14\\\"\",\n            \"since\": \"0.4.0\",\n            \"type\": \"Number a => a -> Float -> String\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Function.mad\",\n      \"moduleName\": \"Function\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"complement\",\n            \"description\": \"Wraps a predicate function and make it return the inverse. So if for a value\\nthe function would normally return true, after \\\"complemented\\\" it would return\\nfalse and vice versa.\",\n            \"example\": \"complement((x) => x % 2 == 0)(2) // false\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Boolean) -> a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"complement\",\n            \"description\": \"Wraps a predicate function and make it return the inverse. So if for a value\\nthe function would normally return true, after \\\"complemented\\\" it would return\\nfalse and vice versa.\",\n            \"example\": \"complement((x) => x % 2 == 0)(2) // false\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Boolean) -> a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"always\",\n            \"description\": \"It always returns the first supplied parameter no matter what. It is especially\\npractical during function composition when you want to discard whatever value\\nis passed to a function and always return the same thing.\",\n            \"example\": \"always(true, \\\"1\\\")            // true\\nmap(always(true), [1, 2 ,3]) // [true, true, true]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"a -> b -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"always\",\n            \"description\": \"It always returns the first supplied parameter no matter what. It is especially\\npractical during function composition when you want to discard whatever value\\nis passed to a function and always return the same thing.\",\n            \"example\": \"always(true, \\\"1\\\")            // true\\nmap(always(true), [1, 2 ,3]) // [true, true, true]\",\n            \"since\": \"0.0.5\",\n            \"type\": \"a -> b -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"identity\",\n            \"description\": \"Returns exactly what you give it.\",\n            \"example\": \"identity(4)       // 4\\nidentity(Just(3)) // Just(3)\",\n            \"since\": \"0.0.5\",\n            \"type\": \"a -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"identity\",\n            \"description\": \"Returns exactly what you give it.\",\n            \"example\": \"identity(4)       // 4\\nidentity(Just(3)) // Just(3)\",\n            \"since\": \"0.0.5\",\n            \"type\": \"a -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"equals\",\n            \"description\": \"Compares two values and returns true if they are equal, false otherwise.\",\n            \"example\": \"equals(1, 1)                 // true\\nequals([1, 2, 3], [1, 2, 3]) // true\\nequals(Just(1), Nothing)     // false\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Eq a => a -> a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"equals\",\n            \"description\": \"Compares two values and returns true if they are equal, false otherwise.\",\n            \"example\": \"equals(1, 1)                 // true\\nequals([1, 2, 3], [1, 2, 3]) // true\\nequals(Just(1), Nothing)     // false\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Eq a => a -> a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"notEquals\",\n            \"description\": \"Complement of equals, it returns false if the values are equal, true otherwise.\",\n            \"example\": \"equals(1, 1)                 // false\\nequals([1, 2, 3], [1, 2, 3]) // false\\nequals(Just(1), Nothing)     // true\",\n            \"since\": \"0.7.0\",\n            \"type\": \"Eq a => a -> a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"notEquals\",\n            \"description\": \"Complement of equals, it returns false if the values are equal, true otherwise.\",\n            \"example\": \"equals(1, 1)                 // false\\nequals([1, 2, 3], [1, 2, 3]) // false\\nequals(Just(1), Nothing)     // true\",\n            \"since\": \"0.7.0\",\n            \"type\": \"Eq a => a -> a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"ifElse\",\n            \"description\": \"It models branching and allows to run different transformation based\\non the given predicate. The first parameter is the predicate, the second one\\nis the function run when the predicate returns true, and the third parameter\\nis the function run when the predicate returns false.\",\n            \"example\": \"ifElse(equals(4), (x) => x + 1, (x) => x * 2, 4) // 5\\nifElse(equals(4), (x) => x + 1, (x) => x * 2, 5) // 10\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Boolean) -> (a -> b) -> (a -> b) -> a -> b\"\n          },\n          \"llvm\": {\n            \"name\": \"ifElse\",\n            \"description\": \"It models branching and allows to run different transformation based\\non the given predicate. The first parameter is the predicate, the second one\\nis the function run when the predicate returns true, and the third parameter\\nis the function run when the predicate returns false.\",\n            \"example\": \"ifElse(equals(4), (x) => x + 1, (x) => x * 2, 4) // 5\\nifElse(equals(4), (x) => x + 1, (x) => x * 2, 5) // 10\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Boolean) -> (a -> b) -> (a -> b) -> a -> b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"when\",\n            \"description\": \"It runs a transformation only if the predicate returns true, otherwise it\\nreturns the initial value.\",\n            \"example\": \"when(equals(4), (x) => x * 2, 4) // 8\\nwhen(equals(4), (x) => x * 2, 5) // 5\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Boolean) -> (a -> a) -> a -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"when\",\n            \"description\": \"It runs a transformation only if the predicate returns true, otherwise it\\nreturns the initial value.\",\n            \"example\": \"when(equals(4), (x) => x * 2, 4) // 8\\nwhen(equals(4), (x) => x * 2, 5) // 5\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> Boolean) -> (a -> a) -> a -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"not\",\n            \"description\": \"Returns the complement of the given Boolean value.\",\n            \"example\": \"not(true)  // false\\nnot(false) // true\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Boolean -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"not\",\n            \"description\": \"Returns the complement of the given Boolean value.\",\n            \"example\": \"not(true)  // false\\nnot(false) // true\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Boolean -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"noop\",\n            \"description\": \"Given any value, returns unit.\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"a -> {}\"\n          },\n          \"llvm\": {\n            \"name\": \"noop\",\n            \"description\": \"Given any value, returns unit.\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"a -> {}\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"flip\",\n            \"description\": \"Inverts the parameters of a binary function.\",\n            \"example\": \"\",\n            \"since\": \"0.5.0\",\n            \"type\": \"(a -> b -> c) -> b -> a -> c\"\n          },\n          \"llvm\": {\n            \"name\": \"flip\",\n            \"description\": \"Inverts the parameters of a binary function.\",\n            \"example\": \"\",\n            \"since\": \"0.5.0\",\n            \"type\": \"(a -> b -> c) -> b -> a -> c\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"any\",\n            \"description\": \"Given a predicate and a list of values it returns true if the predicate returns\\ntrue for any of the values in the list.\",\n            \"example\": \"any((x) => x > 10, [1, 2, 3]) // false\\nany((x) => x < 10, [1, 2, 3]) // true\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(a -> Boolean) -> List a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"any\",\n            \"description\": \"Given a predicate and a list of values it returns true if the predicate returns\\ntrue for any of the values in the list.\",\n            \"example\": \"any((x) => x > 10, [1, 2, 3]) // false\\nany((x) => x < 10, [1, 2, 3]) // true\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(a -> Boolean) -> List a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"all\",\n            \"description\": \"Given a predicate and a list of values it returns true if the predicate returns\\ntrue for all values in the list.\",\n            \"example\": \"all((x) => x > 2, [1, 2, 3]) // false\\nall((x) => x < 4, [1, 2, 3]) // true\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(a -> Boolean) -> List a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"all\",\n            \"description\": \"Given a predicate and a list of values it returns true if the predicate returns\\ntrue for all values in the list.\",\n            \"example\": \"all((x) => x > 2, [1, 2, 3]) // false\\nall((x) => x < 4, [1, 2, 3]) // true\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(a -> Boolean) -> List a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"either\",\n            \"description\": \"Functional \\\"or\\\", given two predicates and a value, return true if either predicate is true.\",\n            \"example\": \"either(equals(\\\"A\\\"), equals(\\\"B\\\"))(\\\"B\\\") // true\\neither(equals(\\\"A\\\"), equals(\\\"B\\\"))(\\\"C\\\") // false\",\n            \"since\": \"0.13.0\",\n            \"type\": \"(a -> Boolean) -> (a -> Boolean) -> a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"either\",\n            \"description\": \"Functional \\\"or\\\", given two predicates and a value, return true if either predicate is true.\",\n            \"example\": \"either(equals(\\\"A\\\"), equals(\\\"B\\\"))(\\\"B\\\") // true\\neither(equals(\\\"A\\\"), equals(\\\"B\\\"))(\\\"C\\\") // false\",\n            \"since\": \"0.13.0\",\n            \"type\": \"(a -> Boolean) -> (a -> Boolean) -> a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"both\",\n            \"description\": \"Functional \\\"and\\\", given two predicates and a value, return true if both predicates are true.\",\n            \"example\": \"import {lt} from \\\"Compare\\\"\\n// as \`lt\` applies arguments backwards, 70 is greater than both 50 and 60\\nboth(lt(50), lt(60))(70) // true\\nboth(lt(50), lt(60))(55) // false\",\n            \"since\": \"0.13.0\",\n            \"type\": \"(a -> Boolean) -> (a -> Boolean) -> a -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"both\",\n            \"description\": \"Functional \\\"and\\\", given two predicates and a value, return true if both predicates are true.\",\n            \"example\": \"import {lt} from \\\"Compare\\\"\\n// as \`lt\` applies arguments backwards, 70 is greater than both 50 and 60\\nboth(lt(50), lt(60))(70) // true\\nboth(lt(50), lt(60))(55) // false\",\n            \"since\": \"0.13.0\",\n            \"type\": \"(a -> Boolean) -> (a -> Boolean) -> a -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"memoize\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\",\n            \"type\": \"(a -> b) -> a -> b\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Directory.mad\",\n      \"moduleName\": \"Directory\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"read\",\n            \"description\": \"Reads a directory and returns a Wish containing the file entries\\nof the directory at the path given as parameter.\",\n            \"example\": \"fulfill(\\n  IO.log,\\n  IO.log,\\n  read(\\\"/\\\")\\n)\\n// [\\\"bin\\\", \\\"dev\\\", \\\"etc\\\", \\\"home\\\", \\\"opt\\\", \\\"tmp\\\", \\\"usr\\\"]\",\n            \"since\": \"0.13.0\",\n            \"type\": \"String -> Wish IOError (List String)\"\n          },\n          \"llvm\": {\n            \"name\": \"read\",\n            \"description\": \"Reads a directory and returns a Wish containing the file entries\\nof the directory at the path given as parameter.\",\n            \"example\": \"fulfill(\\n  IO.log,\\n  IO.log,\\n  read(\\\"/\\\")\\n)\\n// [\\\"bin\\\", \\\"dev\\\", \\\"etc\\\", \\\"home\\\", \\\"opt\\\", \\\"tmp\\\", \\\"usr\\\"]\",\n            \"since\": \"0.13.0\",\n            \"type\": \"String -> Wish IOError (List String)\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Show.mad\",\n      \"moduleName\": \"Show\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        {\n          \"js\": {\n            \"name\": \"Show\",\n            \"vars\": \"a\",\n            \"constraints\": \"\",\n            \"methods\": [\n              \"show :: a -> String\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Show\",\n            \"vars\": \"a\",\n            \"constraints\": \"\",\n            \"methods\": [\n              \"show :: a -> String\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        \n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Bifunctor.mad\",\n      \"moduleName\": \"Bifunctor\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        {\n          \"js\": {\n            \"name\": \"Bifunctor\",\n            \"vars\": \"f\",\n            \"constraints\": \"\",\n            \"methods\": [\n              \"bimap :: (a -> b) -> (c -> d) -> f a c -> f b d\",\n              \"mapFirst :: (a -> b) -> f a c -> f b c\",\n              \"mapSecond :: (c -> d) -> f a c -> f a d\"\n            ],\n            \"description\": \"A bifunctor is a type constructor that takes two type arguments and is a functor in both\\narguments. That is, unlike with Functor, a type constructor such as Either does not need\\nto be partially applied for a Bifunctor instance, and the methods in this class permit\\nmapping functions over the Left value or the Right value, or both at the same time.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Bifunctor\",\n            \"vars\": \"f\",\n            \"constraints\": \"\",\n            \"methods\": [\n              \"bimap :: (a -> b) -> (c -> d) -> f a c -> f b d\",\n              \"mapFirst :: (a -> b) -> f a c -> f b c\",\n              \"mapSecond :: (c -> d) -> f a c -> f a d\"\n            ],\n            \"description\": \"A bifunctor is a type constructor that takes two type arguments and is a functor in both\\narguments. That is, unlike with Functor, a type constructor such as Either does not need\\nto be partially applied for a Bifunctor instance, and the methods in this class permit\\nmapping functions over the Left value or the Right value, or both at the same time.\",\n            \"example\": \"\",\n            \"since\": \"0.11.0\"\n          }\n        }\n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        \n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Scan.mad\",\n      \"moduleName\": \"Scan\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        {\n          \"js\": {\n            \"name\": \"Scan\",\n            \"vars\": \"a\",\n            \"constraints\": \"\",\n            \"methods\": [\n              \"scan :: String -> Maybe a\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Scan\",\n            \"vars\": \"a\",\n            \"constraints\": \"\",\n            \"methods\": [\n              \"scan :: String -> Maybe a\"\n            ],\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        \n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Array.mad\",\n      \"moduleName\": \"Array\",\n      \"description\": \"Array serves a similar purpose as List but is composed of one memory block.\\nThis means that most operations that add or remove elements might need to reallocate the\\nwhole array whether adding an item at the front of a List has a very small memory footprint.\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor Array\",\n            \"constraints\": \"\",\n            \"description\": \"Maps over an array, applying the given function to each element.\",\n            \"example\": \"map(add(1), fromList([1, 2, 3])) // fromList([2, 3, 4])\",\n            \"since\": \"0.11.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor Array\",\n            \"constraints\": \"\",\n            \"description\": \"Maps over an array, applying the given function to each element.\",\n            \"example\": \"map(add(1), fromList([1, 2, 3])) // fromList([2, 3, 4])\",\n            \"since\": \"0.11.0\"\n          }\n        }\n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"fromList\",\n            \"description\": \"Creates an array from a list\",\n            \"example\": \"fromList([1, 2, 3]) // Array([1, 2, 3])\",\n            \"since\": \"0.11.0\",\n            \"type\": \"List a -> Array a\"\n          },\n          \"llvm\": {\n            \"name\": \"fromList\",\n            \"description\": \"Creates an array from a List\",\n            \"example\": \"fromList([1, 2, 3]) // Array([1, 2, 3])\",\n            \"since\": \"0.11.0\",\n            \"type\": \"List a -> Array a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"toList\",\n            \"description\": \"Converts an array to a list\",\n            \"example\": \"toList(fromList([1, 2, 3])) // [1, 2, 3]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Array a -> List a\"\n          },\n          \"llvm\": {\n            \"name\": \"toList\",\n            \"description\": \"Converts an array to a List\",\n            \"example\": \"toList(fromList([1, 2, 3])) // [1, 2, 3]\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Array a -> List a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"length\",\n            \"description\": \"Returns the length of the given array\",\n            \"example\": \"length(fromList([1, 2, 3])) // 3\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Array a -> Integer\"\n          },\n          \"llvm\": {\n            \"name\": \"length\",\n            \"description\": \"Returns the length of the given array\",\n            \"example\": \"length(fromList([1, 2, 3])) // 3\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Array a -> Integer\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"reduce\",\n            \"description\": \"Reduces an array to a value, given a reducer function, an initial value, and an array.\",\n            \"example\": \"reduce(add, 0, fromList([1, 2, 3])) // 6\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(a -> b -> a) -> a -> Array b -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"reduce\",\n            \"description\": \"Reduces an array to a value, given a reducer function, an initial value, and an array.\",\n            \"example\": \"reduce(add, 0, fromList([1, 2, 3])) // 6\",\n            \"since\": \"0.11.0\",\n            \"type\": \"(a -> b -> a) -> a -> Array b -> a\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"concat\",\n            \"description\": \"Concatenates two arrays\",\n            \"example\": \"concat(fromList([1, 2, 3]), fromList([4, 5, 6])) // fromList([1, 2, 3, 4, 5, 6])\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Array a -> Array a -> Array a\"\n          },\n          \"llvm\": {\n            \"name\": \"concat\",\n            \"description\": \"Concatenates two arrays\",\n            \"example\": \"concat(fromList([1, 2, 3]), fromList([4, 5, 6])) // fromList([1, 2, 3, 4, 5, 6])\",\n            \"since\": \"0.11.0\",\n            \"type\": \"Array a -> Array a -> Array a\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Either.mad\",\n      \"moduleName\": \"Either\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        {\n          \"js\": {\n            \"name\": \"Either\",\n            \"params\": \"e a\",\n            \"constructors\": [\n              \"Left(e)\",\n              \"Right(a)\"\n            ],\n            \"description\": \"An Either is a type which allows for modeling a disjoint union (\\\"a\\\" or \\\"b\\\", but in a safe way).\\nAn Either can be a Right: a successful computation, or a Left: an unsuccessful one.\\nBy capturing a value in this way, we can separate the transformation from the value contained in the Either,\\nmaking it easier to reason about and safer to pass around. (mnemonic: \\\"right\\\" == \\\"correct\\\")\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\"\n          },\n          \"llvm\": {\n            \"name\": \"Either\",\n            \"params\": \"e a\",\n            \"constructors\": [\n              \"Left(e)\",\n              \"Right(a)\"\n            ],\n            \"description\": \"An Either is a type which allows for modeling a disjoint union (\\\"a\\\" or \\\"b\\\", but in a safe way).\\nAn Either can be a Right: a successful computation, or a Left: an unsuccessful one.\\nBy capturing a value in this way, we can separate the transformation from the value contained in the Either,\\nmaking it easier to reason about and safer to pass around. (mnemonic: \\\"right\\\" == \\\"correct\\\")\",\n            \"example\": \"\",\n            \"since\": \"0.0.5\"\n          }\n        }\n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor (Either e)\",\n            \"constraints\": \"\",\n            \"description\": \"We can map over an Either: if it is a Right, it transforms the contained value. \\nIf it is a Left it does nothing. In this way we can freely frame the computations we want\\nto perform without being concerned as to whether the transformation was succcessful until later.\",\n            \"example\": \"map((x) => x + 1, Right(3))      // Right(4)\\nmap((x) => x + 1, Left(\\\"error\\\")) // Left(\\\"error\\\")\",\n            \"since\": \"0.0.6\"\n          },\n          \"llvm\": {\n            \"name\": \"Functor\",\n            \"declaration\": \"Functor (Either e)\",\n            \"constraints\": \"\",\n            \"description\": \"We can map over an Either: if it is a Right, it transforms the contained value. \\nIf it is a Left it does nothing. In this way we can freely frame the computations we want\\nto perform without being concerned as to whether the transformation was succcessful until later.\",\n            \"example\": \"map((x) => x + 1, Right(3))      // Right(4)\\nmap((x) => x + 1, Left(\\\"error\\\")) // Left(\\\"error\\\")\",\n            \"since\": \"0.0.6\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Applicative\",\n            \"declaration\": \"Applicative (Either e)\",\n            \"constraints\": \"\",\n            \"description\": \"By wrapping a function in \`pure\` we can apply it from one Either to another Either.\\nIf both contained values are Rights, it returns a Right of the result. If either Either is a Left,\\nthat value persists and the contained value is not transformed.\",\n            \"example\": \"ap(Right((x) => x + 1), Right(2))     // Right(3)\\nap(Left(\\\"oups\\\"), Right(2))            // Left(\\\"oups\\\")\\nap(Right((x) => x + 1), Left(\\\"oups\\\")) // Left(\\\"oups\\\")\",\n            \"since\": \"0.0.6\"\n          },\n          \"llvm\": {\n            \"name\": \"Applicative\",\n            \"declaration\": \"Applicative (Either e)\",\n            \"constraints\": \"\",\n            \"description\": \"By wrapping a function in \`pure\` we can apply it from one Either to another Either.\\nIf both contained values are Rights, it returns a Right of the result. If either Either is a Left,\\nthat value persists and the contained value is not transformed.\",\n            \"example\": \"ap(Right((x) => x + 1), Right(2))     // Right(3)\\nap(Left(\\\"oups\\\"), Right(2))            // Left(\\\"oups\\\")\\nap(Right((x) => x + 1), Left(\\\"oups\\\")) // Left(\\\"oups\\\")\",\n            \"since\": \"0.0.6\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Monad\",\n            \"declaration\": \"Monad (Either e)\",\n            \"constraints\": \"\",\n            \"description\": \"Use \`chain\` when you want to flatten a potentially double-wrapped Either.\\nInstead of a Right of a Right or a Right of a Left, \`chain\` will flatten the contained transformation\\nand return a Right (if successful) or a Left (if unsuccessful)\",\n            \"example\": \"chain((x) => Right(x + 1), Right(1))   // Right(2)\\nchain((x) => Right(x + 1), Left(\\\"no\\\")) // Left(\\\"no\\\")\",\n            \"since\": \"0.0.6\"\n          },\n          \"llvm\": {\n            \"name\": \"Monad\",\n            \"declaration\": \"Monad (Either e)\",\n            \"constraints\": \"\",\n            \"description\": \"Use \`chain\` when you want to flatten a potentially double-wrapped Either.\\nInstead of a Right of a Right or a Right of a Left, \`chain\` will flatten the contained transformation\\nand return a Right (if successful) or a Left (if unsuccessful)\",\n            \"example\": \"chain((x) => Right(x + 1), Right(1))   // Right(2)\\nchain((x) => Right(x + 1), Left(\\\"no\\\")) // Left(\\\"no\\\")\",\n            \"since\": \"0.0.6\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Bifunctor\",\n            \"declaration\": \"Bifunctor Either\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"Bifunctor\",\n            \"declaration\": \"Bifunctor Either\",\n            \"constraints\": \"\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show (Either e a)\",\n            \"constraints\": \"Show e, Show a\",\n            \"description\": \"Use \`show\` to transform an Either to a string.\",\n            \"example\": \"show((Right(3) :: Either Number Number)) // \\\"Right 3\\\"\\nshow((Left(3) :: Either Number Number))  // \\\"Left 3\\\"\",\n            \"since\": \"0.0.6\"\n          },\n          \"llvm\": {\n            \"name\": \"Show\",\n            \"declaration\": \"Show (Either e a)\",\n            \"constraints\": \"Show e, Show a\",\n            \"description\": \"Use \`show\` to transform an Either to a string.\",\n            \"example\": \"show((Right(3) :: Either Number Number)) // \\\"Right 3\\\"\\nshow((Left(3) :: Either Number Number))  // \\\"Left 3\\\"\",\n            \"since\": \"0.0.6\"\n          }\n        }\n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"mapRight\",\n            \"description\": \"An alias for \`map\`, use \`mapRight\` to transform the interior value of a Right.\",\n            \"example\": \"mapRight((x) => x + 1, Right(3)) // Right(4)\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> b) -> Either c a -> Either c b\"\n          },\n          \"llvm\": {\n            \"name\": \"mapRight\",\n            \"description\": \"An alias for \`map\`, use \`mapRight\` to transform the interior value of a Right.\",\n            \"example\": \"mapRight((x) => x + 1, Right(3)) // Right(4)\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> b) -> Either c a -> Either c b\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"mapLeft\",\n            \"description\": \"Unlike most other Either functions, \`mapLeft\` is one of the few which freely transforms the\\ninterior value of a Left. (It is the left-branch analogue of \`mapRight\`.)\",\n            \"example\": \"mapLeft((x) => x + 1, Left(3))  // Left(4)\\nmapLeft((x) => x + 1, Right(3)) // Right(3)\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> b) -> Either a c -> Either b c\"\n          },\n          \"llvm\": {\n            \"name\": \"mapLeft\",\n            \"description\": \"Unlike most other Either functions, \`mapLeft\` is one of the few which freely transforms the\\ninterior value of a Left. (It is the left-branch analogue of \`mapRight\`.)\",\n            \"example\": \"mapLeft((x) => x + 1, Left(3))  // Left(4)\\nmapLeft((x) => x + 1, Right(3)) // Right(3)\",\n            \"since\": \"0.0.5\",\n            \"type\": \"(a -> b) -> Either a c -> Either b c\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"isLeft\",\n            \"description\": \"Returns true if it is a Left, false otherwise.\",\n            \"example\": \"isLeft(Left(1))  // true\\nisLeft(Right(1)) // false\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Either a b -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"isLeft\",\n            \"description\": \"Returns true if it is a Left, false otherwise.\",\n            \"example\": \"isLeft(Left(1))  // true\\nisLeft(Right(1)) // false\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Either a b -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"isRight\",\n            \"description\": \"Returns true if it is a Right, false otherwise.\",\n            \"example\": \"isRight(Left(1))  // false\\nisRight(Right(1)) // true\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Either a b -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"isRight\",\n            \"description\": \"Returns true if it is a Right, false otherwise.\",\n            \"example\": \"isRight(Left(1))  // false\\nisRight(Right(1)) // true\",\n            \"since\": \"0.0.5\",\n            \"type\": \"Either a b -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"fromRight\",\n            \"description\": \"Pull the value contained in the Either if it is a Right, or the given\\nfallback value if it is a Left.\",\n            \"example\": \"fromRight(1, Right(4)) // 4\\nfromRight(1, Left(4))  // 1\",\n            \"since\": \"0.0.5\",\n            \"type\": \"a -> Either b a -> a\"\n          },\n          \"llvm\": {\n            \"name\": \"fromRight\",\n            \"description\": \"Pull the value contained in the Either if it is a Right, or the given\\nfallback value if it is a Left.\",\n            \"example\": \"fromRight(1, Right(4)) // 4\\nfromRight(1, Left(4))  // 1\",\n            \"since\": \"0.0.5\",\n            \"type\": \"a -> Either b a -> a\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Functor.mad\",\n      \"moduleName\": \"Functor\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        {\n          \"js\": {\n            \"name\": \"Functor\",\n            \"vars\": \"m\",\n            \"constraints\": \"\",\n            \"methods\": [\n              \"map :: (a -> b) -> m a -> m b\"\n            ],\n            \"description\": \"A functor represents a type that can be mapped over.\\nAn abstract datatype f a, which has the ability for its value(s) to be mapped over,\\ncan become an instance of the Functor typeclass. That is to say, a new Functor, f b,\\ncan be made from f a by transforming all of its value(s), whilst leaving the\\nstructure of f itself unmodified.\",\n            \"example\": \"map((x) => x + 1, Just(1)) // Just(2)\",\n            \"since\": \"0.0.8\"\n          },\n          \"llvm\": {\n            \"name\": \"Functor\",\n            \"vars\": \"m\",\n            \"constraints\": \"\",\n            \"methods\": [\n              \"map :: (a -> b) -> m a -> m b\"\n            ],\n            \"description\": \"A functor represents a type that can be mapped over.\\nAn abstract datatype f a, which has the ability for its value(s) to be mapped over,\\ncan become an instance of the Functor typeclass. That is to say, a new Functor, f b,\\ncan be made from f a by transforming all of its value(s), whilst leaving the\\nstructure of f itself unmodified.\",\n            \"example\": \"map((x) => x + 1, Just(1)) // Just(2)\",\n            \"since\": \"0.0.8\"\n          }\n        }\n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"mapL\",\n            \"description\": \"Sets the value of a Functor\",\n            \"example\": \"mapL(3, Just(4)) // Just(3)\",\n            \"since\": \"0.0.8\",\n            \"type\": \"Functor m => a -> m b -> m a\"\n          },\n          \"llvm\": {\n            \"name\": \"mapL\",\n            \"description\": \"Sets the value of a Functor\",\n            \"example\": \"mapL(3, Just(4)) // Just(3)\",\n            \"since\": \"0.0.8\",\n            \"type\": \"Functor m => a -> m b -> m a\"\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/Boolean.mad\",\n      \"moduleName\": \"Boolean\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        \n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        {\n          \"js\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable Boolean\",\n            \"constraints\": \"\",\n            \"description\": \"Comparable implementation for booleans\",\n            \"example\": \"compare(true, false) // MORE\\ncompare(false, true) // LESS\\ncompare(true, true) // EQUAL\\ncompare(false, false) // EQUAL\",\n            \"since\": \"0.11.0\"\n          },\n          \"llvm\": {\n            \"name\": \"Comparable\",\n            \"declaration\": \"Comparable Boolean\",\n            \"constraints\": \"\",\n            \"description\": \"Comparable implementation for booleans\",\n            \"example\": \"compare(true, false) // MORE\\ncompare(false, true) // LESS\\ncompare(true, true) // EQUAL\\ncompare(false, false) // EQUAL\",\n            \"since\": \"0.11.0\"\n          }\n        }\n      ],\n      \"expressions\": [\n        \n      ]\n    },\n    {\n      \"path\": \"/home/runner/work/madlib/madlib/prelude/__internal__/FilePath/Posix.mad\",\n      \"moduleName\": \"FilePath/Posix\",\n      \"description\": \"\",\n      \"typeDeclarations\": [\n        \n      ],\n      \"aliases\": [\n        {\n          \"js\": {\n            \"name\": \"FilePath\",\n            \"params\": \"\",\n            \"aliasedType\": \"String\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          },\n          \"llvm\": {\n            \"name\": \"FilePath\",\n            \"params\": \"\",\n            \"aliasedType\": \"String\",\n            \"description\": \"\",\n            \"example\": \"\",\n            \"since\": \"\"\n          }\n        }\n      ],\n      \"interfaces\": [\n        \n      ],\n      \"instances\": [\n        \n      ],\n      \"expressions\": [\n        {\n          \"js\": {\n            \"name\": \"dropTrailingPathSeparator\",\n            \"description\": \"Drops the trailing slash of a path.\",\n            \"example\": \"dropTrailingPathSeparator(\\\"/path/\\\") // \\\"/path\\\"\",\n            \"since\": \"0.8.0\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"dropTrailingPathSeparator\",\n            \"description\": \"Drops the trailing slash of a path.\",\n            \"example\": \"dropTrailingPathSeparator(\\\"/path/\\\") // \\\"/path\\\"\",\n            \"since\": \"0.8.0\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"splitPath\",\n            \"description\": \"Splits all segments of a path in a list.\",\n            \"example\": \"splitPath(\\\"/root/path\\\") // [\\\"/\\\", \\\"root/\\\", \\\"path\\\"]\",\n            \"since\": \"0.8.0\",\n            \"type\": \"String -> List String\"\n          },\n          \"llvm\": {\n            \"name\": \"splitPath\",\n            \"description\": \"Splits all segments of a path in a list.\",\n            \"example\": \"splitPath(\\\"/root/path\\\") // [\\\"/\\\", \\\"root/\\\", \\\"path\\\"]\",\n            \"since\": \"0.8.0\",\n            \"type\": \"String -> List String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"joinPath\",\n            \"description\": \"Joins a list of path segments.\",\n            \"example\": \"joinPath([\\\"/\\\", \\\"root/\\\", \\\"path\\\"]) // \\\"/root/path\\\"\",\n            \"since\": \"0.8.0\",\n            \"type\": \"List String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"joinPath\",\n            \"description\": \"Joins a list of path segments.\",\n            \"example\": \"joinPath([\\\"/\\\", \\\"root/\\\", \\\"path\\\"]) // \\\"/root/path\\\"\",\n            \"since\": \"0.8.0\",\n            \"type\": \"List String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"canonicalizePath\",\n            \"description\": \"Removes all extra slashes from a path.\",\n            \"example\": \"canonicalizePath(\\\"/root//path\\\") // \\\"/root/path\\\"\",\n            \"since\": \"0.8.0\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"canonicalizePath\",\n            \"description\": \"Removes all extra slashes from a path.\",\n            \"example\": \"canonicalizePath(\\\"/root//path\\\") // \\\"/root/path\\\"\",\n            \"since\": \"0.8.0\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"dropPathSegments\",\n            \"description\": \"Drops the given amount of segments from the beginning of the path.\\nNote that a leading / is considered as a path segment.\",\n            \"example\": \"dropPathSegments(2, \\\"/root/path/extra\\\") // \\\"path/extra\\\"\",\n            \"since\": \"0.8.0\",\n            \"type\": \"Integer -> String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"dropPathSegments\",\n            \"description\": \"Drops the given amount of segments from the beginning of the path.\\nNote that a leading / is considered as a path segment.\",\n            \"example\": \"dropPathSegments(2, \\\"/root/path/extra\\\") // \\\"path/extra\\\"\",\n            \"since\": \"0.8.0\",\n            \"type\": \"Integer -> String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"parentPath\",\n            \"description\": \"Returns the parent path of the given path.\",\n            \"example\": \"parentPath(\\\"/root/path\\\") // \\\"/root\\\"\",\n            \"since\": \"0.8.0\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"parentPath\",\n            \"description\": \"Returns the parent path of the given path.\",\n            \"example\": \"parentPath(\\\"/root/path\\\") // \\\"/root\\\"\",\n            \"since\": \"0.8.0\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"isRootPathOf\",\n            \"description\": \"Returns true if the first path is a parent path of the second path.\",\n            \"example\": \"isRootPathOf(\\\"/root/path\\\", \\\"/root/path/child\\\")      // true\\nisRootPathOf(\\\"/root/different\\\", \\\"/root/path/child\\\") // false\",\n            \"since\": \"0.8.0\",\n            \"type\": \"String -> String -> Boolean\"\n          },\n          \"llvm\": {\n            \"name\": \"isRootPathOf\",\n            \"description\": \"Returns true if the first path is a parent path of the second path.\",\n            \"example\": \"isRootPathOf(\\\"/root/path\\\", \\\"/root/path/child\\\")      // true\\nisRootPathOf(\\\"/root/different\\\", \\\"/root/path/child\\\") // false\",\n            \"since\": \"0.8.0\",\n            \"type\": \"String -> String -> Boolean\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"takeFileName\",\n            \"description\": \"Extracts the filename part of a path if there is one, returns an empty string otherwise.\",\n            \"example\": \"takeFileName(\\\"/path/filename.ext\\\") // \\\"filename.ext\\\"\\ntakeFileName(\\\"/path/folder/\\\")      // \\\"\\\"\",\n            \"since\": \"0.8.0\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"takeFileName\",\n            \"description\": \"Extracts the filename part of a path if there is one, returns an empty string otherwise.\",\n            \"example\": \"takeFileName(\\\"/path/filename.ext\\\") // \\\"filename.ext\\\"\\ntakeFileName(\\\"/path/folder/\\\")      // \\\"\\\"\",\n            \"since\": \"0.8.0\",\n            \"type\": \"String -> String\"\n          }\n        },\n        {\n          \"js\": {\n            \"name\": \"takeExtension\",\n            \"description\": \"Extracts the extension of a path if there\'s one, returns an empty string otherwise.\",\n            \"example\": \"takeExtension(\\\"/path/file.ext\\\") // \\\"ext\\\"\\ntakeExtension(\\\"/path/file\\\")     // \\\"\\\"\",\n            \"since\": \"0.8.0\",\n            \"type\": \"String -> String\"\n          },\n          \"llvm\": {\n            \"name\": \"takeExtension\",\n            \"description\": \"Extracts the extension of a path if there\'s one, returns an empty string otherwise.\",\n            \"example\": \"takeExtension(\\\"/path/file.ext\\\") // \\\"ext\\\"\\ntakeExtension(\\\"/path/file\\\")     // \\\"\\\"\",\n            \"since\": \"0.8.0\",\n            \"type\": \"String -> String\"\n          }\n        }\n      ]\n    }\n  ]\n}\n`;
let parsedDocumentation = Json.parse(parser)(docJson);
export let initialState = ((__x__) => {
  if (__x__.__constructor === "Right" && true) {
    let modules = __x__.__args[0];
    return ({ modules: modules, search: ``, path: Maybe.fromMaybe(``)(Url.decode(getUrl(({ __constructor: "Unit", __args: [] })))), target: JS });
  }
  else if (__x__.__constructor === "Left" && true) {
    let err = __x__.__args[0];
    return (() => {
  
  return ({ modules: (null), search: ``, path: ``, target: JS })
})();
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(parsedDocumentation);
let ModuleView = (target => module => div(({ v: className(`module`), n: null }))(({ v: h2(({ v: className(`module__title`), n: null }))(({ v: link(({ v: to(`/` + module.name), n: null }))(({ v: module.name, n: null })), n: null })), n: { v: (String.isEmpty(module.description) ? empty((null))((null)) : p(({ v: className(`module__description`), n: null }))(({ v: renderMarkdown(module.description), n: null }))), n: { v: ul(({ v: className(`content__items`), n: null }))((__listCtorSpread__(Functor.List_5b7ebeeaa5acfe1eeea5a9e9845b152d.map()(Type(module.name))(module.typeDeclarations), __listCtorSpread__(Functor.List_5b7ebeeaa5acfe1eeea5a9e9845b152d.map()(Alias(module.name))(module.aliases), __listCtorSpread__(Functor.List_5b7ebeeaa5acfe1eeea5a9e9845b152d.map()(Interface(module.name))(module.interfaces), __listCtorSpread__(Functor.List_5b7ebeeaa5acfe1eeea5a9e9845b152d.map()(Instance(module.name))(module.instances), Functor.List_5b7ebeeaa5acfe1eeea5a9e9845b152d.map()(Expression(target)(module.name))(module.expressions))))))), n: null } } })));
let ContentView = (target => pathResult => ((__x__) => {
  if (__x__.__constructor === "ModuleResult" && true) {
    let modules = __x__.__args[0];
    return div((null))((Functor.List_5b7ebeeaa5acfe1eeea5a9e9845b152d.map()(ModuleView(target))(modules)));
  }
  else if (__x__.__constructor === "ExpressionResult" && true && true) {
    let moduleName = __x__.__args[0];
    let exp = __x__.__args[1];
    return ul(({ v: className(`content__items`), n: null }))(({ v: Expression(target)(moduleName)(exp), n: null }));
  }
  else if (__x__.__constructor === "TypeResult" && true && true) {
    let moduleName = __x__.__args[0];
    let t = __x__.__args[1];
    return ul(({ v: className(`content__items`), n: null }))(({ v: Type(moduleName)(t), n: null }));
  }
  else if (__x__.__constructor === "AliasResult" && true && true) {
    let moduleName = __x__.__args[0];
    let t = __x__.__args[1];
    return ul(({ v: className(`content__items`), n: null }))(({ v: Alias(moduleName)(t), n: null }));
  }
  else if (__x__.__constructor === "InterfaceResult" && true && true) {
    let moduleName = __x__.__args[0];
    let t = __x__.__args[1];
    return ul(({ v: className(`content__items`), n: null }))(({ v: Interface(moduleName)(t), n: null }));
  }
  else if (__x__.__constructor === "InstanceResult" && true && true) {
    let moduleName = __x__.__args[0];
    let t = __x__.__args[1];
    return ul(({ v: className(`content__items`), n: null }))(({ v: Instance(moduleName)(t), n: null }));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(pathResult));
export let DocApp = (state => {
    let modulesInPath = getModulesToShow(state);
    let pathResult = processPath(state);
    return div(({ v: className(`documentation`), n: null }))(({ v: Header(state.target), n: { v: SideMenu(state.search)(state.modules), n: { v: main(({ v: className(`documentation__content`), n: null }))(({ v: Breadcrumbs(state), n: { v: ContentView(state.target)(pathResult), n: null } })), n: null } } }));
});
export let handleUrlChanged = onUrlChanged(syncAction((state => event => ((__x__) => {
  if (__x__.__constructor === "PopStateEvent" && true) {
    let { url: url } = __x__.__args[0];
    return ({ ...state, path: Maybe.fromMaybe(``)(Url.decode(url)) });
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(event))));
export default { initialState, DocApp, handleUrlChanged };
