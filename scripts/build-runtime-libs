#!/bin/bash
mkdir -p .buildlibs
mkdir -p runtime/lib
mkdir -p runtime/include
cd .buildlibs



# build libuv
if [ "$TARGET" = "WIN_X64" ]
then
  # For windows we need to pull a commit that includes a fix related to how mingw changed headers recently
  wget https://github.com/libuv/libuv/archive/0a47e4c7714c9d1cf62efef3efafd3fc3ad354c2.zip
  unzip 0a47e4c7714c9d1cf62efef3efafd3fc3ad354c2.zip -d libuv
  cd libuv/libuv-0a47e4c7714c9d1cf62efef3efafd3fc3ad354c2
  mkdir -p build
  cd build && cmake .. -G "Ninja" -DBUILD_TESTING="OFF"
  cd ..
  cmake --build build
  cmake --build build --target install
  cd ../..
  cp libuv/libuv-0a47e4c7714c9d1cf62efef3efafd3fc3ad354c2/build/libuv_a.a ../runtime/lib/libuv.a
  cp -R libuv/libuv-0a47e4c7714c9d1cf62efef3efafd3fc3ad354c2/include ../runtime/
else
  wget https://github.com/libuv/libuv/archive/refs/tags/v1.44.1.zip
  unzip v1.44.1.zip -d libuv
  cd libuv/libuv-1.44.1 && sh autogen.sh && ./configure --enable-static && make -j
  cd ../..
  cp libuv/libuv-1.44.1/.libs/libuv.a ../runtime/lib/libuv.a
  cp -R libuv/libuv-1.44.1/include ../runtime/
fi


# build libgc
LIBGC_VERSION="8.2.0"

wget "https://github.com/ivmai/bdwgc/archive/refs/tags/v${LIBGC_VERSION}.zip"
unzip "v${LIBGC_VERSION}.zip" -d libgc
cd "libgc/bdwgc-${LIBGC_VERSION}"
sed -i -e 's/scan_size = 2/scan_size = 8/g' alloc.c
git clone https://github.com/ivmai/libatomic_ops.git
make -f Makefile.direct CFLAGS_EXTRA="-O3 -DDONT_ADD_BYTE_AT_END -DNO_DEBUGGING -DGC_THREADS -DPARALLEL_MARK -DTHREAD_LOCAL_ALLOC -DLARGE_CONFIG -DGC_DISABLE_INCREMENTAL" c++
make -f Makefile.direct CFLAGS_EXTRA="-O3 -DDONT_ADD_BYTE_AT_END -DNO_DEBUGGING -DGC_THREADS -DPARALLEL_MARK -DTHREAD_LOCAL_ALLOC -DLARGE_CONFIG -DGC_DISABLE_INCREMENTAL"
cd ../..
cp "libgc/bdwgc-${LIBGC_VERSION}/gc.a" ../runtime/lib/libgc.a
cp "libgc/bdwgc-${LIBGC_VERSION}/gccpp.a" ../runtime/lib/libgccpp.a
cp -R "libgc/bdwgc-${LIBGC_VERSION}/include" ../runtime/



# build libz
LIBZ_VERSION="1.2.11"
LIBZ_FOLDER="$(pwd)/zlib-$LIBZ_VERSION"
LIBZ_PREFIX="$LIBZ_FOLDER/build"

wget "https://github.com/madler/zlib/archive/refs/tags/v$LIBZ_VERSION.zip"
unzip "v$LIBZ_VERSION.zip"
cd "zlib-$LIBZ_VERSION"

if [ "$TARGET" = "WIN_X64" ]
then
  PREFIX=$LIBZ_PREFIX make -fwin32/Makefile.gcc
  DESTDIR="$LIBZ_PREFIX/" BINARY_PATH="bin" INCLUDE_PATH="include" LIBRARY_PATH="lib" make install -fwin32/Makefile.gcc
  cp "$LIBZ_PREFIX/lib/libz.a" ../../runtime/lib/
  cp -R "$LIBZ_PREFIX/include/"* ../../runtime/include/
else
  ./configure --prefix=$LIBZ_PREFIX
  make
  make install
  cp "$LIBZ_PREFIX/lib/libz.a" ../../runtime/lib/
  cp -R "$LIBZ_PREFIX/include/"* ../../runtime/include/
fi
cd ..



# build openssl
OPENSSL_VERSION="3.0.5"
OPENSSL_FOLDER="$(pwd)/openssl-openssl-$OPENSSL_VERSION"
OPENSSL_PREFIX="$OPENSSL_FOLDER/build"

wget "https://github.com/openssl/openssl/archive/refs/tags/openssl-$OPENSSL_VERSION.zip"
unzip "openssl-$OPENSSL_VERSION.zip"
cd "openssl-openssl-$OPENSSL_VERSION"
if [ "$TARGET" = "LINUX_X64" ] || [ "$TARGET" = "MUSL_X64" ]
then
  ./Configure --prefix=$OPENSSL_PREFIX
  make
  make install
  cp -R include/* ../../runtime/include/
  cp build/lib64/libssl.a ../../runtime/lib/
  cp build/lib64/libcrypto.a ../../runtime/lib/
  cd ..
elif [ "$TARGET" = "MACOS_X64" ] || [ "$TARGET" = "MACOS_ARM64" ]
then
  ./Configure --prefix=$OPENSSL_PREFIX
  make
  make install
  cp -R include/* ../../runtime/include/
  cp build/lib/libssl.a ../../runtime/lib/
  cp build/lib/libcrypto.a ../../runtime/lib/
  cd ..
elif [ "$TARGET" = "WIN_X64" ]
then
  ./Configure mingw64 --prefix=$OPENSSL_PREFIX
  make
  make install
  cp -R include/* ../../runtime/include/
  cp build/lib64/libssl.a ../../runtime/lib/
  cp build/lib64/libcrypto.a ../../runtime/lib/
  cd ..
fi



# install libcurl
LIBCURL_VERSION="7.81.0"
LIBCURL_VERSION_ALT="7_81_0"

wget "https://github.com/curl/curl/releases/download/curl-$LIBCURL_VERSION_ALT/curl-$LIBCURL_VERSION.zip"
unzip "curl-$LIBCURL_VERSION.zip"
cd "curl-$LIBCURL_VERSION"
if [ "$TARGET" = "WIN_X64" ]
then
  CURL_LDFLAG_EXTRAS="-L$OPENSSL_PREFIX/lib64 -L$LIBZ_PREFIX/lib" CURL_CFLAG_EXTRAS="-I$OPENSSL_PREFIX/include -I$LIBZ_PREFIX/include" CURL_CC=gcc OPENSSL_PATH=$OPENSSL_FOLDER ZLIB_PATH=$LIBZ_PREFIX make libcurl.a -C lib -f Makefile.m32 CFG="-ssl-zlib"
  cd ..
  cp -R "curl-$LIBCURL_VERSION/include/"* ../runtime/include/
  cp "curl-$LIBCURL_VERSION/lib/libcurl.a" ../runtime/lib/
elif [ "$TARGET" = "LINUX_X64" ]
then
  LDFLAGS="-L$OPENSSL_PREFIX/lib64 -L$LIBZ_PREFIX/lib" CPPFLAGS="-I$OPENSSL_PREFIX/include -I$LIBZ_PREFIX/include" ./configure --disable-shared --enable-static --disable-ldap --disable-manual --disable-sspi --prefix $(pwd)/build --with-openssl="$OPENSSL_PREFIX" --without-libidn2 --without-nghttp2 --with-zlib="$LIBZ_PREFIX"
  make
  make install

  cd ..
  cp -R "curl-$LIBCURL_VERSION/build/"* ../runtime/
elif [ "$TARGET" = "MUSL_X64" ]
then
  LDFLAGS="-L$OPENSSL_PREFIX/lib64 -L$LIBZ_PREFIX/lib" CPPFLAGS="-I$OPENSSL_PREFIX/include -I$LIBZ_PREFIX/include" ./configure --disable-shared --enable-static --disable-ldap --disable-manual --disable-sspi --prefix $(pwd)/build --with-openssl="$OPENSSL_PREFIX" --without-libidn2 --without-nghttp2 --with-zlib="$LIBZ_PREFIX"
  make
  make install

  cd ..
  cp -R "curl-$LIBCURL_VERSION/build/"* ../runtime/
elif [ "$TARGET" = "MACOS_X64" ]
then
  LDFLAGS="-L$OPENSSL_PREFIX/lib -L$LIBZ_PREFIX/lib" CPPFLAGS="-I$OPENSSL_PREFIX/include -I$LIBZ_PREFIX/include" ./configure --disable-shared --enable-static --disable-ldap --disable-manual --disable-sspi --prefix $(pwd)/build --with-openssl="$OPENSSL_PREFIX" --without-libidn2 --without-nghttp2 --with-zlib="$LIBZ_PREFIX"
  make
  make install

  cd ..
  cp -R "curl-$LIBCURL_VERSION/build/"* ../runtime/
elif [ "$TARGET" = "MACOS_ARM64" ]
then
  export ARCH=arm64
  export SDK=macosx
  export DEPLOYMENT_TARGET=11.0

  export CFLAGS="-arch $ARCH -isysroot $(xcrun -sdk $SDK --show-sdk-path) -m$SDK-version-min=$DEPLOYMENT_TARGET"
  ./configure --disable-shared --enable-static --disable-ldap --disable-sspi --host=arm-apple-darwin --prefix $(pwd)/build --with-openssl="$OPENSSL_PREFIX" --without-libidn2 --without-nghttp2 --with-zlib="$LIBZ_PREFIX"
  make
  make install

  cd ..
  cp -R "curl-$LIBCURL_VERSION/build/"* ../runtime/
fi



# build libpcre2
wget https://github.com/PhilipHazel/pcre2/releases/download/pcre2-10.39/pcre2-10.39.zip
unzip pcre2-10.39.zip
cd pcre2-10.39
./configure --disable-shared
make
cp .libs/libpcre2-8.a ../../runtime/lib/
cp src/pcre2.h ../../runtime/include/
cd ..



# build mman for win64
if [ "$TARGET" = "WIN_X64" ]
then
  wget https://github.com/alitrack/mman-win32/archive/refs/heads/master.zip
  unzip master.zip
  cd mman-win32-master
  ./configure
  make
  cp libmman.a ../../runtime/lib/
  mkdir -p ../../runtime/include/sys
  cp mman.h ../../runtime/include/sys/
fi

cd ..
rm -rf .buildlibs
