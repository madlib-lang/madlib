#!/bin/bash
mkdir -p .buildlibs
mkdir -p runtime/lib
cd .buildlibs

# install libuv
if [ "$TARGET" = "WIN_X64" ]
then
  # For windows we need to pull a commit that includes a fix related to how mingw changed headers recently
  wget https://github.com/libuv/libuv/archive/0a47e4c7714c9d1cf62efef3efafd3fc3ad354c2.zip
  unzip 0a47e4c7714c9d1cf62efef3efafd3fc3ad354c2.zip -d libuv
  cd libuv/libuv-0a47e4c7714c9d1cf62efef3efafd3fc3ad354c2
  mkdir -p build
  cd build && cmake .. -G "Ninja" -DBUILD_TESTING="OFF"
  cd ..
  cmake --build build
  cmake --build build --target install
  cd ../..
  cp libuv/libuv-0a47e4c7714c9d1cf62efef3efafd3fc3ad354c2/build/libuv_a.a ../runtime/lib/libuv.a
  cp -R libuv/libuv-0a47e4c7714c9d1cf62efef3efafd3fc3ad354c2/include ../runtime/
else
  wget https://github.com/libuv/libuv/archive/refs/tags/v1.42.0.zip
  unzip v1.42.0.zip -d libuv
  cd libuv/libuv-1.42.0 && sh autogen.sh && ./configure --enable-static && make -j
  cd ../..
  cp libuv/libuv-1.42.0/.libs/libuv.a ../runtime/lib/libuv.a
  cp -R libuv/libuv-1.42.0/include ../runtime/
fi


LIBGC_VERSION="8.2.0"
# install libgc
wget "https://github.com/ivmai/bdwgc/archive/refs/tags/v${LIBGC_VERSION}.zip"
unzip "v${LIBGC_VERSION}.zip" -d libgc
cd "libgc/bdwgc-${LIBGC_VERSION}" && git clone https://github.com/ivmai/libatomic_ops.git && make -f Makefile.direct
cd ../..
cp "libgc/bdwgc-${LIBGC_VERSION}/gc.a" ../runtime/lib/libgc.a
cp -R "libgc/bdwgc-${LIBGC_VERSION}/include" ../runtime/


# install libz
wget https://github.com/madler/zlib/archive/refs/tags/v1.2.11.zip
unzip v1.2.11.zip
cd zlib-1.2.11
./configure
make
make install
cp libz.a ../../runtime/lib/
cd ..


# install libcurl
if [ "$TARGET" = "WIN_X64" ]
then
  wget https://github.com/curl/curl/releases/download/curl-7_81_0/curl-7.81.0.zip
  unzip curl-7.81.0.zip
  cd curl-7.81.0

  CURL_CC=gcc OPENSSL_PATH=/mingw64/ ZLIB_PATH=/mingw64/ make mingw32 CFG="-ssl-zlib"

  cd ..
  cp curl-7.81.0/lib/libcurl.a ../runtime/lib/
  cp /mingw64/lib/libssl.a ../runtime/lib/
  cp /mingw64/lib/libcrypto.a ../runtime/lib/
elif [ "$TARGET" = "LINUX_X64" ]
then
  wget https://github.com/curl/curl/releases/download/curl-7_81_0/curl-7.81.0.zip
  unzip curl-7.81.0.zip
  cd curl-7.81.0

  ./configure --disable-shared --enable-static --disable-ldap --disable-manual --disable-sspi --prefix $(pwd)/build --with-openssl --without-libidn2 --without-nghttp2
  make -j10
  make install

  cd ..

  cp /usr/lib/x86_64-linux-gnu/libcrypto.a ../runtime/lib/
  cp /usr/lib/x86_64-linux-gnu/libssl.a ../runtime/lib/
  cp -R curl-7.81.0/build/* ../runtime/
elif [ "$TARGET" = "MUSL_X64" ]
then
  wget https://github.com/curl/curl/releases/download/curl-7_81_0/curl-7.81.0.zip
  unzip curl-7.81.0.zip
  cd curl-7.81.0

  ./configure --disable-shared --enable-static --disable-ldap --disable-manual --disable-sspi --prefix $(pwd)/build --with-openssl --without-libidn2 --without-nghttp2 --with-zlib="../zlib-1.2.11"
  make -j10
  make install

  cd ..

  cp /usr/lib/libcrypto.a ../runtime/lib/
  cp /usr/lib/libssl.a ../runtime/lib/
  cp -R curl-7.81.0/build/* ../runtime/
elif [ "$TARGET" = "MACOS_X64" ]
then
  wget https://github.com/curl/curl/releases/download/curl-7_81_0/curl-7.81.0.zip
  unzip curl-7.81.0.zip
  cd curl-7.81.0

  ./configure --disable-shared --enable-static --disable-ldap --disable-manual --disable-sspi --prefix $(pwd)/build --with-secure-transport --without-libidn2 --without-nghttp2
  make -j10
  make install

  cd ..

  cp -R curl-7.81.0/build/* ../runtime/
elif [ "$TARGET" = "MACOS_ARM64" ]
then
  wget https://github.com/curl/curl/releases/download/curl-7_81_0/curl-7.81.0.zip
  unzip curl-7.81.0.zip
  cd curl-7.81.0

  export ARCH=arm64
  export SDK=macosx
  export DEPLOYMENT_TARGET=11.0

  export CFLAGS="-arch $ARCH -isysroot $(xcrun -sdk $SDK --show-sdk-path) -m$SDK-version-min=$DEPLOYMENT_TARGET"
  ./configure --disable-shared --enable-static --disable-ldap --disable-sspi --host=arm-apple-darwin --prefix $(pwd)/build --with-secure-transport --without-libidn2 --without-nghttp2
  make -j10
  make install
  cd ..
  cp -R curl-7.81.0/build/* ../runtime/
fi


# install libpcre2
wget https://github.com/PhilipHazel/pcre2/releases/download/pcre2-10.39/pcre2-10.39.zip
unzip pcre2-10.39.zip
cd pcre2-10.39
./configure
make
cp .libs/libpcre2-8.a ../../runtime/lib/
cp src/pcre2.h ../../runtime/include/
cd ..


#install mman for win64
if [ "$TARGET" = "WIN_X64" ]
then
  wget https://github.com/alitrack/mman-win32/archive/refs/heads/master.zip
  unzip master.zip
  cd mman-win32-master
  ./configure
  make
  cp libmman.a ../../runtime/lib/
  mkdir -p ../../runtime/include/sys
  cp mman.h ../../runtime/include/sys/
fi


cd ..
rm -rf .buildlibs
