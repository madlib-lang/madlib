import type { Maybe } from "Maybe"

import IO from "IO"
import List from "List"
import String from "String"
import { Just, Nothing } from "Maybe"
import Date from "Date"
import { fst, snd } from "Tuple"


dateComment :: String
dateComment = pipe(
  Date.toISOString,
  (dateString) => #[String.slice(0, 10, dateString), String.slice(11, 19, dateString)],
  (timeInfo) => `// generated automatically on the ${fst(timeInfo)} at ${snd(timeInfo)} UTC`
)(Date.now())


CPP_FILE_HEADER =
`${dateComment}
#include <gc.h>
#include "apply-pap.hpp"
#include <cstdarg>
#include <iostream>


// Partial application

#ifdef __cplusplus
extern "C" {
#endif
`

CPP_FILE_FOOTER =
`#ifdef __cplusplus
}
#endif
`

CPP_SPECIFIC_FUNCTIONS = `
void *__applyPAP1__(PAP_t *pap, void *arg1) {
  int32_t arity = pap->arity;
  if (arity == 1) {
    void *(*fn)(void *) = (void*(*)(void *))pap->fn;
    return fn(arg1);
  }

  int32_t ENV_SIZE = arity - pap->missingArgCount;
  if (ENV_SIZE == 1 && arity == 2) {
    void *(*fn)(void *, void *) = (void*(*)(void *, void *))pap->fn;
    void **env = (void **)pap->env;
    return fn(env[0], arg1);
  }

  if (ENV_SIZE == 2 && arity == 3) {
    void *(*fn)(void *, void *, void *) = (void*(*)(void *, void *, void *))pap->fn;
    void **env = (void **)pap->env;
    return fn(env[0], env[1], arg1);
  }

  return __applyPAP__(pap, 1, arg1);
}

void *__applyPAP2__(PAP_t *pap, void *arg1, void *arg2) {
  int32_t arity = pap->arity;
  int32_t missingArgs = pap->missingArgCount;
  if (missingArgs <= 2) {
    if (arity == 1) {
        void *(*fn)(void *) = (void*(*)(void *))pap->fn;
        return __applyPAP1__((PAP_t*) fn(arg1), arg2);
    } 

    int32_t ENV_SIZE = arity - missingArgs;
    if (ENV_SIZE == 0 && arity == 2) {
      void *(*fn)(void *, void *) = (void*(*)(void *, void *))pap->fn;
      return fn(arg1, arg2);
    }

    if (ENV_SIZE == 1 && arity == 3) {
      void *(*fn)(void *, void *, void *) = (void*(*)(void *, void *, void *))pap->fn;
      void **env = (void **)pap->env;
      return fn(env[0], arg1, arg2);
    }

    if (ENV_SIZE == 2 && arity == 4) {
      void *(*fn)(void *, void *, void *, void *) = (void*(*)(void *, void *, void *, void *))pap->fn;
      void **env = (void **)pap->env;
      return fn(env[0], env[1], arg1, arg2);
    }
  }

  return __applyPAP__(pap, 2, arg1, arg2);
}

`

FUNCTION_START =
`void *__applyPAP__(void *pap, int32_t argc, ...) {
  va_list argv;
  va_start(argv, argc);

  PAP_t *unwrappedPAP = (PAP_t *)pap;
  int32_t ENV_SIZE = unwrappedPAP->arity - unwrappedPAP->missingArgCount;
  int32_t ARITY = unwrappedPAP->arity;
`

FUNCTION_END =
`  printf("__applyPAP__ case not handled, argc: %d, ENV_SIZE: %d, ARITY: %d\\n", argc, ENV_SIZE, ARITY);

  return NULL;
}

`

KNOWN_CALL_START =
`
  if (argc >= unwrappedPAP->missingArgCount) {
    void *result = (void *)NULL;
    void **env = (void **)unwrappedPAP->env;
`

KNOWN_CALL_END =
`    va_end(argv);
    return result;
  } `

OVERLOAD_START =
`    if (argc > unwrappedPAP->missingArgCount) {
      int argsLeft = argc - unwrappedPAP->missingArgCount;
`

OVERLOAD_END = "    }\n"

UNDERLOAD =
`else {
    // We push the args to a newly allocated PAP
    int NEXT_ENV_SIZE = argc + ENV_SIZE;
    PAP_t *newPAP = (PAP_t *)GC_MALLOC(sizeof(PAP_t));
    newPAP->fn = unwrappedPAP->fn;
    newPAP->arity = unwrappedPAP->arity;
    newPAP->missingArgCount = unwrappedPAP->missingArgCount - argc;

    void **env = (void **)unwrappedPAP->env;
    void **newEnv = (void**) GC_MALLOC(sizeof(void*) * NEXT_ENV_SIZE);
    int i = 0;
    for (i = 0; i<ENV_SIZE; i++) {
      newEnv[i] = env[i];
    }
    for (; i<NEXT_ENV_SIZE; i++) {
      void *arg = va_arg(argv, void*);
      newEnv[i] = arg;
    }

    va_end(argv);
    newPAP->env = newEnv;
    return newPAP;
  }
`


HPP_FILE_TOP =
`${dateComment}
#ifndef APPLY_PAP_H
#define APPLY_PAP_H

#include <math.h>
#include <stdint.h>

`

HPP_FILE_BOTTOM =
`
typedef struct PAP {
  void *fn;
  int32_t arity;
  int32_t missingArgCount;
  void *env;
} PAP_t;


#ifdef __cplusplus
extern "C" {
#endif

void *__applyPAP__(void *pap, int32_t argc, ...);

#ifdef __cplusplus
}
#endif

#endif // APPLY_PAP_H
`


generateFnAssignment :: Integer -> String
generateFnAssignment = (arity) => {
  params = pipe(
    List.repeat("void *"),
    String.join(", ")
  )(arity)

  return `void *(*fn)(${params}) = (void*(*)(${params}))unwrappedPAP->fn;`
}


makeArgNamesWithStart :: Integer -> Integer -> List String
makeArgNamesWithStart = (start, count) => pipe(
  List.range(start),
  map((argIndex) => `arg${show(argIndex)}`)
)(count)


makeFunctionCall :: String -> List String -> String
makeFunctionCall = (functionName, argNames) => pipe(
  String.join(", "),
  (args) => `${functionName}(${args})`
)(argNames)


generateKnownCallCase :: Integer -> String
generateKnownCallCase = (arity) => {
  caseStart = `      case ${show(arity)}: {\n`
  fnAssignment = `        ${generateFnAssignment(arity)}\n`
  allArgs = makeIndexedArgNames(arity)
  case = `        void* args[${show(arity)}];
        int i = 0;
        for (; i < ENV_SIZE; i++) { args[i] = env[i]; }
        for (; i < ARITY; i++) { args[i] = va_arg(argv, void*); }
        result = ${makeFunctionCall("fn", allArgs)};
        break;\n`
  caseEnd = `        break;\n      }\n`

  return caseStart ++ fnAssignment ++ case ++ caseEnd
}

generateKnownCallCases :: Integer -> String
generateKnownCallCases = (maxArity) => {
  cases = pipe(
    List.range(1),
    map(generateKnownCallCase),
    List.reduce(mconcat, "")
  )(maxArity + 1)

  return `    switch (ARITY) {\n${cases}    }\n`
}


makeIndexedArgNames :: Integer -> List String
makeIndexedArgNames = (count) => pipe(
  List.range(0),
  map((index) => `args[${show(index)}]`)
)(count)


generateOverloadCase :: Integer -> String
generateOverloadCase = (argsLeft) => {
  argNames = makeIndexedArgNames(argsLeft)
  allArgs = ["result", "argsLeft", ...argNames]
  argsRead = `          void *args[${show(argsLeft)}];
          for (int i = 0; i < ${show(argsLeft)}; i++) { args[i] = va_arg(argv, void*); }\n`
  fnCall = makeFunctionCall("__applyPAP__", allArgs)


  return `        case ${show(argsLeft)}: {\n${argsRead}          result = ${fnCall};\n          break;\n        }\n`
}


generateOverloadCases :: Integer -> String
generateOverloadCases = (maxArity) => {
  cases = pipe(
    List.range(1),
    map(generateOverloadCase),
    List.reduce(mconcat, "")
  )(maxArity + 1)

  return `      switch (argsLeft) {\n${cases}      }\n`
}


generateCppFile :: Integer -> {}
generateCppFile = (maxArity) => {
  IO.put(CPP_FILE_HEADER)
  IO.put(CPP_SPECIFIC_FUNCTIONS)
  IO.put(FUNCTION_START)
  IO.put(KNOWN_CALL_START)
  IO.put(generateKnownCallCases(maxArity))
  IO.put(OVERLOAD_START)
  IO.put(generateOverloadCases(maxArity))
  IO.put(OVERLOAD_END)
  IO.put(KNOWN_CALL_END)
  IO.put(UNDERLOAD)
  IO.put(FUNCTION_END)
  IO.put(CPP_FILE_FOOTER)

  return {}
}


generatePAPTypeDefinition :: Integer -> String
generatePAPTypeDefinition = (arity) => pipe(
  makeArgNamesWithStart(0),
  map((argName) => `  void *${argName};\n`),
  List.reduce(mconcat, ""),
  (fields) => `typedef struct PAPEnv_${show(arity)} {\n${fields}} PAPEnv_${show(arity)}_t;\n\n`
)(arity)


generatePAPTypeDefinitions :: Integer -> String
generatePAPTypeDefinitions = (maxArity) => pipe(
  List.range(1),
  map(generatePAPTypeDefinition),
  List.reduce(mconcat, "")
)(maxArity + 1)


generateHppFile :: Integer -> {}
generateHppFile = (maxArity) => {
  IO.put(HPP_FILE_TOP)
  IO.put(generatePAPTypeDefinitions(maxArity + 1))
  IO.put(HPP_FILE_BOTTOM)

  return {}
}


main :: List String -> {}
main = (args) => {
  where (args) {
    [_, arityStr, "CPP"] =>
      where (scan(arityStr)) {
        Just(arity) =>
          generateCppFile(arity)
  
        Nothing =>
          IO.putLine("ARITY needs to be an integer")
      }
  
    [_, arityStr, "HPP"] =>
      where ((scan(arityStr) :: Maybe Integer)) {
        Just(arity) =>
          generateHppFile(arity)
  
        Nothing =>
          IO.putLine("ARITY needs to be an integer")
      }
  
    _ => do {
      IO.putLine("You must pass two args, the kind of file and the max arity!")
      IO.putLine("Usage:")
      IO.putLine("GenApplyPap ARITY FILE_TYPE")
      IO.putLine("ARITY - must be an integer")
      IO.putLine("FILE_TYPE - must be 'CPP' or 'HPP'")
      return {}
    }
  }
}

