import L from "List"
import type { Wish } from "Wish"
import { chainRej, mapRej, parallel, fulfill } from "Wish"
import IO from "IO"
import Http from "Http"
import { readFile, writeFile, exists } from "FileSystem"
import Dictionary from "Dictionary"
import { Just, fromMaybe } from "Maybe"
import J from "Json"
import Either from "Either"
import S from "System"
import T from "Tuple"
import { always, identity } from "Function"
import { andDo } from "Monad"
import { BinaryData, TextData } from "Data"

import type { Version } from "./Version"
import { sanitizeUrl } from "./URL"


MADLIB_NOT_FOUND = "The madlib.json file was not found, verify that you have created one or that you run the command from the right directory."
MADLIB_MODULES_PATH = "./madlib_modules/"

moveToMadlibModules :: String -> Wish S.CommandError String
moveToMadlibModules = pipe(
  (archivePath) => `mv ${archivePath} ${MADLIB_MODULES_PATH}`,
  S.exec
)

unzipPkg :: String -> Wish S.CommandError String
unzipPkg = pipe(
  (url) => `unzip -d ${MADLIB_MODULES_PATH}${url}-tmp ${MADLIB_MODULES_PATH}${url}.zip`,
  S.exec
)

renameInnerFolder :: String -> Wish S.CommandError String
renameInnerFolder = pipe(
  (url) => `mv ${MADLIB_MODULES_PATH}${url}-tmp/* ${MADLIB_MODULES_PATH}${url}-tmp/${url}`,
  S.exec
)

copyPackage :: String -> Wish S.CommandError String
copyPackage = pipe(
  (url) => `cp -R ${MADLIB_MODULES_PATH}${url}-tmp/${url} ${MADLIB_MODULES_PATH}`,
  S.exec
)

cleanUp :: String -> Wish S.CommandError String
cleanUp = pipe(
  (url) => `rm -r ${MADLIB_MODULES_PATH}${url}.zip ${MADLIB_MODULES_PATH}${url}-tmp`,
  S.exec
)


getDependencies :: String -> Wish String (Dictionary.Dictionary String String)
getDependencies = pipe(
  J.parse(J.field("dependencies", J.dict(J.string))),
  where
    is Either.Left  _: of(Dictionary.empty)
    is Either.Right a: of(a)
)

displayPackagesToInstall :: List <String, String> -> List <String, String>
displayPackagesToInstall = (pkgs) => pipe(
  map(pipe(T.fst, mappend("  - "))),
  mappend(["Packages to install:"]),
  L.unlines,
  (x) => L.len(pkgs) > 0 ? IO.log(x) : x,
  always(pkgs)
)(pkgs)

processArchive :: String -> Wish String String
processArchive = (url) => pipe(
  unzipPkg,
  andDo(renameInnerFolder(url)),
  andDo(copyPackage(url)),
  andDo(cleanUp(url)),
  mapRej(always("Error processing archive"))
)(url)

installNodeModules :: String -> String -> Wish String String
installNodeModules = (url, pkgName) => pipe(
  (u) => `${MADLIB_MODULES_PATH}${u}/`,
  (path) => exists(`${path}package.json`) |> andDo(of(path)),
  map(mappend("npm install ")),
  chain(S.exec),
  map((x) => IO.log(`nodejs modules installed for '${pkgName}'`) |> always(x)),
  chainRej((_) => of(IO.log(`No node modules to install for '${pkgName}'`)))
)(url)

initMadlibModulesFolder :: String -> a -> Wish String a
initMadlibModulesFolder = (path, a) => pipe(
  (p) => S.exec(`mkdir -p ${p}`),
  mapRej(where is S.CommandError _ msg: msg),
  andDo(of(a))
)(path)

verifyPackageAndInstallSubDeps :: String -> String -> Wish String (List String)
verifyPackageAndInstallSubDeps = (pkgName, madlibDotJsonPath) => pipe(
  exists,
  mapRej(always(`package '${pkgName}' does not have a madlib.json file and is not a valid package!`)),
  andDo(installPackages(false, madlibDotJsonPath))
)(madlibDotJsonPath)

installPackages :: Boolean -> String -> Wish String (List String)
installPackages = (firstLevel, madlibDotJsonPath) => pipe(
  readFile,
  mapRej((_) => MADLIB_NOT_FOUND),
  chain(initMadlibModulesFolder(MADLIB_MODULES_PATH)),
  chain(getDependencies),
  chain((depMap) => pipe(
    Dictionary.keys,
      map((key) => <key, sanitizeUrl(fromMaybe("", Dictionary.get(key, depMap)))>),
      (x) => firstLevel ? displayPackagesToInstall(x) : x,
      map(where is <key, sanitizedUrl>: pipe(
        Dictionary.get($, depMap),
        where is Just p : Http.get(p),
        map(where is Http.Response { data: BinaryData d }: d),
        mapRej(always("Err fetching archive")),
        map(BinaryData),
        chain(writeFile(`${MADLIB_MODULES_PATH}${sanitizedUrl}.zip`)),
        andDo(processArchive(sanitizedUrl)),
        andDo(installNodeModules(sanitizedUrl, key)),
        map(always(IO.log(`package ${key} installed`))),
        mapRej((_) => `Error installing package '${key}'`),
        andDo(verifyPackageAndInstallSubDeps(key, `${MADLIB_MODULES_PATH}${sanitizedUrl}/madlib.json`))
      )(key)),
      parallel,
      map(L.flatten)
    )(depMap)
  )
)(madlibDotJsonPath)


alias Context = List {
  packageName     :: String,
  resolvedVersion :: Version,
  minVersion      :: Version,
  maxVersion      :: Version
}

installPackagesV2 :: Context -> Boolean -> String -> Wish String (List String)
installPackagesV2 = (context, firstLevel, madlibDotJsonPath) => pipe(
  readFile,
  mapRej((_) => MADLIB_NOT_FOUND),
  chain(initMadlibModulesFolder(MADLIB_MODULES_PATH)),
  chain(getDependencies),
  chain((depMap) => pipe(
    Dictionary.keys,
      map((key) => <key, sanitizeUrl(fromMaybe("", Dictionary.get(key, depMap)))>),
      (x) => firstLevel ? displayPackagesToInstall(x) : x,
      map(where is <key, sanitizedUrl>: pipe(
        Dictionary.get($, depMap),
        where is Just p : Http.get(p),
        map(where is Http.Response { data: BinaryData d }: d),
        mapRej(always("Err fetching archive")),
        map(BinaryData),
        chain(writeFile(`${MADLIB_MODULES_PATH}${sanitizedUrl}.zip`)),
        andDo(processArchive(sanitizedUrl)),
        andDo(installNodeModules(sanitizedUrl, key)),
        map(always(IO.log(`package ${key} installed`))),
        mapRej((_) => `Error installing package '${key}'`),
        andDo(verifyPackageAndInstallSubDeps(key, `${MADLIB_MODULES_PATH}${sanitizedUrl}/madlib.json`))
      )(key)),
      parallel,
      map(L.flatten)
    )(depMap)
  )
)(madlibDotJsonPath)



IO.log("Installing dependencies ...")

pipe(
  exists,
  chain(readFile),
  fulfill(
    (_) => pipe(
      installPackages(true),
      fulfill(IO.log, identity)
    )("madlib.json"),
    (packageDotJsonContent) => pipe(
      installPackages(true),
      chain((x) => writeFile("package.json", TextData(packageDotJsonContent)) |> andDo(of(x))),
      fulfill(IO.log, identity)
    )("madlib.json")
  )
)("package.json")
