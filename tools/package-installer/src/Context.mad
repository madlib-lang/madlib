import type { Maybe } from "Maybe"
import type { Version, VersionRange } from "./Version"

import { Just, Nothing } from "Maybe"
import Dict from "Dictionary"

import { AnyVersion } from "./Version"



export alias VersionConstraint = {
  version :: Maybe Version,
  range   :: VersionRange
}

export alias Context = Dict.Dictionary String VersionConstraint


initialContext :: Context
export initialContext = Dict.empty


findByName :: String -> Context -> VersionConstraint
export findByName = (name) => pipe(
  Dict.get(name),
  where {
    Just found =>
      found

    Nothing =>
      {
        version: Nothing,
        range: AnyVersion
      }
  }
)

updateConstraint :: String -> VersionConstraint -> Context -> Context
export updateConstraint = Dict.insert


