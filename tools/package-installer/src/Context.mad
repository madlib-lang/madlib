import type { Maybe } from "Maybe"
import type { Version, VersionRange } from "./Version"

import { Just, Nothing } from "Maybe"
import Dict from "Dictionary"

import { AnyVersion } from "./Version"



export alias VersionInfo = {
  version :: Maybe Version,
  range   :: VersionRange
}

export alias Context = Dict.Dictionary String VersionInfo


initialContext :: Context
export initialContext = Dict.empty


findByName :: String -> Context -> VersionInfo
export findByName = (name) => pipe(
  Dict.get(name),
  where {
    Just(found) =>
      found

    Nothing =>
      {
        version: Nothing,
        range: AnyVersion
      }
  }
)

updateEntry :: String -> VersionInfo -> Context -> Context
export updateEntry = Dict.insert



alias ContextStore = {
  get :: String -> VersionInfo,
  update :: String -> VersionInfo -> VersionInfo
}

makeContextStore :: Context -> ContextStore
makeContextStore = (initial) => {
  context = initial
  return {
    get: (packageName) => findByName(packageName, context),
    update: (packageName, versionInfo) => {
      context = updateEntry(packageName, versionInfo, context)
      return versionInfo
    }
  }
}
