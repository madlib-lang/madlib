import type { Wish } from "Wish"
import type { SideEffect } from "SideEffect"
import type { Data } from "Data"

import { mapRej } from "Wish"
import { fromWish } from "SideEffect"
import Http from "Http"
import { writeFile, exists } from "FileSystem"
import System from "System"
import { always } from "Function"
import { andDo } from "Monad"

import type { Dependency } from "./Dependency"
import Constants from "./Constants"

export type DownloadResult
  = Downloaded(Dependency)
  | DownloadError(String)

cleanUp :: String -> Wish System.CommandError String
cleanUp = pipe(
  (url) => `rm -r ${Constants.TEMPORARY_MODULES_PATH}${url}.zip ${Constants.TEMPORARY_MODULES_PATH}${url}-tmp`,
  System.exec
)


copyPackageToTmpRoot :: String -> Wish System.CommandError String
copyPackageToTmpRoot = pipe(
  (url) => `cp -R ${Constants.TEMPORARY_MODULES_PATH}${url}-tmp/${url} ${Constants.TEMPORARY_MODULES_PATH}`,
  System.exec
)


unzipPkg :: String -> Wish System.CommandError String
unzipPkg = pipe(
  (url) => `unzip -d ${Constants.TEMPORARY_MODULES_PATH}${url}-tmp ${Constants.TEMPORARY_MODULES_PATH}${url}.zip`,
  System.exec
)


renameInnerFolder :: String -> Wish System.CommandError String
renameInnerFolder = pipe(
  (url) => `mv ${Constants.TEMPORARY_MODULES_PATH}${url}-tmp/* ${Constants.TEMPORARY_MODULES_PATH}${url}-tmp/${url}`,
  System.exec
)


extractArchive :: String -> Wish String String
extractArchive = (url) => pipe(
  unzipPkg,
  andDo(renameInnerFolder(url)),
  andDo(copyPackageToTmpRoot(url)),
  andDo(cleanUp(url)),
  mapRej(always("Error processing archive"))
)(url)


getPackageData :: String -> Wish String Data
getPackageData = pipe(
  Http.get,
  map(where { Http.Response({ data }) => data }),
  mapRej(always("Could not download package"))
)


downloadPackage :: Dependency -> SideEffect DownloadResult
downloadPackage = (dependency) => pipe(
  .url,
  getPackageData,
  chain(writeFile(`${Constants.TEMPORARY_MODULES_PATH}${dependency.sanitizedUrl}.zip`)),
  andDo(extractArchive(dependency.sanitizedUrl)),
  andDo(of(Downloaded(dependency))),
  fromWish(always(DownloadError(`Package from '${dependency.url}' failed to be downloaded`)))
)(dependency)


downloadIfNotCached :: Dependency -> SideEffect DownloadResult
export downloadIfNotCached = (dependency) => pipe(
  (dep) => exists(`${Constants.TEMPORARY_MODULES_PATH}${dep.sanitizedUrl}`),
  map(always(true)),
  fromWish(always(false)),
  chain(
    (alreadyDownloaded) => alreadyDownloaded
      ? of(Downloaded(dependency))
      : downloadPackage(dependency)
  )
)(dependency)
