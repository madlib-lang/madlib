import type { Wish } from "Wish"

import { bad, discardError, mapRej } from "Wish"
import { always } from "Function"
import { andDo } from "Monad"
import { getHeader, Header } from "Http"

import type { Dependency } from "./Dependency"
import type { Config } from "./Config"

import Constants from "./Constants"


export type DownloadFailure = DownloadFailure

export type DownloadResult
  = Downloaded(Dependency)
  | DownloadError(String)



cleanUp :: Config -> String -> Wish DownloadFailure String
cleanUp = (config, sanitizedUrl) => pipe(
  (url) => `rm -r ${Constants.TEMPORARY_MODULES_PATH}${url}.zip ${Constants.TEMPORARY_MODULES_PATH}${url}-tmp`,
  config.exec,
  map(.stdout),
  mapRej(always(DownloadFailure))
)(sanitizedUrl)


copyPackageToTmpRoot :: Config -> String -> Wish DownloadFailure String
copyPackageToTmpRoot = (config, sanitizedUrl) => pipe(
  (url) => `cp -R ${Constants.TEMPORARY_MODULES_PATH}${url}-tmp/${url} ${Constants.TEMPORARY_MODULES_PATH}`,
  config.exec,
  map(.stdout),
  mapRej(always(DownloadFailure))
)(sanitizedUrl)


unzipPkg :: Config -> String -> Wish DownloadFailure String
unzipPkg = (config, sanitizedUrl) => pipe(
  (url) => `unzip -o -d ${Constants.TEMPORARY_MODULES_PATH}${url}-tmp ${Constants.TEMPORARY_MODULES_PATH}${url}.zip`,
  config.exec,
  map(.stdout),
  mapRej(always(DownloadFailure))
)(sanitizedUrl)


renameInnerFolder :: Config -> String -> Wish DownloadFailure String
renameInnerFolder = (config, sanitizedUrl) => pipe(
  (url) => `mv ${Constants.TEMPORARY_MODULES_PATH}${url}-tmp/* ${Constants.TEMPORARY_MODULES_PATH}${url}-tmp/${url}`,
  config.exec,
  map(.stdout),
  mapRej(always(DownloadFailure))
)(sanitizedUrl)


extractArchive :: Config -> String -> Wish DownloadFailure String
extractArchive = (config, sanitizedUrl) => pipe(
  unzipPkg(config),
  andDo(renameInnerFolder(config, sanitizedUrl)),
  andDo(copyPackageToTmpRoot(config, sanitizedUrl)),
  andDo(cleanUp(config, sanitizedUrl))
)(sanitizedUrl)


getPackageData :: Config -> String -> Wish DownloadFailure ByteArray
getPackageData = (config, url) => pipe(
  config.getBytes,
  mapRej(always(DownloadFailure)),
  chain((response) => where(response) {
    { status: 302 } =>
      pipe(
        getHeader("Location"),
        where {
          [Header(_, redirectUrl) , ..._] =>
            getPackageData(config, redirectUrl)

          _ =>
            bad(DownloadFailure)
        }
      )(response)

    r =>
      of(r.body)
  }),
  mapRej(always(DownloadFailure))
)(url)


saveArchive :: Config -> Dependency -> ByteArray -> Wish DownloadFailure {}
saveArchive = (config, dependency, data) => pipe(
  config.writeBytes(`${Constants.TEMPORARY_MODULES_PATH}${dependency.sanitizedUrl}.zip`),
  mapRej(always(DownloadFailure))
)(data)


downloadPackage :: Config -> Dependency -> Wish {} DownloadResult
downloadPackage = (config, dependency) => pipe(
  .url,
  getPackageData(config),
  chain(saveArchive(config, dependency)),
  andDo(extractArchive(config, dependency.sanitizedUrl)),
  andDo(of(Downloaded(dependency))),
  discardError(always(DownloadError(`Package from '${dependency.url}' failed to be downloaded`)))
)(dependency)


downloadIfNotCached :: Config -> Dependency -> Wish {} DownloadResult
export downloadIfNotCached = (config, dependency) => pipe(
  (dep) => config.exists(`${Constants.TEMPORARY_MODULES_PATH}${dep.sanitizedUrl}`),
  map(always(true)),
  discardError(always(false)),
  chain(
    (alreadyDownloaded) => alreadyDownloaded
      ? of(Downloaded(dependency))
      : downloadPackage(config, dependency)
  )
)(dependency)
