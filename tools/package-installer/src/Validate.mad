import type { Maybe } from "Maybe"
import { equals, ifElse, not, always } from "Function"
import { Just, Nothing } from "Maybe"
import { append } from "List"

import type { Context, VersionInfo } from "./Context"
import type { Dependency } from "./Dependency"
import type { MadlibDotJson } from "./MadlibDotJson"
import type { VersionDotLock } from "./VersionDotLock"
import type { VersionRange } from "./Version"
import { findByName, updateEntry } from "./Context"
import { intersectRanges, isInRange } from "./Version"


export alias ValidationInput = {
  madlibDotJson :: MadlibDotJson,
  versionDotLock :: Maybe VersionDotLock,
  computedBuildHash :: String,
  computedVersionHash :: String
}

export alias ValidationOutput = {
  context :: Context,
  shouldCopy :: Boolean,
  dependency :: Dependency,
  madlibDotJson :: MadlibDotJson
}

export type Warning
  = OutOfRangeVersion
  | InvalidVersionHash
  | InvalidBuildHash(String)
  | CopyToMadlibModulesFailed(String)
// = OutOfRangeVersion(String, VersionInfo, VersionRange)

export type Validation a
  = Validated(a)
  | NotGood(List Warning, a)


alias RangeOutput = {
  versionInfo :: VersionInfo,
  shouldCopy :: Boolean
}


combineResults :: Validation a -> Validation b -> Validation b
combineResults = (a, b) => where(<a, b>) {
  <Validated(_), _> =>
    b

  <NotGood(warnings, _), Validated(x)> =>
    NotGood(warnings, x)

  <NotGood(warningsA, _), NotGood(warningsB, x)> =>
    NotGood(mappend(warningsA, warningsB), x)
}


addWarning :: Warning -> Validation a -> Validation a
export addWarning = (warning, validationResult) => where(validationResult) {
  Validated(a) =>
    NotGood([warning], a)

  NotGood(warnings, a) =>
    NotGood(append(warning, warnings), a)
}


setValidationResultValue :: b -> Validation a -> Validation b
setValidationResultValue = (value) => where {
  Validated(_) =>
    Validated(value)

  NotGood(warnings, _) =>
    NotGood(warnings, value)
}


getValidationValue :: Validation a -> a
export getValidationValue = where {
  Validated(a) => a
  NotGood(_, a) => a
}


buildGoodRangeResult :: MadlibDotJson -> VersionInfo -> VersionRange -> Validation RangeOutput
buildGoodRangeResult = (madlibDotJson, versionInfo, versionRange) => Validated({
  versionInfo: { version: Just(madlibDotJson.version), range: versionRange },
  shouldCopy: Just(madlibDotJson.version) != versionInfo.version
})


buildBadRangeResult :: MadlibDotJson -> VersionInfo -> VersionRange -> Validation RangeOutput
buildBadRangeResult = (madlibDotJson, versionInfo, versionRange) => NotGood(
  [OutOfRangeVersion],
  {
    versionInfo: {
      version: versionInfo.version == Nothing
        ? Just(madlibDotJson.version)
        : versionInfo.version,
      range: versionRange
    },
    shouldCopy: versionInfo.version == Nothing,
  }
)


buildValidationOutput :: Context -> MadlibDotJson -> Dependency -> Validation RangeOutput -> Validation ValidationOutput
buildValidationOutput = (context, madlibDotJson, dependency, rangeResult) => {
  rangeOutput = getValidationValue(rangeResult)

  validationOutput = {
    context: updateEntry(
      madlibDotJson.name,
      rangeOutput.versionInfo,
      context
    ),
    shouldCopy: rangeOutput.shouldCopy,
    dependency: { ...dependency, name: Just(madlibDotJson.name) },
    madlibDotJson
  }

  return where(rangeResult) {
    Validated(_) => Validated(validationOutput)
    NotGood(warnings, _) => NotGood(warnings, validationOutput)
  }
}


validateVersion :: Context -> Dependency -> ValidationInput -> Validation ValidationOutput
validateVersion = (context, dependency, validationInput) => {
  madlibDotJson = validationInput.madlibDotJson
  versionInfo = findByName(madlibDotJson.name, context)

  return pipe(
    intersectRanges(dependency.versionRange),
    ifElse(
      isInRange(madlibDotJson.version),
      buildGoodRangeResult(madlibDotJson, versionInfo),
      buildBadRangeResult(madlibDotJson, versionInfo)
    ),
    buildValidationOutput(context, madlibDotJson, dependency)
  )(versionInfo.range)
}


validateHashes :: ValidationInput -> Validation ValidationInput
validateHashes = (validationInput) => {
  validatedBuildHash = where(validationInput.versionDotLock) {
    Just(versionDotLock) =>
      ifElse(
        pipe(equals(validationInput.computedBuildHash), not),
        always(NotGood([InvalidBuildHash(validationInput.madlibDotJson.name)], ())),
        always(Validated(())),
        versionDotLock.buildHash
      )

    Nothing =>
      Validated(())
  }

  validatedVersionHash = where(validationInput.versionDotLock) {
    Just(versionDotLock) =>
      ifElse(
        pipe(equals(validationInput.computedVersionHash), not),
        always(NotGood([InvalidVersionHash], ())),
        always(Validated(())),
        versionDotLock.versionHash
      )

    Nothing =>
      Validated(())
  }

  return setValidationResultValue(
    validationInput,
    combineResults(validatedBuildHash, validatedVersionHash)
  )
}

validate :: Context -> Dependency -> Maybe ValidationInput -> Validation ValidationOutput
export validate = (context, dependency, validationInput) => where(validationInput) {
  Just(vi) =>
    _validate(context, dependency, vi)
  
  // Nothing =>
    
}

_validate :: Context -> Dependency -> ValidationInput -> Validation ValidationOutput
_validate = (context, dependency, validationInput) => {
  validatedHashes = validateHashes(validationInput)
  validatedVersion = validateVersion(context, dependency, validationInput)

  return combineResults(validatedHashes, validatedVersion)
}
