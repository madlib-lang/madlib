import type { Wish } from "Wish"
import type { Maybe } from "Maybe"
import List from "List"
import String from "String"
import { bad, bichain, chainRej, discardError, mapRej, parallel } from "Wish"
import IO from "IO"
import { Just, Nothing, fromMaybe } from "Maybe"
import Process from "Process"
import Tuple from "Tuple"
import { always, identity, ifElse, not } from "Function"
import { andDo } from "Monad"
import { gt } from "Compare"
import { liftA3 } from "Applicative"
import Dictionary from "Dictionary"
import type { Context } from "./Context"
import type { Dependency } from "./Dependency"
import type { MadlibDotJson } from "./MadlibDotJson"
import type { VersionDotLock } from "./VersionDotLock"
import type { Validate, ValidationInput, ValidationOutput } from "./Validate"
import type { Config } from "./Config"
import { addInstalledPackage, hasPackageBeenInstalled, initialContext } from "./Context"
import MadlibDotJson from "./MadlibDotJson"
import VersionDotLock from "./VersionDotLock"
import {
  BuildHashCouldNotBeGenerated,
  CopyToMadlibModulesFailed,
  MadlibDotJsonCouldNotBeLoaded,
  NotValid,
  Valid,
  ValidationError,
  VersionDotLockMissing,
  failWithRecoverable,
  printError,
  printWarning,
  unsafeGetValidationValue,
  validate
} from "./Validate"
import Constants from "./Constants"
import { DownloadError, Downloaded, downloadIfNotCached } from "./Download"
import { hashVersion } from "./Hash"
import Color from "./Color"



copyPackageToMadlibModules :: Config -> Dependency -> Wish Process.CommandResult Process.CommandResult
copyPackageToMadlibModules = (config, dependency) => pipe(
  (d) => ({
    destination: `${Constants.MADLIB_MODULES_PATH}${fromMaybe("", d.name)}`,
    source: `${Constants.TEMPORARY_MODULES_PATH}${d.sanitizedUrl}/`,
  }),
  (paths) => config.exec(
    "cp",
    ["-R", paths.source, paths.destination,],
    Process.DEFAULT_COMMAND_OPTIONS
  )
)(dependency)


installNodeModules :: Config -> String -> Wish {} String
installNodeModules = (config, pkgName) => pipe(
  (name) => `${Constants.MADLIB_MODULES_PATH}${name}/`,
  (path) => config.exists(`${path}package.json`) |> andDo(of(path)),
  mapRej(always("")),
  map((path) => ["install", path,]),
  chain(
    pipe(
      config.exec("npm", $, Process.DEFAULT_COMMAND_OPTIONS),
      mapRej(.stderr)
    )
  ),
  map(.stdout),
  map(IO.putLineAndPass(`nodejs modules installed for '${pkgName}'`)),
  discardError(IO.putLineAndPass(`No node modules to install for '${pkgName}'`))
)(pkgName)


initMadlibModulesFolder :: Config -> String -> a -> Wish String a
initMadlibModulesFolder = (config, path, a) => pipe(
  (p) => config.exec("mkdir", ["-p", p,], Process.DEFAULT_COMMAND_OPTIONS),
  mapRej(.stderr),
  andDo(of(a))
)(path)


projectBaseUrl :: Dependency -> String
projectBaseUrl = (dependency) => `${Constants.TEMPORARY_MODULES_PATH}${dependency.sanitizedUrl}`


readMadlibDotJson :: Config -> Dependency -> Wish {} (Validate MadlibDotJson)
readMadlibDotJson = (config, dependency) => pipe(
  MadlibDotJson.load(config),
  map(Valid),
  discardError(
    pipe(
      MadlibDotJsonCouldNotBeLoaded,
      ValidationError([], $, Nothing)
    )
  )
)(`${projectBaseUrl(dependency)}/madlib.json`)


readVersionDotLock :: Config -> Dependency -> Wish {} (Validate (Maybe VersionDotLock))
readVersionDotLock = (config, dependency) => pipe(
  (d) => VersionDotLock.load(config, `${projectBaseUrl(d)}/version.lock`),
  map(
    pipe(
      Just,
      Valid
    )
  ),
  discardError(always(NotValid([VersionDotLockMissing,], Nothing)))
)(dependency)


computeBuildHash :: Config -> Dependency -> Wish {} (Validate String)
computeBuildHash = (config, dependency) => pipe(
  (d) => config.exec(
    "madlib",
    ["package", "generate-hash", "-i", projectBaseUrl(d),],
    Process.DEFAULT_COMMAND_OPTIONS
  ),
  map(.stdout),
  map(Valid),
  discardError(always(NotValid([BuildHashCouldNotBeGenerated,], "")))
)(dependency)


prepareValidationInput :: Config -> Dependency -> Wish {} (Validate ValidationInput)
prepareValidationInput = (config, dependency) => pipe(
  readVersionDotLock(config),
  map(
    liftA3(
      (versionDotLock, computedBuildHash, madlibDotJson) => ({
        madlibDotJson,
        versionDotLock,
        computedVersionHash: hashVersion(madlibDotJson.version),
        computedBuildHash,
      })
    )
  ),
  ap($, computeBuildHash(config, dependency)),
  ap($, readMadlibDotJson(config, dependency))
)(dependency)


formatCopyError :: String -> String
formatCopyError = (err) => pipe(
  String.lines,
  ifElse(
    pipe(
      List.length,
      gt($, 5)
    ),
    pipe(
      List.slice(0, 5),
      mconcat($, ["...",])
    ),
    identity
  ),
  map((line) => `    ${line}`),
  String.unlines
)(err)

copyPackageFromTmp :: Config -> Validate ValidationOutput -> Wish {} (Validate ValidationOutput)
copyPackageFromTmp = (config, validationResult) => where (validationResult) {
  ValidationError(_, _, _) =>
    of(validationResult)

  _ =>
    pipe(
      unsafeGetValidationValue,
      ifElse(
        .shouldCopy,
        pipe(
          .dependency,
          copyPackageToMadlibModules(config),
          andDo(of(validationResult))
        ),
        always(of(validationResult))
      ),
      discardError(
        (commandError) => pipe(
          unsafeGetValidationValue,
          .madlibDotJson,
          .name,
          (n) => failWithRecoverable(
            CopyToMadlibModulesFailed(
              `Failed to copy '${n}'\n${formatCopyError(commandError.stderr)}`
            ),
            validationResult
          )
        )(validationResult)
      )
    )(validationResult)
}


displayInstalling :: Validate ValidationOutput -> Validate ValidationOutput
displayInstalling = (validation) => {
  validationOutput = unsafeGetValidationValue(validation)
  name = validationOutput.madlibDotJson.name
  version = show(validationOutput.madlibDotJson.version)

  IO.putLine(`Installing ${name} version ${version}`)

  return validation
}


displayResult :: Validate ValidationOutput -> Validate ValidationOutput
displayResult = (validation) => where (validation) {
  Valid(a) =>
    pipe(
      displayInstalling,
      IO.putLineAndPass(`  - ${Color.green("installed!")}`)
    )(validation)

  NotValid(warnings, a) =>
    pipe(
      displayInstalling,
      List.reduce(printWarning, $, warnings),
      IO.putLineAndPass(`  - ${Color.green("installed!")}`)
    )(validation)

  ValidationError(warnings, err, maybeA) =>
    pipe(
      where {
        Just(a) =>
          displayInstalling(of(a))

        Nothing =>
          validation
      },
      always(err),
      List.reduce(printWarning, $, warnings),
      printError(validation)
    )(maybeA)
}


tryRecovery :: Validate a -> Validate a
tryRecovery = (validation) => where (validation) {
  ValidationError(_, _, Just(a)) =>
    pure(a)

  _ =>
    validation
}


runPostInstallHook :: Boolean -> MadlibDotJson -> a -> Wish {} a
runPostInstallHook = (isMainPackage, madlibDotJson, passThrough) => pipe(
  .hooks,
  chain(Dictionary.get("postInstall")),
  where {
    Just(script) =>
      do {
        cwd = isMainPackage ? "./" : `madlib_modules/${madlibDotJson.name}`
        IO.putLine(
          `Executing postInstall script for package '${madlibDotJson.name}', it may take a while.`
        )
        _ <- Process.exec("sh", ["-c", script,], { ...Process.DEFAULT_COMMAND_OPTIONS, cwd, })
        IO.putLine(`postInstall script executed for package '${madlibDotJson.name}'`)
        return of({})
      }

    _ =>
      of({})
  },
  mapRej(
    (result) => {
      IO.putLine(result.stdout)
      IO.putLine(result.stderr)
      return {}
    }
  ),
  andDo(of(passThrough))
)(madlibDotJson)


postProcess :: #[Context, List Dependency] -> Dependency -> Validate ValidationOutput -> Wish {} #[Context, List Dependency]
postProcess = (previousContextAndDeps, processedDependency, validation) => where (validation) {
  ValidationError(_, _, _) =>
    of(previousContextAndDeps)

  v =>
    do {
      result = unsafeGetValidationValue(v)
      return pipe(
        (validationResult) => ({
          ...validationResult,
          context: addInstalledPackage(processedDependency.sanitizedUrl, validationResult.context),
        }),
        (validationResult) => validationResult.shouldCopy
          ? #[
            validationResult.context,
            mconcat(
              Tuple.snd(previousContextAndDeps),
              fromMaybe([], validationResult.madlibDotJson.dependencies)
            )
          ]
          : #[validationResult.context, Tuple.snd(previousContextAndDeps)],
        runPostInstallHook(false, result.madlibDotJson)
      )(result)
    }
}


processDependency :: Config -> #[Context, List Dependency] -> Dependency -> Wish {} #[Context, List Dependency]
processDependency = (config, contextAndNextDeps, dependency) => pipe(
  prepareValidationInput(config),
  map(chain(validate(Tuple.fst(contextAndNextDeps), dependency))),
  chain(copyPackageFromTmp(config)),
  map(
    pipe(
      displayResult,
      tryRecovery,
    )
  ),
  chain(postProcess(contextAndNextDeps, dependency)),
  map(IO.newLine)
)(dependency)


filterAlreadyInstalledDependencies :: Context -> List Dependency -> List Dependency
filterAlreadyInstalledDependencies = (context, dependencies) => List.filter(
  pipe(
    .sanitizedUrl,
    hasPackageBeenInstalled($, context),
    not
  )
)(dependencies)


processDependencies :: Config -> Context -> List Dependency -> Wish {} #[Context, List Dependency]
processDependencies = (config, context, dependencies) => pipe(
  filterAlreadyInstalledDependencies(context),
  pipe(
    map(downloadIfNotCached(config)),
    parallel
  ),
  map(
    pipe(
      List.mapMaybe(
        where {
          DownloadError(err) =>
            IO.putLineAndPass(Color.red(`${err}\n`), Nothing)

          Downloaded(a) =>
            Just(a)
        }
      )
    )
  ),
  chain(List.reduceM(processDependency(config), #[context, []])),
  chain(
    where {
      #[_context, [,]] =>
        of(#[_context, []])

      #[_context, nextDependencies] =>
        processDependencies(config, _context, nextDependencies)
    }
  )
)(dependencies)


installedDependencyFolders :: Config -> Wish {} (List String)
installedDependencyFolders = (config) => pipe(
  config.readDir,
  discardError(always([]))
)(Constants.MADLIB_MODULES_PATH)


installPackages :: Config -> Context -> String -> Wish {} (List String)
installPackages = (config, context, madlibDotJsonPath) => pipe(
  config.readFile,
  mapRej(always(Constants.MADLIB_NOT_FOUND)),
  chain(initMadlibModulesFolder(config, Constants.MADLIB_MODULES_PATH)),
  discardError(identity),
  chain(
    pipe(
      MadlibDotJson.parse,
      bichain(
        pipe(
          IO.putLine,
          always(of([]))
        ),
        (madlibDotJson) => pipe(
          .dependencies,
          fromMaybe([]),
          processDependencies(config, context),
          andDo(installedDependencyFolders(config)),
          chain(
            pipe(
              map(installNodeModules(config)),
              parallel
            )
          ),
          chain(runPostInstallHook(true, madlibDotJson))
        )(madlibDotJson)
      )
    )
  )
)(madlibDotJsonPath)







/**
 * prepare runs before everything and takes care of creating a temporary folder
 * as well as reading and saving the content of the package.json file in-memory
 * in order to restore it at it end
 */
prepare :: Config -> String -> Wish String String
prepare = (config, packageDotJsonPath) => pipe(
  always(
    config.exec("mkdir", ["-p", Constants.TEMPORARY_MODULES_PATH,], Process.DEFAULT_COMMAND_OPTIONS)
  ),
  andDo(of(packageDotJsonPath)),
  mapRej(.stderr),
  chain(
    pipe(
      config.exists,
      mapRej(always("")),
      map(always(packageDotJsonPath))
    )
  ),
  chain(
    (path) => pipe(
      config.exec($, ["i",], Process.DEFAULT_COMMAND_OPTIONS),
      mapRej(.stderr),
      andDo(of(path))
    )("npm")
  ),
  chain(
    pipe(
      config.readFile,
      mapRej(always(""))
    )
  )
)(packageDotJsonPath)


restorePackageDotJson :: Config -> String -> Wish {} {}
restorePackageDotJson = (config, content) => pipe(
  config.writeFile("package.json"),
  mapRej(always({}))
)(content)


run :: Config -> Wish {} {}
export run = (config) => {
  IO.putLine("Installing dependencies ...")

  return pipe(
    prepare(config),
    bichain(
      pipe(
        always("madlib.json"),
        installPackages(config, initialContext),
        mapRej(IO.trace("it failed!"))
      ),
      (packageDotJsonContent) => pipe(
        installPackages(config, initialContext),
        chain((x) => restorePackageDotJson(config, packageDotJsonContent) |> andDo(of(x))),
        chainRej((x) => restorePackageDotJson(config, packageDotJsonContent) |> andDo(bad(x)))
      )("madlib.json")
    ),
    andDo(of({}))
  )("package.json")
}
