import type { Wish } from "Wish"
import type { SideEffect } from "SideEffect"
import type { Maybe } from "Maybe"

import List from "List"
import String from "String"
import { bad, bichain, chainRej, mapRej } from "Wish"
import { parallel, fromWish, toWish } from "SideEffect"
import IO from "IO"
import Json from "JsonParser"
import Either from "Either"
import { Just, Nothing, fromMaybe } from "Maybe"
import Process from "Process"
import Tuple from "Tuple"
import { always, identity, ifElse, not } from "Function"
import { andDo } from "Monad"
import { gt } from "Compare"
import { liftA3 } from "Applicative"


import type { Context } from "./Context"
import type { Dependency } from "./Dependency"
import type { MadlibDotJson } from "./MadlibDotJson"
import type { VersionDotLock } from "./VersionDotLock"
import type { ValidationInput, ValidationOutput, Validate } from "./Validate"
import type { Config } from "./Config"

import { addInstalledPackage, hasPackageBeenInstalled, initialContext } from "./Context"
import { dependencyParser } from "./Dependency"
import MadlibDotJson from "./MadlibDotJson"
import VersionDotLock from "./VersionDotLock"
import {
  failWithRecoverable,
  validate,
  unsafeGetValidationValue,
  Valid,
  NotValid,
  ValidationError,
  printWarning,
  BuildHashCouldNotBeGenerated,
  VersionDotLockMissing,
  printError,
  CopyToMadlibModulesFailed,
  MadlibDotJsonCouldNotBeLoaded
} from "./Validate"
import Constants from "./Constants"
import { downloadIfNotCached, Downloaded, DownloadError } from "./Download"
import { hashVersion } from "./Hash"



copyPackageToMadlibModules :: Config -> Dependency -> Wish Process.CommandError String
copyPackageToMadlibModules = (config, dependency) => pipe(
  (d) => ({
    destination: `${Constants.MADLIB_MODULES_PATH}${fromMaybe("", d.name)}`,
    source: `${Constants.TEMPORARY_MODULES_PATH}${d.sanitizedUrl}/`
  }),
  (paths) => `cp -R ${paths.source} ${paths.destination}`,
  config.exec
)(dependency)


getDependencies :: String -> SideEffect (Either.Either String (List Dependency))
getDependencies = pipe(
  Json.parse(dependencyParser),
  where {
    Either.Left(e) =>
      of(
        Either.Left(
          IO.red(
            `The 'madlib.json' file from your project could not be loaded. It is either malformed or inexistant.\nHere is the error I found: '${e}'.`
          )
        )
      )

    Either.Right(a) =>
      of(of(a))
  }
)


installNodeModules :: Config -> String -> SideEffect String
installNodeModules = (config, pkgName) => pipe(
  (name) => `${Constants.MADLIB_MODULES_PATH}${name}/`,
  (path) => config.exists(`${path}package.json`) |> andDo(of(path)),
  mapRej(always("")),
  map(mconcat("npm install ")),
  chain(pipe(config.exec, mapRej(Process.getCommandErrorMessage))),
  map((x) => IO.putLineAndPass(`nodejs modules installed for '${pkgName}'`, x)),
  fromWish((x) => IO.putLineAndPass(`No node modules to install for '${pkgName}'`, x))
)(pkgName)


initMadlibModulesFolder :: Config -> String -> a -> Wish String a
initMadlibModulesFolder = (config, path, a) => pipe(
  (p) => config.exec(`mkdir -p ${p}`),
  mapRej(where { Process.CommandError(_, msg) => msg }),
  andDo(of(a))
)(path)


projectBaseUrl :: Dependency -> String
projectBaseUrl = (dependency) =>
  `${Constants.TEMPORARY_MODULES_PATH}${dependency.sanitizedUrl}`


readMadlibDotJson :: Config -> Dependency -> SideEffect (Validate MadlibDotJson)
readMadlibDotJson = (config, dependency) => pipe(
  MadlibDotJson.load(config),
  map(Valid),
  fromWish(pipe(MadlibDotJsonCouldNotBeLoaded, ValidationError([], $, Nothing)))
)(`${projectBaseUrl(dependency)}/madlib.json`)


readVersionDotLock :: Config -> Dependency -> SideEffect (Validate (Maybe VersionDotLock))
readVersionDotLock = (config, dependency) => pipe(
  (d) => VersionDotLock.load(config, `${projectBaseUrl(d)}/version.lock`),
  map(pipe(Just, Valid)),
  fromWish(always(NotValid([VersionDotLockMissing], Nothing)))
)(dependency)


computeBuildHash :: Config -> Dependency -> SideEffect (Validate String)
computeBuildHash = (config, dependency) => pipe(
  (d) => config.exec(
    `madlib package generate-hash -i ${projectBaseUrl(d)}`
  ),
  map(Valid),
  fromWish(always(NotValid([BuildHashCouldNotBeGenerated], "")))
)(dependency)


prepareValidationInput :: Config -> Dependency -> SideEffect (Validate ValidationInput)
prepareValidationInput = (config, dependency) => pipe(
  readVersionDotLock(config),
  map(
    liftA3((versionDotLock, computedBuildHash, madlibDotJson) => ({
      madlibDotJson,
      versionDotLock,
      computedVersionHash: hashVersion(madlibDotJson.version),
      computedBuildHash
    }))
  ),
  ap($, computeBuildHash(config, dependency)),
  ap($, readMadlibDotJson(config, dependency))
)(dependency)


formatCopyError :: String -> String
formatCopyError = (err) => pipe(
  String.lines,
  ifElse(
    pipe(List.length, gt($, 5)),
    pipe(List.slice(0, 5), mconcat($, ["..."])),
    identity
  ),
  map((line) => `    ${line}`),
  String.unlines
)(err)

copyPackageFromTmp :: Config -> Validate ValidationOutput -> SideEffect (Validate ValidationOutput)
copyPackageFromTmp = (config, validationResult) => where(validationResult) {
  ValidationError(_, _, _) =>
    of(validationResult)

  _ =>
    pipe(
      unsafeGetValidationValue,
      ifElse(
        .shouldCopy,
        pipe(
          .dependency,
          copyPackageToMadlibModules(config),
          andDo(of(validationResult))
        ),
        always(of(validationResult))
      ),
      fromWish((commandError) => pipe(
        unsafeGetValidationValue,
        .madlibDotJson,
        .name,
        (n) => failWithRecoverable(
          CopyToMadlibModulesFailed(
            `Failed to copy '${n}'\n${formatCopyError(Process.getCommandErrorMessage(commandError))}`
          ),
          validationResult
        )
      )(validationResult))
    )(validationResult)
}


displayInstalling :: Validate ValidationOutput -> Validate ValidationOutput
displayInstalling = (validation) => {
  validationOutput = unsafeGetValidationValue(validation)
  name = validationOutput.madlibDotJson.name
  version = show(validationOutput.madlibDotJson.version)

  IO.putLine(`Installing ${name} version ${version}`)

  return validation
}


displayResult :: Validate ValidationOutput -> Validate ValidationOutput
displayResult = (validation) => where(validation) {
  Valid(a) =>
    pipe(
      displayInstalling,
      IO.putLineAndPass(`  - ${IO.green("installed!")}`)
    )(validation)

  NotValid(warnings, a) =>
    pipe(
      displayInstalling,
      List.reduce(printWarning, $, warnings),
      IO.putLineAndPass(`  - ${IO.green("installed!")}`)
    )(validation)

  ValidationError(warnings, err, maybeA) =>
    pipe(
      where {
        Just(a) =>
          displayInstalling(of(a))

        Nothing => validation
      },
      always(err),
      List.reduce(printWarning, $, warnings),
      printError(validation)
    )(maybeA)
}


tryRecovery :: Validate a -> Validate a
tryRecovery = (validation) => where(validation) {
  ValidationError(_, _, Just(a)) =>
    pure(a)

  _ =>
    validation
}


postProcess :: #[Context, List Dependency] -> Dependency -> Validate ValidationOutput -> #[Context, List Dependency]
postProcess = (previousContextAndDeps, processedDependency, validation) => where(validation) {
  ValidationError(_, _, _) =>
    previousContextAndDeps

  v =>
    pipe(
      unsafeGetValidationValue,
      (validationResult) => ({
        ...validationResult,
        context: addInstalledPackage(processedDependency.sanitizedUrl, validationResult.context)
      }),
      (validationResult) => validationResult.shouldCopy
        ? #[
            validationResult.context,
            mconcat(
              Tuple.snd(previousContextAndDeps),
              fromMaybe([], validationResult.madlibDotJson.dependencies)
            )
          ]
        : #[validationResult.context, Tuple.snd(previousContextAndDeps)]
    )(v)
}


processDependency :: Config -> #[Context, List Dependency] -> Dependency -> SideEffect #[Context, List Dependency]
processDependency = (config, contextAndNextDeps, dependency) => pipe(
  prepareValidationInput(config),
  map(chain(validate(Tuple.fst(contextAndNextDeps), dependency))),
  chain(copyPackageFromTmp(config)),
  map(
    pipe(
      displayResult,
      tryRecovery,
      postProcess(contextAndNextDeps, dependency),
      IO.newLine
    )
  )
)(dependency)


filterAlreadyInstalledDependencies :: Context -> List Dependency -> List Dependency
filterAlreadyInstalledDependencies = (context, dependencies) => List.filter(
  pipe(
    .sanitizedUrl,
    hasPackageBeenInstalled($, context),
    not
  )
)(dependencies)


processDependencies :: Config -> Context -> List Dependency -> SideEffect #[Context, List Dependency]
processDependencies = (config, context, dependencies) => pipe(
  filterAlreadyInstalledDependencies(context),
  pipe(
    map(downloadIfNotCached(config)),
    parallel
  ),
  map(
    pipe(
      List.filter(where {
        DownloadError(err) => IO.putLineAndPass(IO.red(`${err}\n`), false)

        Downloaded(_) => true
      }),
      map(where {
        Downloaded(a) => a
      })
    )
  ),
  chain(List.reduceM(processDependency(config), #[context, []])),
  chain(
    where {
      #[_context, []] =>
        of(#[_context, []])

      #[_context, nextDependencies] =>
        processDependencies(config, _context, nextDependencies)
    }
  )
)(dependencies)


installedDependencyFolders :: Config -> SideEffect (List String)
installedDependencyFolders = (config) => pipe(
  config.readDir,
  fromWish(always([]))
)(Constants.MADLIB_MODULES_PATH)


installPackages :: Config -> Context -> String -> SideEffect (List String)
installPackages = (config, context, madlibDotJsonPath) => pipe(
  config.readFile,
  mapRej(always(Constants.MADLIB_NOT_FOUND)),
  chain(initMadlibModulesFolder(config, Constants.MADLIB_MODULES_PATH)),
  fromWish(identity),
  chain(pipe(
    getDependencies,
    chain(
      where {
        Either.Right(dependencies) => pipe(
          processDependencies(config, context),
          andDo(installedDependencyFolders(config)),
          chain(pipe(map(installNodeModules(config)), parallel))
        )(dependencies)

        Either.Left(e) => pipe(
          IO.putLine,
          always(of([]))
        )(e)
      }
    )
  ))
)(madlibDotJsonPath)


/**
 * prepare runs before everything and takes care of creating a temporary folder
 * as well as reading and saving the content of the package.json file in-memory
 * in order to restore it at it end
 */
prepare :: Config -> String -> Wish String String
prepare = (config, packageDotJsonPath) => pipe(
  always(config.exec(`mkdir -p ${Constants.TEMPORARY_MODULES_PATH}`)),
  andDo(of(packageDotJsonPath)),
  mapRej(Process.getCommandErrorMessage),
  chain(pipe(config.exists, mapRej(always("")))),
  chain((path) => pipe(
    config.exec,
    mapRej(Process.getCommandErrorMessage),
    andDo(of(path))
  )("npm i")),
  chain(pipe(config.readFile, mapRej(always(""))))
)(packageDotJsonPath)


restorePackageDotJson :: Config -> String -> Wish {} {}
restorePackageDotJson = (config, content) => pipe(
  config.writeFile("package.json"),
  mapRej(always({}))
)(content)


run :: Config -> Wish {} {}
export run = (config) => {
  IO.putLine("Installing dependencies ...")

  return pipe(
    prepare(config),
    bichain(
      pipe(always("madlib.json"), installPackages(config, initialContext), toWish),
      (packageDotJsonContent) => pipe(
        installPackages(config, initialContext),
        toWish,
        chain((x) => restorePackageDotJson(config, packageDotJsonContent) |> andDo(of(x))),
        chainRej((x) => restorePackageDotJson(config, packageDotJsonContent) |> andDo(bad(x)))
      )("madlib.json")
    ),
    andDo(of({}))
  )("package.json")
}
