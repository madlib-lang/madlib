import type { Maybe } from "Maybe"

import { split } from "String"
import {} from "Number"
import {} from "List"
import { Just, Nothing } from "Maybe"
import {} from "Show"
import {} from "Scan"
import { ge, le } from "Compare"



export type Version = Version(Integer, Integer, Integer)


export type VersionRange
  = VersionRange(Version, Version)
  | FromVersion(Version)
  | UntilVersion(Version)
  | AnyVersion


instance Show Version {
  show = (version) => {
    major = show(getMajor(version))
    minor = show(getMinor(version))
    patch = show(getPatch(version))

    return `${major}.${minor}.${patch}`
  }
}


instance Scan Version {
  scan = parse
}


instance Comparable Version {
  compare = (a, b) => compare(show(a), show(b))
}


createRange :: Maybe Version -> Maybe Version -> VersionRange
export createRange = (maybeMin, maybeMax) => where(#[maybeMin, maybeMax]) {
  #[Just(minVersion), Just(maxVersion)] =>
    VersionRange(minVersion, maxVersion)

  #[Just(minVersion), Nothing] =>
    FromVersion(minVersion)

  #[Nothing, Just(maxVersion)] =>
    UntilVersion(maxVersion)

  #[Nothing, Nothing] =>
    AnyVersion
}


getMajor :: Version -> Integer
getMajor = where { Version(major, _, _) => major }

getMinor :: Version -> Integer
getMinor = where { Version(_, minor, _) => minor }

getPatch :: Version -> Integer
getPatch = where { Version(_, _, patch) => patch }


parse :: String -> Maybe Version
export parse = pipe(
  split("."),
  map(scan),
  where {
    [Just(major), Just(minor), Just(patch)] =>
      Just(Version(major, minor, patch))

    _ =>
      Nothing
  }
)


isInRange :: Version -> VersionRange -> Boolean
export isInRange = (version, range) => where(range) {
  FromVersion(start) =>
    ge(version, start)

  UntilVersion(end) =>
    le(version, end)

  VersionRange(start, end) =>
    ge(version, start) && le(version, end)

  AnyVersion =>
    true
}


max :: Version -> Version -> Version
max = (v1, v2) => ge(v1, v2) ? v1 : v2

min :: Version -> Version -> Version
min = (v1, v2) => le(v1, v2) ? v1 : v2


intersectRanges :: VersionRange -> VersionRange -> VersionRange
export intersectRanges = (range1, range2) => where(#[range1, range2]) {
  #[FromVersion(start1), FromVersion(start2)] =>
    FromVersion(max(start1, start2))

  #[FromVersion(start1), UntilVersion(end2)] =>
    VersionRange(start1, end2)

  #[FromVersion(start1), VersionRange(start2, end2)] =>
    VersionRange(max(start1, start2), end2)

  #[UntilVersion(end1), FromVersion(start2)] =>
    VersionRange(start2, end1)

  #[UntilVersion(end1), UntilVersion(end2)] =>
    UntilVersion(min(end1, end2))

  #[UntilVersion(end1), VersionRange(start2, end2)] =>
    VersionRange(start2, min(end1, end2))

  #[VersionRange(start1, end1), FromVersion(start2)] =>
    VersionRange(max(start1, start2), end1)

  #[VersionRange(start1, end1), UntilVersion(end2)] =>
    VersionRange(start1, min(end1, end2))

  #[VersionRange(start1, end1), VersionRange(start2, end2)] =>
    VersionRange(max(start1, start2), min(end1, end2))

  #[AnyVersion, range] =>
    range

  #[range, AnyVersion] =>
    range
}
