Right
  AST
    { aimports = []
    , aexps =
        [ Solved
            ([] :=>
               TApp
                 (TApp
                    (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                    (TCon (TC "Number" Star) "prelude"))
                 (TCon (TC "Number" Star) "prelude"))
            (Area (Loc 0 1 1) (Loc 44 2 21))
            (TypedExp
               (Solved
                  ([] :=>
                     TApp
                       (TApp
                          (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                          (TCon (TC "Number" Star) "prelude"))
                       (TCon (TC "Number" Star) "prelude"))
                  (Area (Loc 24 2 1) (Loc 44 2 21))
                  (Assignment
                     "inc"
                     (Solved
                        ([] :=>
                           TApp
                             (TApp
                                (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                                (TCon (TC "Number" Star) "prelude"))
                             (TCon (TC "Number" Star) "prelude"))
                        (Area (Loc 30 2 7) (Loc 44 2 21))
                        (Abs
                           (Solved
                              ([] :=> TCon (TC "Number" Star) "prelude")
                              (Area (Loc 31 2 8) (Loc 32 2 9))
                              "a")
                           [ Solved
                               ([] :=> TCon (TC "Number" Star) "prelude")
                               (Area (Loc 38 2 15) (Loc 43 2 20))
                               (App
                                  (Solved
                                     ([] :=>
                                        TApp
                                          (TApp
                                             (TCon
                                                (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                                             (TCon (TC "Number" Star) "prelude"))
                                          (TCon (TC "Number" Star) "prelude"))
                                     (Area (Loc 38 2 15) (Loc 43 2 20))
                                     (App
                                        (Solved
                                           ([] :=>
                                              TApp
                                                (TApp
                                                   (TCon
                                                      (TC "(->)" (Kfun Star (Kfun Star Star)))
                                                      "prelude")
                                                   (TCon (TC "Number" Star) "prelude"))
                                                (TApp
                                                   (TApp
                                                      (TCon
                                                         (TC "(->)" (Kfun Star (Kfun Star Star)))
                                                         "prelude")
                                                      (TCon (TC "Number" Star) "prelude"))
                                                   (TCon (TC "Number" Star) "prelude")))
                                           (Area (Loc 40 2 17) (Loc 41 2 18))
                                           (Var "+"))
                                        (Solved
                                           ([] :=> TCon (TC "Number" Star) "prelude")
                                           (Area (Loc 38 2 15) (Loc 39 2 16))
                                           (Var "a"))
                                        False))
                                  (Solved
                                     ([] :=> TCon (TC "Number" Star) "prelude")
                                     (Area (Loc 42 2 19) (Loc 43 2 20))
                                     (LNum "1"))
                                  True)
                           ]))))
               (Forall
                  []
                  ([] :=>
                     TApp
                       (TApp
                          (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                          (TCon (TC "Number" Star) "prelude"))
                       (TCon (TC "Number" Star) "prelude"))))
        , Solved
            ([] :=> TCon (TC "Number" Star) "prelude")
            (Area (Loc 46 3 2) (Loc 57 3 13))
            (TypedExp
               (Solved
                  ([] :=> TCon (TC "Number" Star) "prelude")
                  (Area (Loc 46 3 2) (Loc 47 3 3))
                  (LNum "3"))
               (Forall [] ([] :=> TCon (TC "Number" Star) "prelude")))
        , Solved
            ([] :=>
               TApp
                 (TCon (TC "Maybe" (Kfun Star Star)) "path") (TVar (TV "d3" Star)))
            (Area (Loc 93 5 2) (Loc 111 5 20))
            (TypedExp
               (Solved
                  ([] :=>
                     TApp
                       (TCon (TC "Maybe" (Kfun Star Star)) "path") (TVar (TV "d3" Star)))
                  (Area (Loc 93 5 2) (Loc 100 5 9))
                  (Var "Nothing"))
               (Forall
                  [ Star ]
                  ([] :=>
                     TApp (TCon (TC "Maybe" (Kfun Star Star)) "path") (TGen 0))))
        , Solved
            ([] :=>
               TApp
                 (TCon (TC "Maybe" (Kfun Star Star)) "path")
                 (TCon (TC "Number" Star) "prelude"))
            (Area (Loc 114 6 2) (Loc 137 6 25))
            (TypedExp
               (Solved
                  ([] :=>
                     TApp
                       (TCon (TC "Maybe" (Kfun Star Star)) "path")
                       (TCon (TC "Number" Star) "prelude"))
                  (Area (Loc 114 6 2) (Loc 121 6 9))
                  (App
                     (Solved
                        ([] :=>
                           TApp
                             (TApp
                                (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                                (TVar (TV "g6" Star)))
                             (TApp
                                (TCon (TC "Maybe" (Kfun Star Star)) "path") (TVar (TV "g6" Star))))
                        (Area (Loc 114 6 2) (Loc 118 6 6))
                        (Var "Just"))
                     (Solved
                        ([] :=> TCon (TC "Number" Star) "prelude")
                        (Area (Loc 119 6 7) (Loc 120 6 8))
                        (LNum "3"))
                     True))
               (Forall
                  []
                  ([] :=>
                     TApp
                       (TCon (TC "Maybe" (Kfun Star Star)) "path")
                       (TCon (TC "Number" Star) "prelude"))))
        ]
    , atypedecls =
        [ Untyped
            (Area (Loc 59 4 1) (Loc 91 4 33))
            ADT
              { adtname = "Maybe"
              , adtparams = [ "a" ]
              , adtconstructors =
                  [ Untyped
                      (Area (Loc 74 4 16) (Loc 81 4 23))
                      (Constructor
                         "Just"
                         [ Untyped (Area (Loc 79 4 21) (Loc 80 4 22)) (TRSingle "a") ]
                         (TApp
                            (TApp
                               (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                               (TVar (TV "h7" Star)))
                            (TApp
                               (TCon (TC "Maybe" (Kfun Star Star)) "path")
                               (TVar (TV "h7" Star)))))
                  , Untyped
                      (Area (Loc 84 4 26) (Loc 91 4 33))
                      (Constructor
                         "Nothing"
                         []
                         (TApp
                            (TCon (TC "Maybe" (Kfun Star Star)) "path") (TVar (TV "i8" Star))))
                  ]
              , adtType =
                  TApp
                    (TCon (TC "Maybe" (Kfun Star Star)) "path") (TVar (TV "a" Star))
              , adtexported = False
              }
        ]
    , ainterfaces = []
    , ainstances = []
    , apath = Just "path"
    }