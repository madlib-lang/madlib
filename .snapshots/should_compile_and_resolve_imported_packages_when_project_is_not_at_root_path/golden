// file: /root/project/madlib_modules/random/src/Main.mad
import {} from "./../../../__internals__.mjs"
import R from "./Utils/Random.mjs";

export let Just = (a => ({ __constructor: "Just", __args: [ a ] }));
export let Nothing = ({ __constructor: "Nothing", __args: [  ] });
Inspect['Maybe_2031693b0664ad7e81fcc075f8b57c37'] = {};
Inspect['Maybe_2031693b0664ad7e81fcc075f8b57c37']['inspect'] = () => (Inspect_d29) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let a0 = __x__.__args[0];
    return `Just(` + Inspect_d29.inspect()(a0) + `)`;
  }
  else if (__x__.__constructor === "Nothing") {
    return `Nothing`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
export let random = (seed => R.random(seed));
export default { random, Just, Nothing };
// file: /root/project/madlib_modules/random/src/Utils/Random.mad
import {} from "./../../../../__internals__.mjs"
export let random = (seed => seed / 2);
export default { random };
// file: /root/project/src/Main.mad
import {} from "./../__internals__.mjs"
import R from "./../madlib_modules/random/src/Main.mjs";

let main = (_ => {
    R.random(3);
    return ({ __constructor: "Unit", __args: [] });
});
export default {};
const makeArgs = () => {
  let list = {}
  let start = list
  Object.keys(process.argv.slice(0)).forEach((key) => {
    list = list.n = { v: process.argv[key], n: null }
  }, {})
  return {
    n: start.n.n.n,
    v: start.n.n.v
  }
}
main(makeArgs())
