( AST
    { aimports =
        [ Untyped
            (Area (Loc 0 0 0) (Loc 0 0 0))
            (DefaultImport
               (Untyped (Area (Loc 0 0 0) (Loc 0 0 0)) "__BUILTINS__")
               "__BUILTINS__"
               "__BUILTINS__")
        ]
    , aexps =
        [ Typed
            ([] :=> TVar (TV (-1) Star))
            (Area (Loc 0 1 1) (Loc 28 1 29))
            (TypedExp
               (Typed
                  ([] :=> TVar (TV (-1) Star))
                  (Area (Loc 0 1 1) (Loc 28 1 29))
                  (Assignment
                     "main"
                     (Typed
                        ([] :=> TVar (TV (-1) Star))
                        (Area (Loc 7 1 8) (Loc 28 1 29))
                        (Abs
                           (Typed
                              ([] :=> TVar (TV (-1) Star))
                              (Area (Loc 27 1 28) (Loc 27 1 28))
                              "_")
                           [ Typed
                               ([] :=> TVar (TV (-1) Star))
                               (Area (Loc 15 1 16) (Loc 26 1 27))
                               (TemplateString
                                  [ Typed
                                      ([] :=> TVar (TV (-1) Star))
                                      (Area (Loc 18 1 19) (Loc 23 1 24))
                                      (App
                                         (Typed
                                            ([] :=> TVar (TV (-1) Star))
                                            (Area (Loc 18 1 19) (Loc 23 1 24))
                                            (App
                                               (Typed
                                                  ([] :=> TVar (TV (-1) Star))
                                                  (Area (Loc 20 1 21) (Loc 21 1 22))
                                                  (Var "+" False))
                                               (Typed
                                                  ([] :=> TVar (TV 0 Star))
                                                  (Area (Loc 18 1 19) (Loc 19 1 20))
                                                  (LNum "4"))
                                               False))
                                         (Typed
                                            ([] :=> TVar (TV 0 Star))
                                            (Area (Loc 22 1 23) (Loc 23 1 24))
                                            (LNum "3"))
                                         True)
                                  , Typed
                                      ([] :=> TCon (TC "String" Star) "prelude")
                                      (Area (Loc 25 1 26) (Loc 26 1 27))
                                      (LStr "!")
                                  ])
                           , Typed
                               ([] :=> TCon (TC "{}" Star) "prelude")
                               (Area (Loc 0 0 0) (Loc 0 0 0))
                               LUnit
                           ]))))
               (Untyped
                  (Area (Loc 0 0 0) (Loc 0 0 0))
                  (TRArr
                     (Untyped
                        (Area (Loc 0 0 0) (Loc 0 0 0))
                        (TRComp
                           "List"
                           [ Untyped (Area (Loc 0 0 0) (Loc 0 0 0)) (TRSingle "String") ]))
                     (Untyped (Area (Loc 0 0 0) (Loc 0 0 0)) (TRSingle "{}"))))
               (Forall
                  []
                  ([] :=>
                     TApp
                       (TApp
                          (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                          (TApp
                             (TCon (TC "List" (Kfun Star Star)) "prelude")
                             (TCon (TC "String" Star) "prelude")))
                       (TCon (TC "{}" Star) "prelude"))))
        ]
    , atypedecls = []
    , ainterfaces = []
    , ainstances = []
    , apath = Just "Module.mad"
    }
, []
, [ CompilationError
      (NoInstanceFound "Number" [ TCon (TC "String" Star) "prelude" ])
      Context
        { ctxAstPath = "Module.mad"
        , ctxArea = Area (Loc 20 1 21) (Loc 21 1 22)
        }
  ]
)