global.$ = '__$__'
const PLACEHOLDER = '__$__'
global.__curry__ = fn => {
  const test = x => x === PLACEHOLDER;
  return function curried() {
    const argLength = arguments.length;
    let args = new Array(argLength);

    for (let i = 0; i < argLength; ++i) {
      args[i] = arguments[i];
    }
    const countNonPlaceholders = toCount => {
      let count = toCount.length;
      while (!test(toCount[count])) {
        count--;
      }
      return count;
    };
    const length = as => (as.some(test) ? countNonPlaceholders(as) : as.length);
    function saucy() {
      const arg2Length = arguments.length;
      const args2 = new Array(arg2Length);
      for (let j = 0; j < arg2Length; ++j) {
        args2[j] = arguments[j];
      }

      return curried.apply(
        this,
        args
          .map(y =>
            test(y) && args2[0]
              ? args2.shift()
              : y
          )
          .concat(args2)
      );
    }

    if (length(args) >= fn.length) {
      const currentArgs = args.slice(0, fn.length);
      const result = fn.apply(this, currentArgs);
      const nextArgs = args.slice(fn.length);

      if (typeof result === "function" && length(nextArgs) > 0) {
        return result.apply(this, nextArgs);
      } else {
        return result;
      }
    } else {
      return saucy;
    }
  };
};

global.__eq__ = (l, r) => {
  if (l === r) {
    return true;
  }
  if (typeof l !== typeof r) {
    return false;
  }
  if (typeof l === `object`) {
    if (Array.isArray(l)) {
      return l.length === r.length && l.reduce((res, _, i) => res && __eq__(l[i], r[i]), true);
    }
    const keysL = Object.keys(l);
    const keysR = Object.keys(r);
    return keysL.length === keysR.length && keysL.reduce((res, k) => res && __eq__(l[k], r[k]), true);
  }
  return l === r;
}

const __applyMany__ = (f, params) => params.reduce((_f, param) => _f(param), f);
global.__apMtdDicts__ = (dict, dicts) =>
  Object.keys(dict).reduce((o, k) => ({ ...o, [k]: () => __applyMany__(dict[k](), dicts) }), {});

global.__once__ = (fn, context) => {

    var result;

    return function() {

        if (fn) {

            result = fn.apply(context || this, arguments);

            fn = null;

        }

        return result;

    };

}

