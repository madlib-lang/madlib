( AST
    { aimports =
        [ Untyped
            (Area (Loc 0 0 0) (Loc 0 0 0))
            (DefaultImport
               (Untyped (Area (Loc 0 0 0) (Loc 0 0 0)) "__BUILTINS__")
               "__BUILTINS__"
               "__BUILTINS__")
        ]
    , aexps =
        [ Typed
            ([] :=>
               TApp
                 (TApp
                    (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                    (TVar (TV 2 Star)))
                 (TVar (TV 3 Star)))
            (Area (Loc 0 1 1) (Loc 33 4 2))
            (Assignment
               "g"
               (Typed
                  ([ IsIn
                       "Number"
                       [ TVar (TV 3 Star) ]
                       (Just (Area (Loc 30 3 10) (Loc 31 3 11)))
                   ] :=>
                     TApp
                       (TApp
                          (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                          (TVar (TV 2 Star)))
                       (TVar (TV 3 Star)))
                  (Area (Loc 4 1 5) (Loc 33 4 2))
                  (Abs
                     (Typed
                        ([ IsIn
                             "Number"
                             [ TVar (TV 3 Star) ]
                             (Just (Area (Loc 30 3 10) (Loc 31 3 11)))
                         ] :=>
                           TVar (TV 2 Star))
                        (Area (Loc 5 1 6) (Loc 6 1 7))
                        "x")
                     [ Typed
                         ([ IsIn "Number" [ TVar (TV 3 Star) ] Nothing ] :=>
                            TVar (TV 3 Star))
                         (Area (Loc 15 2 3) (Loc 20 2 8))
                         (Assignment
                            "a"
                            (Typed
                               ([ IsIn "Number" [ TVar (TV 3 Star) ] Nothing ] :=>
                                  TVar (TV 3 Star))
                               (Area (Loc 19 2 7) (Loc 20 2 8))
                               (LNum "2")))
                     , Typed
                         ([ IsIn "Number" [ TVar (TV 3 Star) ] Nothing ] :=>
                            TVar (TV 3 Star))
                         (Area (Loc 30 3 10) (Loc 31 3 11))
                         (Var "a" False)
                     ])))
        , Typed
            ([ IsIn "Number" [ TVar (TV 4 Star) ] Nothing ] :=>
               TVar (TV 4 Star))
            (Area (Loc 34 5 1) (Loc 39 5 6))
            (Assignment
               "a"
               (Typed
                  ([ IsIn "Number" [ TVar (TV 4 Star) ] Nothing ] :=>
                     TVar (TV 4 Star))
                  (Area (Loc 38 5 5) (Loc 39 5 6))
                  (LNum "4")))
        , Typed
            ([] :=>
               TApp
                 (TApp
                    (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                    (TApp
                       (TCon (TC "List" (Kfun Star Star)) "prelude")
                       (TCon (TC "String" Star) "prelude")))
                 (TCon (TC "{}" Star) "prelude"))
            (Area (Loc 40 6 1) (Loc 55 6 16))
            (TypedExp
               (Typed
                  ([] :=>
                     TApp
                       (TApp
                          (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                          (TApp
                             (TCon (TC "List" (Kfun Star Star)) "prelude")
                             (TCon (TC "String" Star) "prelude")))
                       (TCon (TC "{}" Star) "prelude"))
                  (Area (Loc 40 6 1) (Loc 55 6 16))
                  (Assignment
                     "main"
                     (Typed
                        ([] :=>
                           TApp
                             (TApp
                                (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                                (TApp
                                   (TCon (TC "List" (Kfun Star Star)) "prelude")
                                   (TCon (TC "String" Star) "prelude")))
                             (TCon (TC "{}" Star) "prelude"))
                        (Area (Loc 47 6 8) (Loc 55 6 16))
                        (Abs
                           (Typed
                              ([] :=>
                                 TApp
                                   (TCon (TC "List" (Kfun Star Star)) "prelude")
                                   (TCon (TC "String" Star) "prelude"))
                              (Area (Loc 54 6 15) (Loc 54 6 15))
                              "_")
                           [ Typed
                               ([] :=> TCon (TC "{}" Star) "prelude")
                               (Area (Loc 0 0 0) (Loc 0 0 0))
                               LUnit
                           ]))))
               (Untyped
                  (Area (Loc 0 0 0) (Loc 0 0 0))
                  (TRArr
                     (Untyped
                        (Area (Loc 0 0 0) (Loc 0 0 0))
                        (TRComp
                           "List"
                           [ Untyped (Area (Loc 0 0 0) (Loc 0 0 0)) (TRSingle "String") ]))
                     (Untyped (Area (Loc 0 0 0) (Loc 0 0 0)) (TRSingle "{}"))))
               (Forall
                  []
                  ([] :=>
                     TApp
                       (TApp
                          (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                          (TApp
                             (TCon (TC "List" (Kfun Star Star)) "prelude")
                             (TCon (TC "String" Star) "prelude")))
                       (TCon (TC "{}" Star) "prelude"))))
        ]
    , atypedecls = []
    , ainterfaces = []
    , ainstances = []
    , apath = Just "Module.mad"
    }
, [ CompilationWarning
      (UnusedParameter "x")
      Context
        { ctxAstPath = "Module.mad"
        , ctxArea = Area (Loc 5 1 6) (Loc 6 1 7)
        }
  , CompilationWarning
      (UnusedTopLevelDeclaration "g")
      Context
        { ctxAstPath = "Module.mad"
        , ctxArea = Area (Loc 0 1 1) (Loc 1 1 2)
        }
  ]
, [ CompilationError
      BadMutation
      Context
        { ctxAstPath = "Module.mad"
        , ctxArea = Area (Loc 15 2 3) (Loc 20 2 8)
        }
  ]
)