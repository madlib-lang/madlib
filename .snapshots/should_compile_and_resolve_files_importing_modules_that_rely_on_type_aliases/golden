// file: /root/project/prelude/__internal__/Wish.mad
export const Wish = __curry__((a) => ({ __constructor: "Wish", __args: [ a ] }));
global.Functor = {};
global.Applicative = {};
global.Monad = {};
Functor['Wish'] = {};
Functor['Wish']['map'] = __curry__((f, m) => Wish(__curry__((bad, good) => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    const run = __x__.__args[0];
    return run(bad, __curry__((x) => good(f(x))));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(m))));
Applicative['Wish'] = {};
Applicative['Wish']['ap'] = __curry__((mf, m) => Wish(__curry__((bad, good) => ((__x__) => {
  if (__x__.length === 2 && __x__[0].__constructor === "Wish" && true && __x__[1].__constructor === "Wish" && true) {
    const [{ __args: [runMF]},{ __args: [runM]}] = __x__;
    return runM(bad, __curry__((x) => runMF(bad, __curry__((f) => good(f(x))))));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(([mf, m])))));
Applicative['Wish']['pure'] = __curry__((a) => Wish(__curry__((bad, good) => good(a))));
Monad['Wish'] = {};
Monad['Wish']['chain'] = __curry__((f, m) => Wish(__curry__((bad, good) => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    const run = __x__.__args[0];
    return run(bad, __curry__((x) => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    const r = __x__.__args[0];
    return r(bad, good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(f(x))));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(m))));
Monad['Wish']['of'] = Applicative.Wish.pure;
export const mapRej = __curry__((f, m) => Wish(__curry__((bad, good) => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    const run = __x__.__args[0];
    return run(__curry__((x) => bad(f(x))), good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(m))));
export const chainRej = __curry__((f, m) => Wish(__curry__((bad, good) => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    const run = __x__.__args[0];
    return run(__curry__((x) => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    const r = __x__.__args[0];
    return r(bad, good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(f(x))), good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(m))));
export const good = __curry__((a) => Wish(__curry__((bad, good) => good(a))));
export const bad = __curry__((e) => Wish(__curry__((bad, good) => bad(e))));
const getWishFn = __curry__((w) => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    const fn = __x__.__args[0];
    return fn;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(w));
export const parallel = __curry__((wishes) => Wish(__curry__((bad, good) => {
    const l = wishes.length
    let ko = false;
    let ok = 0;
    const out = new Array(l);
    const next = j => (j === l && good(out));
    const fork = (w, j) => (getWishFn(w)(
      e => ko || (bad(e), ko = true),
      x => ko || (out[j] = x, next(++ok))
    ));
    wishes.forEach(fork);
  })));
export const fulfill = __curry__((bad, good, m) => {
    ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    const run = __x__.__args[0];
    return run(bad, good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(m);
    return ({ __constructor: "Unit", __args: [] });
});
export default { mapRej, chainRej, good, bad, parallel, fulfill, Wish };
// file: /root/project/src/Main.mad
import {} from "./__internals__.mjs"
import W from "./.prelude/Wish.mjs";

W.fulfill(__curry__((a) => ({ __constructor: "Unit", __args: [] })), __curry__((a) => ({ __constructor: "Unit", __args: [] })))(Functor.Wish.map(__curry__((x) => x + '!'))(Monad.Wish.chain(__curry__((x) => Monad.Wish.of(`finally a string`)))(Monad.Wish.chain(__curry__((x) => Monad.Wish.of(x * 3)))(Functor.Wish.map(__curry__((x) => x % 2))(Monad.Wish.of(3))))));
export default {};
