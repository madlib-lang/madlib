// file: /root/project/prelude/__internal__/Wish.mad
export let Wish = (a => ({ __constructor: "Wish", __args: [ a ] }));
global.Functor = {};
global.Applicative = {};
global.Monad = {};
Inspect['Wish'] = {};
Inspect['Wish']['inspect'] = () => (Inspect_w22) => (Inspect_y24) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let a0 = __x__.__args[0];
    return `Wish(` + Inspect.a_arr_b.inspect()(a0) + `)`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
Functor['Wish'] = {};
Functor['Wish']['map'] = () => (f => m => Wish((bad => good => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let run = __x__.__args[0];
    return run(bad)((x => good(f(x))));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m))));
Applicative['Wish'] = {};
Applicative['Wish']['ap'] = () => (mf => m => Wish((bad => good => ((__x__) => {
  if (__x__.length === 2 && __x__[0].__constructor === "Wish" && true && __x__[1].__constructor === "Wish" && true) {
    let [{ __args: [runMF]},{ __args: [runM]}] = __x__;
    return runM(bad)((x => runMF(bad)((f => good(f(x))))));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(([mf, m])))));
Applicative['Wish']['pure'] = () => (a => Wish((bad => good => good(a))));
Monad['Wish'] = {};
Monad['Wish']['chain'] = () => (f => m => Wish((bad => good => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let run = __x__.__args[0];
    return run(bad)((x => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let r = __x__.__args[0];
    return r(bad)(good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(f(x))));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m))));
Monad['Wish']['of'] = () => Applicative.Wish.pure();
export let mapRej = (f => m => Wish((bad => good => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let run = __x__.__args[0];
    return run((x => bad(f(x))))(good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m))));
export let chainRej = (f => m => Wish((bad => good => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let run = __x__.__args[0];
    return run((x => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let r = __x__.__args[0];
    return r(bad)(good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(f(x))))(good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m))));
export let good = (a => Wish((bad => good => good(a))));
export let bad = (e => Wish((bad => good => bad(e))));
let getWishFn = (w => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let fn = __x__.__args[0];
    return fn;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(w));
export let parallel = (wishes => Wish((bad => good =>  {
    const l = wishes.length
    let ko = false;
    let ok = 0;
    const out = new Array(l);
    const next = j => (j === l && good(out));
    const fork = (w, j) => (getWishFn(w)(
      e => ko || (bad(e), ko = true),
      x => ko || (out[j] = x, next(++ok))
    ));
    wishes.forEach(fork);
  } )));
export let fulfill = (bad => good => m => {
    ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let run = __x__.__args[0];
    return run(bad)(good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m);
    return ({ __constructor: "Unit", __args: [] });
});
export default { mapRej, chainRej, good, bad, parallel, fulfill, Wish };
// file: /root/project/src/Main.mad
import {} from "./__internals__.mjs"
import W from "./.prelude/Wish.mjs";

W.fulfill((a => ({ __constructor: "Unit", __args: [] })))((a => ({ __constructor: "Unit", __args: [] })))(Functor.Wish.map()((x => x + `!`))(Monad.Wish.chain()((x => Monad.Wish.of()(`finally a string`)))(Monad.Wish.chain()((x => Monad.Wish.of()(x * 3)))(Functor.Wish.map()((x => x % 2))(Monad.Wish.of()(3))))));
export default {};
