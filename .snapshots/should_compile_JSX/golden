// file: path
export let Wish = (a => ({ __constructor: "Wish", __args: [ a ] }));
let Element = ({ __constructor: "Element", __args: [  ] });
let Event = ({ __constructor: "Event", __args: [  ] });
let AttributeId = (a => ({ __constructor: "AttributeId", __args: [ a ] }));
let AttributeClass = (a => ({ __constructor: "AttributeClass", __args: [ a ] }));
let OnClick = (a => ({ __constructor: "OnClick", __args: [ a ] }));
let OnMouseOver = (a => ({ __constructor: "OnMouseOver", __args: [ a ] }));
let OnMouseOut = (a => ({ __constructor: "OnMouseOut", __args: [ a ] }));
global.Show = {};
global.Functor = {};
Inspect['Wish'] = {};
Inspect['Wish']['inspect'] = () => (Inspect_h7) => (Inspect_j9) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let a0 = __x__.__args[0];
    return `Wish(` + Inspect.a_arr_b.inspect()(a0) + `)`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
Inspect['Element'] = {};
Inspect['Element']['inspect'] = () => (Inspect_u20) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Element") {
    return `Element`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
Inspect['Event'] = {};
Inspect['Event']['inspect'] = () => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Event") {
    return `Event`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
Inspect['Attribute'] = {};
Inspect['Attribute']['inspect'] = () => (Inspect_h33) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "AttributeId" && true) {
    let a0 = __x__.__args[0];
    return `AttributeId(` + Inspect.String.inspect()(a0) + `)`;
  }
  else if (__x__.__constructor === "AttributeClass" && true) {
    let a0 = __x__.__args[0];
    return `AttributeClass(` + Inspect.String.inspect()(a0) + `)`;
  }
  else if (__x__.__constructor === "OnClick" && true) {
    let a0 = __x__.__args[0];
    return `OnClick(` + Inspect.a_arr_b.inspect()(a0) + `)`;
  }
  else if (__x__.__constructor === "OnMouseOver" && true) {
    let a0 = __x__.__args[0];
    return `OnMouseOver(` + Inspect.a_arr_b.inspect()(a0) + `)`;
  }
  else if (__x__.__constructor === "OnMouseOut" && true) {
    let a0 = __x__.__args[0];
    return `OnMouseOut(` + Inspect.a_arr_b.inspect()(a0) + `)`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
Show['Integer'] = {};
Show['Integer']['show'] = () => (x =>  new Integer(x).toString() );
Functor['List'] = {};
Functor['List']['map'] = () => (f => xs =>  xs.map((x) => f(x)) );
export let good = (a => Wish((_ => goodCB => goodCB(a))));
export let id = AttributeId;
export let className = AttributeClass;
export let onClick = OnClick;
export let onMouseOver = OnMouseOver;
export let onMouseOut = OnMouseOut;
export let text = (content =>  content );
export let div = (attrs => children =>  h('div', objectifyAttrs(attrs), children) );
export let span = (attrs => children =>  h('span', objectifyAttrs(attrs), children) );
export let p = (attrs => children =>  h('p', objectifyAttrs(attrs), children) );
export let input = (attrs => children =>  h('input', objectifyAttrs(attrs), children) );
export let button = (attrs => children =>  h('button', objectifyAttrs(attrs), children) );
let initialState = 0;
let MyApp = (count => div(([id(`id`), className(`class`)]))(([div(([]))(([`Current count is ` + Show.Integer.show()(count)])), div(([]))(([button(([onClick((state => event => ([good((s => s + 1))])))]))(([`increment`]))]))])));
div(([]))(([`Some text!`]));
div(([]))(([div(([]))(([span(([]))(([]))])), div(([]))(([span(([]))(([]))]))]));
let methods = ([`1`, `2`, `3`]);
let childElems = Functor.List.map()((method => div(([]))(([method]))))(methods);
div(([]))(([ ...methods]));
div(([]))(([ ...childElems]));
export default { good, id, className, onClick, onMouseOver, onMouseOut, text, div, span, p, input, button, Wish };
