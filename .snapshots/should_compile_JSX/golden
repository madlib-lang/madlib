// file: path
export const Wish = __curry__((a) => ({ __constructor: "Wish", __args: [ a ] }));
const Element = ({ __constructor: "Element", __args: [  ] });
const Event = ({ __constructor: "Event", __args: [  ] });
const AttributeId = __curry__((a) => ({ __constructor: "AttributeId", __args: [ a ] }));
const AttributeClass = __curry__((a) => ({ __constructor: "AttributeClass", __args: [ a ] }));
const OnClick = __curry__((a) => ({ __constructor: "OnClick", __args: [ a ] }));
const OnMouseOver = __curry__((a) => ({ __constructor: "OnMouseOver", __args: [ a ] }));
const OnMouseOut = __curry__((a) => ({ __constructor: "OnMouseOut", __args: [ a ] }));
global.Show = {};
global.Functor = {};
Show['Number'] = {};
Show['Number']['show'] = __curry__((x) => new Number(x).toString());
Functor['List'] = {};
Functor['List']['map'] = __curry__((f, xs) => xs.map((x) => f(x)));
export const good = __curry__((a) => Wish(__curry__((bad, good) => good(a))));
export const id = AttributeId;
export const className = AttributeClass;
export const onClick = OnClick;
export const onMouseOver = OnMouseOver;
export const onMouseOut = OnMouseOut;
export const text = __curry__((content) => content);
export const div = __curry__((attrs, children) => h('div', objectifyAttrs(attrs), children));
export const span = __curry__((attrs, children) => h('span', objectifyAttrs(attrs), children));
export const p = __curry__((attrs, children) => h('p', objectifyAttrs(attrs), children));
export const input = __curry__((attrs, children) => h('input', objectifyAttrs(attrs), children));
export const button = __curry__((attrs, children) => h('button', objectifyAttrs(attrs), children));
const initialState = 0;
const MyApp = __curry__((count) => div(([id("id"), className("class")]))(([div(([]))(([text(`Current count is ${Show.Number.show(count)}`)])), div(([]))(([button(([onClick(__curry__((state, event) => ([good(__curry__((s) => s + 1))])))]))(([text("increment")]))]))])));
div(([]))(([text("Some text!")]));
div(([]))(([div(([]))(([span(([]))(([]))])), div(([]))(([span(([]))(([]))]))]));
const methods = (['1', '2', '3']);
const children = Functor.List.map(__curry__((method) => div(([]))(([method]))))(methods);
div(([]))(([ ...((f) => (xs) => xs.map(f))(text)(methods)]));
div(([]))(([ ...children]));
export default { good, id, className, onClick, onMouseOver, onMouseOut, text, div, span, p, input, button, Wish };
