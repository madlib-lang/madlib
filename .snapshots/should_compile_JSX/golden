// file: path
export let Wish = __curry__((a) => ({ __constructor: "Wish", __args: [ a ] }));
let Element = ({ __constructor: "Element", __args: [  ] });
let Event = ({ __constructor: "Event", __args: [  ] });
let AttributeId = __curry__((a) => ({ __constructor: "AttributeId", __args: [ a ] }));
let AttributeClass = __curry__((a) => ({ __constructor: "AttributeClass", __args: [ a ] }));
let OnClick = __curry__((a) => ({ __constructor: "OnClick", __args: [ a ] }));
let OnMouseOver = __curry__((a) => ({ __constructor: "OnMouseOver", __args: [ a ] }));
let OnMouseOut = __curry__((a) => ({ __constructor: "OnMouseOut", __args: [ a ] }));
global.Show = {};
global.Functor = {};
Show['Number'] = {};
Show['Number']['show'] = __curry__((x) => new Number(x).toString());
Functor['List'] = {};
Functor['List']['map'] = __curry__((f, xs) => xs.map((x) => f(x)));
export let good = __curry__((a) => Wish(__curry__((_, goodCB) => goodCB(a))));
export let id = AttributeId;
export let className = AttributeClass;
export let onClick = OnClick;
export let onMouseOver = OnMouseOver;
export let onMouseOut = OnMouseOut;
export let text = __curry__((content) => content);
export let div = __curry__((attrs, children) => h('div', objectifyAttrs(attrs), children));
export let span = __curry__((attrs, children) => h('span', objectifyAttrs(attrs), children));
export let p = __curry__((attrs, children) => h('p', objectifyAttrs(attrs), children));
export let input = __curry__((attrs, children) => h('input', objectifyAttrs(attrs), children));
export let button = __curry__((attrs, children) => h('button', objectifyAttrs(attrs), children));
let initialState = 0;
let MyApp = __curry__((count) => div(([id("id"), className("class")]), ([div(([]), ([text(`Current count is ${Show.Number.show(count)}`)])), div(([]), ([button(([onClick(__curry__((state, event) => ([good(__curry__((s) => s + 1))])))]), ([text("increment")]))]))])));
div(([]), ([text("Some text!")]));
div(([]), ([div(([]), ([span(([]), ([]))])), div(([]), ([span(([]), ([]))]))]));
let methods = (['1', '2', '3']);
let childElems = Functor.List.map(__curry__((method) => div(([]), ([method]))), methods);
div(([]), ([ ...((f) => (xs) => xs.map(f))(text, methods)]));
div(([]), ([ ...childElems]));
export default { good, id, className, onClick, onMouseOver, onMouseOut, text, div, span, p, input, button, Wish };
