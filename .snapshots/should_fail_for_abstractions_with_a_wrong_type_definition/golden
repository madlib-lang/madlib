( AST
    { aimports = []
    , aexps =
        [ Typed
            ([] :=> TVar (TV "-" Star))
            (Area (Loc 0 1 1) (Loc 58 2 24))
            (TypedExp
               (Typed
                  ([] :=> TVar (TV "-" Star))
                  (Area (Loc 35 2 1) (Loc 58 2 24))
                  (Assignment
                     "fn"
                     (Typed
                        ([] :=> TVar (TV "-" Star))
                        (Area (Loc 40 2 6) (Loc 58 2 24))
                        (Abs
                           (Typed
                              ([] :=> TVar (TV "-" Star)) (Area (Loc 41 2 7) (Loc 42 2 8)) "a")
                           [ Typed
                               ([] :=> TVar (TV "-" Star))
                               (Area (Loc 40 2 6) (Loc 58 2 24))
                               (Abs
                                  (Typed
                                     ([] :=> TVar (TV "-" Star))
                                     (Area (Loc 44 2 10) (Loc 45 2 11))
                                     "b")
                                  [ Typed
                                      ([] :=> TVar (TV "-" Star))
                                      (Area (Loc 51 2 17) (Loc 57 2 23))
                                      (App
                                         (Typed
                                            ([] :=> TVar (TV "-" Star))
                                            (Area (Loc 51 2 17) (Loc 57 2 23))
                                            (App
                                               (Typed
                                                  ([] :=> TVar (TV "-" Star))
                                                  (Area (Loc 53 2 19) (Loc 55 2 21))
                                                  (Var "==" False))
                                               (Typed
                                                  ([] :=> TVar (TV "-" Star))
                                                  (Area (Loc 51 2 17) (Loc 52 2 18))
                                                  (Var "a" False))
                                               False))
                                         (Typed
                                            ([] :=> TVar (TV "-" Star))
                                            (Area (Loc 56 2 22) (Loc 57 2 23))
                                            (Var "b" False))
                                         True)
                                  ])
                           ]))))
               (Untyped
                  (Area (Loc 6 1 7) (Loc 34 1 35))
                  (TRArr
                     (Untyped (Area (Loc 6 1 7) (Loc 12 1 13)) (TRSingle "String"))
                     (Untyped
                        (Area (Loc 16 1 17) (Loc 34 1 35))
                        (TRArr
                           (Untyped (Area (Loc 16 1 17) (Loc 23 1 24)) (TRSingle "Integer"))
                           (Untyped
                              (Area (Loc 27 1 28) (Loc 34 1 35)) (TRSingle "Boolean"))))))
               (Forall
                  []
                  ([] :=>
                     TApp
                       (TApp
                          (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                          (TCon (TC "String" Star) "prelude"))
                       (TApp
                          (TApp
                             (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                             (TCon (TC "Integer" Star) "prelude"))
                          (TCon (TC "Boolean" Star) "prelude")))))
        , Typed
            ([] :=> TVar (TV "-" Star))
            (Area (Loc 59 3 1) (Loc 84 3 26))
            (TypedExp
               (Typed
                  ([] :=> TVar (TV "-" Star))
                  (Area (Loc 59 3 1) (Loc 84 3 26))
                  (Assignment
                     "main"
                     (Typed
                        ([] :=> TVar (TV "-" Star))
                        (Area (Loc 66 3 8) (Loc 84 3 26))
                        (Abs
                           (Typed
                              ([] :=> TVar (TV "-" Star)) (Area (Loc 83 3 25) (Loc 83 3 25)) "_")
                           [ Typed
                               ([] :=> TVar (TV "-" Star))
                               (Area (Loc 74 3 16) (Loc 81 3 23))
                               (App
                                  (Typed
                                     ([] :=> TVar (TV "-" Star))
                                     (Area (Loc 74 3 16) (Loc 82 3 24))
                                     (App
                                        (Typed
                                           ([] :=> TVar (TV "-" Star))
                                           (Area (Loc 74 3 16) (Loc 76 3 18))
                                           (Var "fn" False))
                                        (Typed
                                           ([] :=> TVar (TV "a" Star))
                                           (Area (Loc 77 3 19) (Loc 78 3 20))
                                           (LNum "3"))
                                        False))
                                  (Typed
                                     ([] :=> TVar (TV "a" Star))
                                     (Area (Loc 80 3 22) (Loc 81 3 23))
                                     (LNum "4"))
                                  True)
                           , Typed
                               ([] :=> TCon (TC "{}" Star) "prelude")
                               (Area (Loc 0 0 0) (Loc 0 0 0))
                               LUnit
                           ]))))
               (Untyped
                  (Area (Loc 0 0 0) (Loc 0 0 0))
                  (TRArr
                     (Untyped
                        (Area (Loc 0 0 0) (Loc 0 0 0))
                        (TRComp
                           "List"
                           [ Untyped (Area (Loc 0 0 0) (Loc 0 0 0)) (TRSingle "String") ]))
                     (Untyped (Area (Loc 0 0 0) (Loc 0 0 0)) (TRSingle "{}"))))
               (Forall
                  []
                  ([] :=>
                     TApp
                       (TApp
                          (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                          (TApp
                             (TCon (TC "List" (Kfun Star Star)) "prelude")
                             (TCon (TC "String" Star) "prelude")))
                       (TCon (TC "{}" Star) "prelude"))))
        ]
    , atypedecls = []
    , ainterfaces = []
    , ainstances = []
    , apath = Just "Module.mad"
    }
, []
, [ CompilationError
      (UnificationError
         (TApp
            (TApp
               (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
               (TCon (TC "String" Star) "prelude"))
            (TApp
               (TApp
                  (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                  (TCon (TC "String" Star) "prelude"))
               (TCon (TC "Boolean" Star) "prelude")))
         (TApp
            (TApp
               (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
               (TCon (TC "String" Star) "prelude"))
            (TApp
               (TApp
                  (TCon (TC "(->)" (Kfun Star (Kfun Star Star))) "prelude")
                  (TCon (TC "Integer" Star) "prelude"))
               (TCon (TC "Boolean" Star) "prelude"))))
      Context
        { ctxAstPath = "Module.mad"
        , ctxArea = Area (Loc 0 1 1) (Loc 58 2 24)
        }
  , CompilationError
      (NoInstanceFound "Number" [ TCon (TC "String" Star) "prelude" ])
      Context
        { ctxAstPath = "Module.mad"
        , ctxArea = Area (Loc 74 3 16) (Loc 81 3 23)
        }
  ]
)