// file: path
let Just = (a => ({ __constructor: "Just", __args: [ a ] }));
let Nothing = ({ __constructor: "Nothing", __args: [  ] });
let Right = (a => ({ __constructor: "Right", __args: [ a ] }));
let Left = (a => ({ __constructor: "Left", __args: [ a ] }));
global.Functor = {};
global.Monad = {};
Inspect['Maybe'] = {};
Inspect['Maybe']['inspect'] = () => (Inspect_g6) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let a0 = __x__.__args[0];
    return `Just(${Inspect_g6.inspect()(a0)})`;
  }
  else if (__x__.__constructor === "Nothing") {
    return "Nothing";
  }
  else if (true) {
    return "Unknown";
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__))
Inspect['Either'] = {};
Inspect['Either']['inspect'] = () => (Inspect_v21) => (Inspect_s18) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Right" && true) {
    let a0 = __x__.__args[0];
    return `Right(${Inspect_s18.inspect()(a0)})`;
  }
  else if (__x__.__constructor === "Left" && true) {
    let a0 = __x__.__args[0];
    return `Left(${Inspect_v21.inspect()(a0)})`;
  }
  else if (true) {
    return "Unknown";
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__))
Functor['Maybe'] = {};
Functor['Maybe']['map'] = () => (f => __x__ => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let x = __x__.__args[0];
    return Just(f(x));
  }
  else if (__x__.__constructor === "Nothing") {
    return Nothing;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__));
Functor['List'] = {};
Functor['List']['map'] = () => (f => __x__ => ((__x__) => {
  if (__x__.length >= 1 && true && true) {
    let [h,...t] = __x__;
    return ([f(h),  ...Functor.List.map()(f)(t)]);
  }
  else if (__x__.length === 1 && true) {
    let [l] = __x__;
    return ([f(l)]);
  }
  else if (__x__.length === 0) {
    let [] = __x__;
    return ([]);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__));
Monad['Maybe'] = {};
Monad['Maybe']['chain'] = () => (f => __x__ => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let x = __x__.__args[0];
    return f(x);
  }
  else if (__x__.__constructor === "Nothing") {
    return Nothing;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__));
Monad['Maybe']['of'] = () => (x => Just(x));
Monad['Either'] = {};
Monad['Either']['chain'] = () => (f => __x__ => ((__x__) => {
  if (__x__.__constructor === "Right" && true) {
    let x = __x__.__args[0];
    return f(x);
  }
  else if (__x__.__constructor === "Left" && true) {
    let e = __x__.__args[0];
    return Left(e);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__));
Monad['Either']['of'] = () => (x => Right(x));
let inc = (a => a + 1);
Functor.List.map()(inc)(([1, 2, 3]));
Monad.Maybe.chain()((x => Just(x + 1)))(Just(3));
let doIt = (Functor_w308) => (x => Functor_w308.map()((k => k + 1))(x));
doIt(Functor.Maybe)(Just(3));
let p = 1;
let fn = (Functor_j347) => Functor_j347.map()(inc);
fn(Functor.Maybe)(Just(3));
fn(Functor.List)(([4, 5, 6]));
let hideCall = (x => ((__x__) => {
  if (__x__.__constructor === "Just" && __x__.__args[0] === 2) {
    return Monad.Either.chain()((a => Right(a + 1)))(Right(2));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(Monad.Maybe.chain()((a => Just(a + 1)))(x)));
export default {};
