// file: Module.mad
import {} from "./__internals__.mjs"
let Just = (a => ({ __constructor: "Just", __args: [ a ] }));
let Nothing = ({ __constructor: "Nothing", __args: [  ] });
let Right = (a => ({ __constructor: "Right", __args: [ a ] }));
let Left = (a => ({ __constructor: "Left", __args: [ a ] }));
global.Functor = {};
global.Monad = {};
Inspect['Maybe_568c75136c0c369c440814a7af59434a'] = {};
Inspect['Maybe_568c75136c0c369c440814a7af59434a']['inspect'] = () => (Inspect_g214) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let a0 = __x__.__args[0];
    return `Just(` + Inspect_g214.inspect()(a0) + `)`;
  }
  else if (__x__.__constructor === "Nothing") {
    return `Nothing`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
Inspect['Either_568c75136c0c369c440814a7af59434a'] = {};
Inspect['Either_568c75136c0c369c440814a7af59434a']['inspect'] = () => (Inspect_v229) => (Inspect_s226) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Right" && true) {
    let a0 = __x__.__args[0];
    return `Right(` + Inspect_s226.inspect()(a0) + `)`;
  }
  else if (__x__.__constructor === "Left" && true) {
    let a0 = __x__.__args[0];
    return `Left(` + Inspect_v229.inspect()(a0) + `)`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
Functor['Maybe_568c75136c0c369c440814a7af59434a'] = {};
Functor['Maybe_568c75136c0c369c440814a7af59434a']['map'] = () => (f => __x__ => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let x = __x__.__args[0];
    return Just(f(x));
  }
  else if (__x__.__constructor === "Nothing") {
    return Nothing;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__));
Functor['List_5b7ebeeaa5acfe1eeea5a9e9845b152d'] = {};
Functor['List_5b7ebeeaa5acfe1eeea5a9e9845b152d']['map'] = () => (f => __x__ => {
    let $_result_;
    let $_continue_ = true;
    let $_start_ = {};
    let $_end_ = $_start_;
    let $$f = f;
    let $$__x__ = __x__;

    while($_continue_) {
      let $f = $$f;
      let $__x__ = $$__x__;

        $_continue_ = false;
        ((__x__) => {
  if (__x__ !== null && true && true) {
    let { v: h, n: t } = __x__;
    ($_end_ = $_end_.n = { v: $f(h) }, $$f = $f, $$__x__ = t, $_continue_ = true);
  }
  else if (__x__ !== null && true && __x__.n === null) {
    let { v: l } = __x__;
    ($_end_.n = ({ v: $f(l), n: null }), $_result_ = $_start_.n);
  }
  else if (__x__ === null) {
    ($_end_.n = (null), $_result_ = $_start_.n);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})($__x__)
    }
    return $_result_;
});
Monad['Maybe_568c75136c0c369c440814a7af59434a'] = {};
Monad['Maybe_568c75136c0c369c440814a7af59434a']['chain'] = () => (f => __x__ => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let x = __x__.__args[0];
    return f(x);
  }
  else if (__x__.__constructor === "Nothing") {
    return Nothing;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__));
Monad['Maybe_568c75136c0c369c440814a7af59434a']['of'] = () => (x => Just(x));
Monad['Either_568c75136c0c369c440814a7af59434a'] = {};
Monad['Either_568c75136c0c369c440814a7af59434a']['chain'] = () => (f => __x__ => ((__x__) => {
  if (__x__.__constructor === "Right" && true) {
    let x = __x__.__args[0];
    return f(x);
  }
  else if (__x__.__constructor === "Left" && true) {
    let e = __x__.__args[0];
    return Left(e);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__));
Monad['Either_568c75136c0c369c440814a7af59434a']['of'] = () => (x => Right(x));
let inc = (a => a + 1);
let doIt = (Functor_v21) => (x => Functor_v21.map()((k => k + 1))(x));
let fn = (Functor_g32) => Functor_g32.map()(inc);
let hideCall = (x => ((__x__) => {
  if (__x__.__constructor === "Just" && __x__.__args[0] === 2) {
    return Monad.Either_568c75136c0c369c440814a7af59434a.chain()((a => Right(a + 1)))(Right(2));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(Monad.Maybe_568c75136c0c369c440814a7af59434a.chain()((a => Just(a + 1)))(x)));
let main = (_ => {
    Functor.List_5b7ebeeaa5acfe1eeea5a9e9845b152d.map()(inc)(({ v: 1, n: { v: 2, n: { v: 3, n: null } } }));
    fn(Functor.List_5b7ebeeaa5acfe1eeea5a9e9845b152d)(({ v: 4, n: { v: 5, n: { v: 6, n: null } } }));
    fn(Functor.Maybe_568c75136c0c369c440814a7af59434a)(Just(3));
    doIt(Functor.Maybe_568c75136c0c369c440814a7af59434a)(Just(3));
    Monad.Maybe_568c75136c0c369c440814a7af59434a.chain()((x => Just(x + 1)))(Just(3));
    let p = 1;
    return ({ __constructor: "Unit", __args: [] });
});
export default {};
const makeArgs = () => {
  let list = {}
  let start = list
  Object.keys(process.argv.slice(0)).forEach((key) => {
    list = list.n = { v: process.argv[key], n: null }
  }, {})
  return {
    n: start.n.n.n,
    v: start.n.n.v
  }
}
main(makeArgs())
