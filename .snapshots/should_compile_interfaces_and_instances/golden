// file: path
let Just = __curry__((a) => ({ __constructor: "Just", __args: [ a ] }));
let Nothing = ({ __constructor: "Nothing", __args: [  ] });
let Right = __curry__((a) => ({ __constructor: "Right", __args: [ a ] }));
let Left = __curry__((a) => ({ __constructor: "Left", __args: [ a ] }));
global.Functor = {};
global.Monad = {};
Functor['Maybe'] = {};
Functor['Maybe']['map'] = __curry__((f, __x__) => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let x = __x__.__args[0];
    return Just(f(x));
  }
  else if (__x__.__constructor === "Nothing") {
    return Nothing;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__x__));
Functor['List'] = {};
Functor['List']['map'] = __curry__((f, __x__) => ((__x__) => {
  if (__x__.length >= 2 && true && true) {
    let [h,...t] = __x__;
    return ([f(h),  ...Functor.List.map(f, t)]);
  }
  else if (__x__.length === 1 && true) {
    let [l] = __x__;
    return ([f(l)]);
  }
  else if (__x__.length === 0) {
    let [] = __x__;
    return ([]);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__x__));
Monad['Maybe'] = {};
Monad['Maybe']['chain'] = __curry__((f, __x__) => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let x = __x__.__args[0];
    return f(x);
  }
  else if (__x__.__constructor === "Nothing") {
    return Nothing;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__x__));
Monad['Maybe']['of'] = __curry__((x) => Just(x));
Monad['Either'] = {};
Monad['Either']['chain'] = __curry__((f, __x__) => ((__x__) => {
  if (__x__.__constructor === "Right" && true) {
    let x = __x__.__args[0];
    return f(x);
  }
  else if (__x__.__constructor === "Left" && true) {
    let e = __x__.__args[0];
    return Left(e);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__x__));
Monad['Either']['of'] = __curry__((x) => Right(x));
let inc = __curry__((a) => a + 1);
Functor.List.map(inc, ([1, 2, 3]));
Monad.Maybe.chain(__curry__((x) => Just(x + 1)), Just(3));
let doIt = (Functor_q120) => {
  global.Functor_q120 = Functor_q120

  return doIt__ND__()
};
let doIt__ND__ = __once__(() => __curry__((x) => Functor_q120.map(__curry__((k) => k + 1), x)));
doIt(Functor.Maybe)(Just(3));
let p = 1;
let fn = (Functor_i138) => {
  global.Functor_i138 = Functor_i138

  return fn__ND__()
};
let fn__ND__ = __once__(() => Functor_i138.map(inc));
fn(Functor.Maybe)(Just(3));
fn(Functor.List)(([4, 5, 6]));
let hideCall = __curry__((x) => ((__x__) => {
  if (__x__.__constructor === "Just" && __x__.__args[0] === 2) {
    return Monad.Either.chain(__curry__((a) => Right(a + 1)), Right(2));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(Monad.Maybe.chain(__curry__((a) => Just(a + 1)), x)));
export default {};
