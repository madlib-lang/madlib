// file: /root/project/src/Binary.mad
export let Int8Bit = (a => ({ __constructor: "Int8Bit", __args: [ a ] }));
export let Int16Bit = (a => ({ __constructor: "Int16Bit", __args: [ a ] }));
export let Int32Bit = (a => ({ __constructor: "Int32Bit", __args: [ a ] }));
export let ByteArray = (a => ({ __constructor: "ByteArray", __args: [ a ] }));
export default { Int8Bit, Int16Bit, Int32Bit, ByteArray };
// file: /root/project/src/FileSystem.mad
import W from "./Wish.mjs";
import B from "./Binary.mjs";

export let TextData = (a => ({ __constructor: "TextData", __args: [ a ] }));
export let BinaryData = (a => ({ __constructor: "BinaryData", __args: [ a ] }));
export let writeFile = (path => d =>  );
export default { writeFile, TextData, BinaryData };
// file: /root/project/src/Http.mad
import W from "./Wish.mjs";
import B from "./Binary.mjs";

export let TextBody = (a => ({ __constructor: "TextBody", __args: [ a ] }));
export let BinaryBody = (a => ({ __constructor: "BinaryBody", __args: [ a ] }));
export let Response = (a => ({ __constructor: "Response", __args: [ a ] }));
export let get = (url =>  );
export default { get, TextBody, BinaryBody, Response };
// file: /root/project/src/IO.mad
export let log = (a =>  { console.log(a); return a; } );
export default { log };
// file: /root/project/src/Main.mad
import {} from "./__internals__.mjs"
import W from "./Wish.mjs";
import B from "./Binary.mjs";
import FS from "./FileSystem.mjs";
import Http from "./Http.mjs";
import IO from "./IO.mjs";

W.fulfill(IO.log)(IO.log)(W.chain(FS.writeFile("./f.zip"))(W.map(FS.BinaryData)(W.map((response => __x__ => ((__x__) => {
  if (__x__.__constructor === "Response" && __x__.__args[0].body.__constructor === "BinaryBody" && true) {
    let { body: { __args: [d] } } = __x__.__args[0];
    return d;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__)))(Http.get("https://github.com/open-sorcerers/madlib/archive/master.zip")))));
export default {};
// file: /root/project/src/Wish.mad
export let Wish = (a => ({ __constructor: "Wish", __args: [ a ] }));
export let of = (a => Wish((bad => good => good(a))));
export let map = (f => m => Wish((bad => good => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let run = __x__.__args[0];
    return run(bad)((x => good(f(x))));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m))));
export let chain = (f => m => Wish((bad => good => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let run1 = __x__.__args[0];
    return run1(bad)((x => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let run2 = __x__.__args[0];
    return run2(bad)(good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(f(x))));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m))));
export let fulfill = (bad => good => m => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let run = __x__.__args[0];
    return run(bad)(good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m));
export default { of, map, chain, fulfill, Wish };
