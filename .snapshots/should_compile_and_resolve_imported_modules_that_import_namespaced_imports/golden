// file: /root/project/src/Binary.mad
import {} from "./__internals__.mjs"
export let Int8Bit = (a => ({ __constructor: "Int8Bit", __args: [ a ] }));
export let Int16Bit = (a => ({ __constructor: "Int16Bit", __args: [ a ] }));
export let Int32Bit = (a => ({ __constructor: "Int32Bit", __args: [ a ] }));
export let Bytes = (a => ({ __constructor: "Bytes", __args: [ a ] }));
Inspect['ByteWord_69f1c9d46626f6b4732f10b20d210612'] = {};
Inspect['ByteWord_69f1c9d46626f6b4732f10b20d210612']['inspect'] = () => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Int8Bit" && true) {
    let a0 = __x__.__args[0];
    return `Int8Bit(` + Inspect.Integer_5b7ebeeaa5acfe1eeea5a9e9845b152d.inspect()(a0) + `)`;
  }
  else if (__x__.__constructor === "Int16Bit" && true) {
    let a0 = __x__.__args[0];
    return `Int16Bit(` + Inspect.Integer_5b7ebeeaa5acfe1eeea5a9e9845b152d.inspect()(a0) + `)`;
  }
  else if (__x__.__constructor === "Int32Bit" && true) {
    let a0 = __x__.__args[0];
    return `Int32Bit(` + Inspect.Integer_5b7ebeeaa5acfe1eeea5a9e9845b152d.inspect()(a0) + `)`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
Inspect['Bytes_69f1c9d46626f6b4732f10b20d210612'] = {};
Inspect['Bytes_69f1c9d46626f6b4732f10b20d210612']['inspect'] = () => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Bytes" && true) {
    let a0 = __x__.__args[0];
    return `Bytes(` + Inspect.List_5b7ebeeaa5acfe1eeea5a9e9845b152d.inspect()(Inspect.ByteWord_69f1c9d46626f6b4732f10b20d210612)(a0) + `)`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
export default { Int8Bit, Int16Bit, Int32Bit, Bytes };
// file: /root/project/src/FileSystem.mad
import {} from "./__internals__.mjs"
import W from "./Wish.mjs";
import B from "./Binary.mjs";

export let TextData = (a => ({ __constructor: "TextData", __args: [ a ] }));
export let BinaryData = (a => ({ __constructor: "BinaryData", __args: [ a ] }));
Inspect['Data_9029b04665903b3e1f3a8e816ce9ba2d'] = {};
Inspect['Data_9029b04665903b3e1f3a8e816ce9ba2d']['inspect'] = () => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "TextData" && true) {
    let a0 = __x__.__args[0];
    return `TextData(` + Inspect.String_5b7ebeeaa5acfe1eeea5a9e9845b152d.inspect()(a0) + `)`;
  }
  else if (__x__.__constructor === "BinaryData" && true) {
    let a0 = __x__.__args[0];
    return `BinaryData(` + Inspect.Bytes_69f1c9d46626f6b4732f10b20d210612.inspect()(a0) + `)`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
export let writeFile = (path => d =>  );
export default { writeFile, TextData, BinaryData };
// file: /root/project/src/Http.mad
import {} from "./__internals__.mjs"
import W from "./Wish.mjs";
import B from "./Binary.mjs";

export let TextBody = (a => ({ __constructor: "TextBody", __args: [ a ] }));
export let BinaryBody = (a => ({ __constructor: "BinaryBody", __args: [ a ] }));
export let Response = (a => ({ __constructor: "Response", __args: [ a ] }));
Inspect['Body_d206b5c3b3648903ef6233d5061d1089'] = {};
Inspect['Body_d206b5c3b3648903ef6233d5061d1089']['inspect'] = () => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "TextBody" && true) {
    let a0 = __x__.__args[0];
    return `TextBody(` + Inspect.String_5b7ebeeaa5acfe1eeea5a9e9845b152d.inspect()(a0) + `)`;
  }
  else if (__x__.__constructor === "BinaryBody" && true) {
    let a0 = __x__.__args[0];
    return `BinaryBody(` + Inspect.Bytes_69f1c9d46626f6b4732f10b20d210612.inspect()(a0) + `)`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
Inspect['Record_bodyf_0d206b5c3b3648903ef6233d5061d1089'] = {};
Inspect['Record_bodyf_0d206b5c3b3648903ef6233d5061d1089']['inspect'] = () => (Inspect_y76) => (__$a__ => `{ ` + `body: ` + Inspect_y76.inspect()(__$a__.body) + ` }`);
Inspect['Response_d206b5c3b3648903ef6233d5061d1089'] = {};
Inspect['Response_d206b5c3b3648903ef6233d5061d1089']['inspect'] = () => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Response" && true) {
    let a0 = __x__.__args[0];
    return `Response(` + Inspect.Record_bodyf_0d206b5c3b3648903ef6233d5061d1089.inspect()(Inspect.Body_d206b5c3b3648903ef6233d5061d1089)(a0) + `)`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
export let get = (url =>  );
export default { get, TextBody, BinaryBody, Response };
// file: /root/project/src/IO.mad
import {} from "./__internals__.mjs"
export let log = (a =>  { console.log(a); return a; } );
export default { log };
// file: /root/project/src/Main.mad
import {} from "./__internals__.mjs"
import W from "./Wish.mjs";
import B from "./Binary.mjs";
import FS from "./FileSystem.mjs";
import Http from "./Http.mjs";
import IO from "./IO.mjs";

let main = (_ => {
    W.fulfill(IO.log)(IO.log)(W.chain(FS.writeFile(`./f.zip`))(W.map(FS.BinaryData)(W.map((response => ((__x__) => {
  if (__x__.__constructor === "Response" && __x__.__args[0].body.__constructor === "BinaryBody" && true) {
    let { body: { __args: [d] } } = __x__.__args[0];
    return d;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(response)))(Http.get(`https://github.com/open-sorcerers/madlib/archive/master.zip`)))));
    return ({ __constructor: "Unit", __args: [] });
});
export default {};
const makeArgs = () => {
  let list = {}
  let start = list
  Object.keys(process.argv.slice(0)).forEach((key) => {
    list = list.n = { v: process.argv[key], n: null }
  }, {})
  return {
    n: start.n.n.n,
    v: start.n.n.v
  }
}
main(makeArgs())
// file: /root/project/src/Wish.mad
import {} from "./__internals__.mjs"
export let Wish = (a => ({ __constructor: "Wish", __args: [ a ] }));
Inspect['Wish_dfea03aabf5b8615791941bb2605337e'] = {};
Inspect['Wish_dfea03aabf5b8615791941bb2605337e']['inspect'] = () => (Inspect_g136) => (Inspect_i138) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let a0 = __x__.__args[0];
    return `Wish(` + Inspect.a_arr_b.inspect()(a0) + `)`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
export let of = (a => Wish((bad => good => good(a))));
export let map = (f => m => Wish((bad => good => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let run = __x__.__args[0];
    return run(bad)((x => good(f(x))));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m))));
export let chain = (f => m => Wish((bad => good => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let run1 = __x__.__args[0];
    return run1(bad)((x => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let run2 = __x__.__args[0];
    return run2(bad)(good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(f(x))));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m))));
export let fulfill = (bad => good => m => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    let run = __x__.__args[0];
    return run(bad)(good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m));
export default { of, map, chain, fulfill, Wish };
