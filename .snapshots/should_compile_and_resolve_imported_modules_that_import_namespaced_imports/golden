// file: /root/project/src/Binary.mad
import {} from "./__internals__.mjs"
export let __69f1c9d46626f6b4732f10b20d210612__Int8Bit = (a => ({ __constructor: "Int8Bit", __args: [ a ] }));
export let __69f1c9d46626f6b4732f10b20d210612__Int16Bit = (a => ({ __constructor: "Int16Bit", __args: [ a ] }));
export let __69f1c9d46626f6b4732f10b20d210612__Int32Bit = (a => ({ __constructor: "Int32Bit", __args: [ a ] }));
export let __69f1c9d46626f6b4732f10b20d210612__Bytes = (a => ({ __constructor: "Bytes", __args: [ a ] }));
export default { __69f1c9d46626f6b4732f10b20d210612__Int8Bit, __69f1c9d46626f6b4732f10b20d210612__Int16Bit, __69f1c9d46626f6b4732f10b20d210612__Int32Bit, __69f1c9d46626f6b4732f10b20d210612__Bytes };
// file: /root/project/src/IO.mad
import {} from "./__internals__.mjs"
export let __ab708a8ef9780ebca91d5ab50beb2d80__log__1 = (a =>  { console.log(a); return a; } );
export default { __ab708a8ef9780ebca91d5ab50beb2d80__log__1 };
// file: /root/project/src/Main.mad
import {} from "./__internals__.mjs"
import { __d206b5c3b3648903ef6233d5061d1089__BinaryBody, __d206b5c3b3648903ef6233d5061d1089__Response } from "./Http.mjs";
import { __ab708a8ef9780ebca91d5ab50beb2d80__log__1 } from "./IO.mjs";

let __8feea6ce806b7cafa9202cfec09ac2f8__main = ( => {
    __W__fulfill(__ab708a8ef9780ebca91d5ab50beb2d80__log__1)(__ab708a8ef9780ebca91d5ab50beb2d80__log__1)(__W__chain(__FS__writeFile(`./f.zip`))(__W__map(__FS__BinaryData)(__W__map(( => ((__x__) => {
  if (__x__.__constructor === "Response" && __x__.__args[0].body.__constructor === "BinaryBody" && true) {
    let { body: { __args: [d] } } = __x__.__args[0];
    return d;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(response)))(__Http__get(`https://github.com/open-sorcerers/madlib/archive/master.zip`)))));
    return ({ __constructor: "Unit", __args: [] });
});
export default {};
const __makeArgs = () => {
  let list = {}
  let start = list
  Object.keys(process.argv.slice(0)).forEach((key) => {
    list = list.n = { v: process.argv[key], n: null }
  }, {})
  return {
    n: start.n.n.n,
    v: start.n.n.v
  }
}
__8feea6ce806b7cafa9202cfec09ac2f8__main(__makeArgs())
