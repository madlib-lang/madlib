// file: /root/project/src/Binary.mad
export const Int8Bit = __curry__((a) => ({ __constructor: "Int8Bit", __args: [ a ] }));
export const Int16Bit = __curry__((a) => ({ __constructor: "Int16Bit", __args: [ a ] }));
export const Int32Bit = __curry__((a) => ({ __constructor: "Int32Bit", __args: [ a ] }));
export const ByteArray = __curry__((a) => ({ __constructor: "ByteArray", __args: [ a ] }));
export default { Int8Bit, Int16Bit, Int32Bit, ByteArray };
// file: /root/project/src/FileSystem.mad
import W from "./Wish.mjs";
import B from "./Binary.mjs";

export const TextData = __curry__((a) => ({ __constructor: "TextData", __args: [ a ] }));
export const BinaryData = __curry__((a) => ({ __constructor: "BinaryData", __args: [ a ] }));
export const writeFile = __curry__((path, d) => );
export default { writeFile, TextData, BinaryData };
// file: /root/project/src/Http.mad
import W from "./Wish.mjs";
import B from "./Binary.mjs";

export const TextBody = __curry__((a) => ({ __constructor: "TextBody", __args: [ a ] }));
export const BinaryBody = __curry__((a) => ({ __constructor: "BinaryBody", __args: [ a ] }));
export const Response = __curry__((a) => ({ __constructor: "Response", __args: [ a ] }));
export const get = __curry__((url) => );
export default { get, TextBody, BinaryBody, Response };
// file: /root/project/src/IO.mad
export const log = __curry__((a) => { console.log(a); return a; });
export default { log };
// file: /root/project/src/Main.mad
import {} from "./__internals__.mjs"
import W from "./Wish.mjs";
import B from "./Binary.mjs";
import FS from "./FileSystem.mjs";
import Http from "./Http.mjs";
import IO from "./IO.mjs";

W.fulfill(IO.log, IO.log)(W.chain(FS.writeFile("./f.zip"))(W.map(FS.BinaryData)(W.map(__curry__((response) => ((__x__) => {
  if (__x__.__constructor === "Response" && __x__.__args[0].body.__constructor === "BinaryBody" && true) {
    const { body: { __args: [d] } } = __x__.__args[0];
    return d;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(response)))(Http.get("https://github.com/open-sorcerers/madlib/archive/master.zip")))));
export default {};
// file: /root/project/src/Wish.mad
export const Wish = __curry__((a) => ({ __constructor: "Wish", __args: [ a ] }));
export const of = __curry__((a) => Wish(__curry__((bad, good) => good(a))));
export const map = __curry__((f, m) => Wish(__curry__((bad, good) => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    const run = __x__.__args[0];
    return run(bad, __curry__((x) => good(f(x))));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(m))));
export const chain = __curry__((f, m) => Wish(__curry__((bad, good) => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    const run1 = __x__.__args[0];
    return run1(bad, __curry__((x) => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    const run2 = __x__.__args[0];
    return run2(bad, good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(f(x))));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(m))));
export const fulfill = __curry__((bad, good, m) => ((__x__) => {
  if (__x__.__constructor === "Wish" && true) {
    const run = __x__.__args[0];
    return run(bad, good);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(m));
export default { of, map, chain, fulfill, Wish };
