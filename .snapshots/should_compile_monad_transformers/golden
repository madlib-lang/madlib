// file: path
export const WriterT = __curry__((a) => ({ __constructor: "WriterT", __args: [ a ] }));
export const Identity = __curry__((a) => ({ __constructor: "Identity", __args: [ a ] }));
export const StateT = __curry__((a) => ({ __constructor: "StateT", __args: [ a ] }));
global.Semigroup = {};
global.Monoid = {};
global.Functor = {};
global.Applicative = {};
global.Monad = {};
global.MonadTrans = {};
global.MonadWriter = {};
global.MonadState = {};
Semigroup['List'] = {
  assoc: __curry__((xs1, xs2) => xs1.concat(xs2))
};
Monoid['List'] = {
  mappend: __curry__((xs1, xs2) => xs1.concat(xs2)),
  mempty: ([])
};
Functor['WriterT'] = {
  map: (Functor_g682) => (__curry__((f, m) => WriterT(Functor_g682.map(__curry__((__x__) => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    const [a,w] = __x__;
    return ([f(a), w]);
  }
  else { console.log('non exhaustive patterns for value: ', __x__.toString()); 
throw 'non exhaustive patterns!'; }
})(__x__)))(runWriterT(m)))))
};
Applicative['WriterT'] = {
  ap: (Semigroup_q640) => ((Monoid_q640) => ((Functor_r641) => ((Applicative_r641) => (__curry__((mf, mm) => WriterT(liftA2(Functor_r641)(Applicative_r641)(__curry__((x1, x2) => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    const [a,w] = __x__;
    return ((__x__) => {
  if (__x__.length === 2 && true && true) {
    const [b,ww] = __x__;
    return ([a(b), Monoid_q640.mappend(w)(ww)]);
  }
  else { console.log('non exhaustive patterns for value: ', __x__.toString()); 
throw 'non exhaustive patterns!'; }
})(x2);
  }
  else { console.log('non exhaustive patterns for value: ', __x__.toString()); 
throw 'non exhaustive patterns!'; }
})(x1)))(runWriterT(mf))(runWriterT(mm)))))))),
  pure: (Semigroup_h657) => ((Monoid_h657) => ((Functor_f655) => ((Applicative_f655) => (__curry__((x) => WriterT(Applicative_f655.pure(([x, Monoid_h657.mempty]))))))))
};
Monad['WriterT'] = {
  chain: (Functor_w594) => ((Applicative_w594) => ((Monad_w594) => ((Semigroup_v593) => ((Monoid_v593) => (__curry__((f, m) => WriterT(Monad_w594.chain(__curry__((__x__) => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    const [a,w] = __x__;
    return Monad_w594.chain(__curry__((__x__) => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    const [b,ww] = __x__;
    return Monad_w594.of(([b, Monoid_v593.mappend(w)(ww)]));
  }
  else { console.log('non exhaustive patterns for value: ', __x__.toString()); 
throw 'non exhaustive patterns!'; }
})(__x__)))(runWriterT(f(a)));
  }
  else { console.log('non exhaustive patterns for value: ', __x__.toString()); 
throw 'non exhaustive patterns!'; }
})(__x__)))(runWriterT(m))))))))),
  of: (Functor_h605) => ((Applicative_h605) => ((Monad_h605) => ((Semigroup_g604) => ((Monoid_g604) => (Applicative.WriterT.pure(Semigroup_g604)(Monoid_g604)(Functor_h605)(Applicative_h605))))))
};
MonadTrans['m_WriterT'] = {
  lift: (Semigroup_e550) => ((Monoid_e550) => ((Functor_c548) => ((Applicative_c548) => ((Monad_c548) => (__curry__((m) => WriterT(Monad_c548.chain(__curry__((a) => Monad_c548.of(([a, Monoid_e550.mempty]))))(m))))))))
};
Functor['Identity'] = {
  map: __curry__((f, m) => Identity(f(runIdentity(m))))
};
Applicative['Identity'] = {
  ap: __curry__((mf, mm) => Identity(runIdentity(mf)(runIdentity(mm)))),
  pure: Identity
};
Monad['Identity'] = {
  chain: __curry__((f, mm) => f(runIdentity(mm))),
  of: Applicative.Identity.pure
};
Functor['StateT'] = {
  map: (Functor_o482) => (__curry__((f, m) => StateT(__curry__((s) => Functor_o482.map(__curry__((__x__) => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    const [a,ss] = __x__;
    return ([f(a), ss]);
  }
  else { console.log('non exhaustive patterns for value: ', __x__.toString()); 
throw 'non exhaustive patterns!'; }
})(__x__)))(runStateT(m)(s))))))
};
Applicative['StateT'] = {
  ap: (Functor_x439) => ((Applicative_x439) => ((Monad_x439) => (__curry__((mf, mm) => StateT(__curry__((s) => Monad_x439.chain(__curry__((__x__) => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    const [f,ss] = __x__;
    return Monad_x439.chain(__curry__((__x__) => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    const [m,sss] = __x__;
    return Monad_x439.of(([f(m), sss]));
  }
  else { console.log('non exhaustive patterns for value: ', __x__.toString()); 
throw 'non exhaustive patterns!'; }
})(__x__)))(runStateT(mm)(ss));
  }
  else { console.log('non exhaustive patterns for value: ', __x__.toString()); 
throw 'non exhaustive patterns!'; }
})(__x__)))(runStateT(mf)(s)))))))),
  pure: (Functor_m454) => ((Applicative_m454) => ((Monad_m454) => (__curry__((a) => StateT(__curry__((s) => Monad_m454.of(([a, s]))))))))
};
Monad['StateT'] = {
  chain: (Functor_p379) => ((Applicative_p379) => ((Monad_p379) => (__curry__((f, m) => StateT(__curry__((s) => Monad_p379.chain(__curry__((__x__) => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    const [a,ss] = __x__;
    return runStateT(f(a))(ss);
  }
  else { console.log('non exhaustive patterns for value: ', __x__.toString()); 
throw 'non exhaustive patterns!'; }
})(__x__)))(runStateT(m)(s)))))))),
  of: (Functor_e394) => ((Applicative_e394) => ((Monad_e394) => (__curry__((a) => StateT(__curry__((s) => Monad_e394.of(([a, s]))))))))
};
MonadTrans['m_StateT'] = {
  lift: (Functor_i346) => ((Applicative_i346) => ((Monad_i346) => (__curry__((m) => StateT(__curry__((s) => Monad_i346.chain(__curry__((a) => Monad_i346.of(([a, s]))))(m)))))))
};
MonadWriter['w_WriterT'] = {
  tell: (Functor_o326) => ((Applicative_o326) => ((Monad_o326) => ((Semigroup_i320) => ((Monoid_i320) => (__curry__((v) => WriterT(Monad_o326.of(([({ __constructor: "Unit", __args: [] }), v])))))))))
};
MonadWriter['w_StateT'] = {
  tell: (Functor_c314) => ((Applicative_c314) => ((Semigroup_v307) => ((Monad_c314) => ((Monoid_v307) => ((MonadWriter_v307_c314) => ((Functor_c314) => ((Applicative_c314) => ((Monad_c314) => ((Semigroup_v307) => ((Monoid_v307) => (__curry__((_P_) => MonadTrans.m_StateT.lift(Functor_c314)(Applicative_c314)(Monad_c314)(MonadWriter_v307_c314.tell(_P_))))))))))))))
};
MonadState['s_StateT'] = {
  get: (Functor_o274) => ((Applicative_o274) => ((Monad_o274) => (StateT(__curry__((s) => Monad_o274.of(([s, s]))))))),
  modify: (Functor_b287) => ((Applicative_b287) => ((Monad_b287) => (__curry__((f) => StateT(__curry__((s) => Monad_b287.of(([({ __constructor: "Unit", __args: [] }), f(s)])))))))),
  put: (Functor_p301) => ((Applicative_p301) => ((Monad_p301) => (__curry__((s) => StateT(__curry__((_) => Monad_p301.of(([({ __constructor: "Unit", __args: [] }), s]))))))))
};
MonadState['s_WriterT'] = {
  get: (Functor_c236) => ((Applicative_c236) => ((Monad_c236) => ((MonadState_b235_c236) => ((Functor_c236) => ((Applicative_c236) => ((Monad_c236) => ((Semigroup_d237) => ((Monoid_d237) => (MonadTrans.m_WriterT.lift(Semigroup_d237)(Monoid_d237)(Functor_c236)(Applicative_c236)(Monad_c236)(MonadState_b235_c236.get)))))))))),
  modify: (Functor_p249) => ((Applicative_p249) => ((Monad_p249) => ((MonadState_o248_p249) => ((Functor_p249) => ((Applicative_p249) => ((Monad_p249) => ((Semigroup_q250) => ((Monoid_q250) => (__curry__((_P_) => MonadTrans.m_WriterT.lift(Semigroup_q250)(Monoid_q250)(Functor_p249)(Applicative_p249)(Monad_p249)(MonadState_o248_p249.modify(_P_)))))))))))),
  put: (Functor_c262) => ((Applicative_c262) => ((Monad_c262) => ((MonadState_v255_c262) => ((Functor_c262) => ((Applicative_c262) => ((Monad_c262) => ((Semigroup_d263) => ((Monoid_d263) => (__curry__((_P_) => MonadTrans.m_WriterT.lift(Semigroup_d263)(Monoid_d263)(Functor_c262)(Applicative_c262)(Monad_c262)(MonadState_v255_c262.put(_P_))))))))))))
};
export const andDo = (Functor_a0) => ((Applicative_a0) => ((Monad_a0) => (__curry__((b, a) => Monad_a0.chain(__curry__((_) => b))(a)))));
export const runWriterT = __curry__((__x__) => ((__x__) => {
  if (__x__.__constructor === "WriterT" && true) {
    const m = __x__.__args[0];
    return m;
  }
  else { console.log('non exhaustive patterns for value: ', __x__.toString()); 
throw 'non exhaustive patterns!'; }
})(__x__));
const liftA2 = (Functor_x23) => ((Applicative_x23) => (__curry__((f, x1, x2) => Applicative_x23.ap(Functor_x23.map(f)(x1))(x2))));
export const runIdentity = __curry__((__x__) => ((__x__) => {
  if (__x__.__constructor === "Identity" && true) {
    const a = __x__.__args[0];
    return a;
  }
  else { console.log('non exhaustive patterns for value: ', __x__.toString()); 
throw 'non exhaustive patterns!'; }
})(__x__));
export const runStateT = __curry__((m) => ((__x__) => {
  if (__x__.__constructor === "StateT" && true) {
    const f = __x__.__args[0];
    return __curry__((a) => f(a));
  }
  else { console.log('non exhaustive patterns for value: ', __x__.toString()); 
throw 'non exhaustive patterns!'; }
})(m));
const hep = (Functor_k62) => ((Applicative_k62) => ((Semigroup_j61) => ((Monad_k62) => ((Monoid_j61) => ((MonadWriter_j61_k62) => (MonadWriter_j61_k62.tell))))));
const sumAndLog = (Functor_o66) => ((Applicative_o66) => ((Monad_o66) => ((MonadWriter_List_o66) => (__curry__((_P_) => Monad_o66.chain(__curry__((x) => andDo(Functor_o66)(Applicative_o66)(Monad_o66)(Monad_o66.of(x))(MonadWriter_List_o66.tell(([`Summed 18`])))))(Monad_o66.chain(__curry__((x) => Monad_o66.of(x + 18)))(Monad_o66.of(_P_))))))));
const runStack = __curry__((x, m) => __curry__((_P_) => runIdentity(runWriterT(__curry__((m) => runStateT(m)(x))(_P_))))(m));
runStack(37)(Monad.StateT.chain(__apMtdDicts__(Functor.WriterT, [Functor.Identity]))(__apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]))(__apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]))(sumAndLog(__apMtdDicts__(Functor.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity])]))(__apMtdDicts__(Applicative.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List])]))(__apMtdDicts__(Monad.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List])]))(__apMtdDicts__(MonadWriter.w_StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), Semigroup.List, __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]), Monoid.List, __apMtdDicts__(MonadWriter.w_WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]), __apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]), Semigroup.List, Monoid.List])))(andDo(__apMtdDicts__(Functor.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity])]))(__apMtdDicts__(Applicative.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List])]))(__apMtdDicts__(Monad.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List])]))(Monad.StateT.of(__apMtdDicts__(Functor.WriterT, [Functor.Identity]))(__apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]))(__apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]))(5))(Monad.StateT.chain(__apMtdDicts__(Functor.WriterT, [Functor.Identity]))(__apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]))(__apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]))(__curry__((_) => hep(__apMtdDicts__(Functor.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity])]))(__apMtdDicts__(Applicative.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List])]))(Semigroup.List)(__apMtdDicts__(Monad.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List])]))(Monoid.List)(__apMtdDicts__(MonadWriter.w_StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), Semigroup.List, __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]), Monoid.List, __apMtdDicts__(MonadWriter.w_WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]), __apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]), Semigroup.List, Monoid.List]))(([`HAP`]))))(Monad.StateT.chain(__apMtdDicts__(Functor.WriterT, [Functor.Identity]))(__apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]))(__apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]))(__curry__((_) => MonadState.s_StateT.put(__apMtdDicts__(Functor.WriterT, [Functor.Identity]))(__apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]))(__apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]))(157)))(Monad.StateT.chain(__apMtdDicts__(Functor.WriterT, [Functor.Identity]))(__apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]))(__apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]))(__curry__((_) => hep(__apMtdDicts__(Functor.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity])]))(__apMtdDicts__(Applicative.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List])]))(Semigroup.List)(__apMtdDicts__(Monad.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List])]))(Monoid.List)(__apMtdDicts__(MonadWriter.w_StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), Semigroup.List, __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]), Monoid.List, __apMtdDicts__(MonadWriter.w_WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]), __apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]), Semigroup.List, Monoid.List]))(([`HIP`]))))(Monad.StateT.chain(__apMtdDicts__(Functor.WriterT, [Functor.Identity]))(__apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]))(__apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]))(__curry__((_) => hep(__apMtdDicts__(Functor.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity])]))(__apMtdDicts__(Applicative.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List])]))(Semigroup.List)(__apMtdDicts__(Monad.StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List])]))(Monoid.List)(__apMtdDicts__(MonadWriter.w_StateT, [__apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), Semigroup.List, __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]), Monoid.List, __apMtdDicts__(MonadWriter.w_WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]), __apMtdDicts__(Functor.WriterT, [Functor.Identity]), __apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]), __apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]), Semigroup.List, Monoid.List]))(([`HOP`]))))(Functor.StateT.map(__apMtdDicts__(Functor.WriterT, [Functor.Identity]))(__curry__((x) => x * 17))(Monad.StateT.chain(__apMtdDicts__(Functor.WriterT, [Functor.Identity]))(__apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]))(__apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]))(__curry__((x) => Monad.StateT.of(__apMtdDicts__(Functor.WriterT, [Functor.Identity]))(__apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]))(__apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]))(29 * x)))(Monad.StateT.of(__apMtdDicts__(Functor.WriterT, [Functor.Identity]))(__apMtdDicts__(Applicative.WriterT, [Semigroup.List, Monoid.List, Functor.Identity, Applicative.Identity]))(__apMtdDicts__(Monad.WriterT, [Functor.Identity, Applicative.Identity, Monad.Identity, Semigroup.List, Monoid.List]))(3))))))))));
export default { andDo, runWriterT, runIdentity, runStateT, WriterT, Identity, StateT };
