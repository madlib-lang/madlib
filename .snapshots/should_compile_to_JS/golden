// file: path
let Just = __curry__((a) => ({ __constructor: "Just", __args: [ a ] }));
let Nothing = ({ __constructor: "Nothing", __args: [  ] });
export let fn = __curry__((b, c) => b + c);
let inc = __curry__((x) => x + 1);
let dec = __curry__((x) => x - 1);
let double = __curry__((x) => x * 2);
let half = __curry__((x) => x / 2);
double(half(3));
__eq__(3, 5);
let response = ({ users: ([]) });
let users = response.users;
let carResponse = ({ cars: ([]) });
let allResponses = ({ ...response, ...carResponse });
((__x__) => {
  if (true && true) {
    let { users: a, cars: cs } = __x__;
    return cs;
  }
  else if (true) {
    return ([]);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(allResponses);
((__x__) => {
  if (typeof __x__ === "number") {
    return 3;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(3);
((__x__) => {
  if (typeof __x__ === "string") {
    return 3;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})("3");
((__x__) => {
  if (typeof __x__ === "boolean") {
    return 3;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(true);
((__x__) => {
  if (__x__ === 3) {
    return 3;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(3);
((__x__) => {
  if (__x__ === "3") {
    return 3;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})("3");
((__x__) => {
  if (__x__ === true) {
    return 3;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(true);
let log = __curry__((a) => { console.log(a); return a; });
(true ? "OK" : "NOT OK");
let mapMaybe = __curry__((f, m) => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let a = __x__.__args[0];
    return Just(f(a));
  }
  else if (__x__.__constructor === "Nothing") {
    return Nothing;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(m));
let might = Just(3);
let q = ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let a = __x__.__args[0];
    return a;
  }
  else if (__x__.__constructor === "Nothing") {
    return 1;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(might);
true && false;
false || true;
false || true && false;
1 > 3;
1 < 3;
1 > 3 && 3 < 1 || true;
1 >= 3;
1 <= 3;
1 >= 3 && 3 <= 1 || true;
!(false);
!(true);
!(false) && !(true);
!(false) || !(true);
let arr = ([1, 2, 3]);
let all = ([ ...arr, 4, 5, 6]);
((__x__) => {
  if (__x__.length === 3 && __x__[0] === 1 && __x__[1] === 2 && __x__[2] === 3) {
    let [,,] = __x__;
    return 1;
  }
  else if (__x__.length === 3 && __x__[0] === 1 && __x__[1] === 2 && true) {
    let [,,n] = __x__;
    return n;
  }
  else if (__x__.length === 2 && true && __x__[1] === 3) {
    let [n,] = __x__;
    return n;
  }
  else if (__x__.length === 3 && true && true && true) {
    let [x1,y1,z1] = __x__;
    return x1 + y1 + z1;
  }
  else if (__x__.length === 0) {
    let [] = __x__;
    return 0;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(([1, 2, 3, 5, 8]));
export let map = __curry__((f, xs) => ((__x__) => {
  if (__x__.length === 3 && true && true && true) {
    let [a,b,c] = __x__;
    return ([f(a),  ...map(f, ([b, c]))]);
  }
  else if (__x__.length === 2 && true && true) {
    let [a,b] = __x__;
    return ([f(a),  ...map(f, ([b]))]);
  }
  else if (__x__.length === 1 && true) {
    let [a] = __x__;
    return ([f(a)]);
  }
  else if (__x__.length === 0) {
    let [] = __x__;
    return ([]);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(xs));
(true ? "ok" : "not ok");
__curry__((x) => x)(__curry__((x) => (__eq__(x, "ok") ? 1 : 10))(__curry__((x) => x)((__eq__(1, 2) ? "ok" : "not ok"))));
(__eq__(1, 2) ? "ok" : "not ok");
((__x__) => {
  if (__x__ === 3) {
    return 48;
  }
  else if (true) {
    let n = __x__;
    return __curry__((x) => x + 1)(1);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(3);
__curry__((x) => x + 1)(((__x__) => {
  if (__x__ === "3") {
    return 48;
  }
  else if (true) {
    let n = __x__;
    return 1;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})("3"));
__curry__((x) => x)(((__x__) => {
  if (__x__.length >= 2 && __x__[0] === 2 && true) {
    let [,...rest] = __x__;
    return rest;
  }
  else if (__x__.length >= 4 && __x__[0] === 1 && __x__[1] === 2 && __x__[2] === 3 && true) {
    let [,,,...rest] = __x__;
    return rest;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(([1, 2, 3, 4, 5])));
((__x__) => {
  if (__x__.name === "Bob") {
    let {  } = __x__;
    return "Bob";
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(({ x: 4, name: "John" }));
let addXAndY = __curry__((r) => ((__x__) => {
  if (true && true) {
    let { y: y, x: x1 } = __x__;
    return x1 + y;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(r));
let fnTCHOU = __curry__((x) => x.a.b.c.d.e);
let tup = ([1, 2, 3]);
__eq__(([1, 2, 3]), ([1, 2, 3]));
((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [a,b] = __x__;
    return a + b;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(([1, 2]));
let fn2 = __curry__((a) => ([a, a]));
let fst = __curry__((tuple) => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [a,] = __x__;
    return a;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(tuple));
let snd = __curry__((tuple) => {
    let b = ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [,b1] = __x__;
    return b1;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(tuple);
    return b;
});
fst(([1, 2]));
snd(([1, 2]));
((__x__) => {
  if (__x__.length === 2 && __x__[0].__constructor === "Just" && true && __x__[1].__constructor === "Just" && true) {
    let [{ __args: [n]},{ __args: [m]}] = __x__;
    return n + m;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(([Just(3), Just(4)]));
export default { fn, map };
