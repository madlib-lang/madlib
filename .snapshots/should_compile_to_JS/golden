// file: Module.mad
import {} from "./__internals__.mjs"
let __568c75136c0c369c440814a7af59434a__Just = (a => ({ __constructor: "Just", __args: [ a ] }));
let __568c75136c0c369c440814a7af59434a__Nothing = ({ __constructor: "Nothing", __args: [  ] });
let __568c75136c0c369c440814a7af59434a__double__2 = (x => (x * 2));
let __568c75136c0c369c440814a7af59434a__half__1 = (x => (x / 2));
let __568c75136c0c369c440814a7af59434a__main = (_ => {
    __568c75136c0c369c440814a7af59434a__double__2(__568c75136c0c369c440814a7af59434a__half__1(3));
    __eq__(3, 5);
    let carResponse = ({ cars: (null) });
    ((__x__) => {
  if (true) {
    let { cars: cs } = __x__;
    return cs;
  }
  else if (true) {
    return (null);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(carResponse);
    ((__x__) => {
  if (__x__ === 3) {
    return 3;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(3);
    ((__x__) => {
  if (__x__ === "3") {
    return 3;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(`3`);
    ((__x__) => {
  if (__x__ === true) {
    return 3;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(true);
    (true ? `OK` : `NOT OK`);
    let might = __568c75136c0c369c440814a7af59434a__Just(3);
    let q = ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let a = __x__.__args[0];
    return a;
  }
  else if (__x__.__constructor === "Nothing") {
    return 1;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(might);
    true && false;
    false || true;
    false || true && false;
    1 > 3;
    1 < 3;
    1 > 3 && 3 < 1 || true;
    1 >= 3;
    1 <= 3;
    1 >= 3 && 3 <= 1 || true;
    !(false);
    !(true);
    !(false) && !(true);
    !(false) || !(true);
    let arr = ({ v: 1, n: { v: 2, n: { v: 3, n: null } } });
    let all = ({ v: 4, n: { v: 5, n: { v: 6, n: arr } } });
    ((__x__) => {
  if (__x__ !== null && __x__.v === 1 && __x__.n !== null && __x__.n.v === 2 && __x__.n.n !== null && __x__.n.n.v === 3 && __x__.n.n.n === null) {
    return 1;
  }
  else if (__x__ !== null && __x__.v === 1 && __x__.n !== null && __x__.n.v === 2 && __x__.n.n !== null && true && __x__.n.n.n === null) {
    let { n: { n: { v: n } } } = __x__;
    return n;
  }
  else if (__x__ !== null && true && __x__.n !== null && __x__.n.v === 3 && __x__.n.n === null) {
    let { v: n,  } = __x__;
    return n;
  }
  else if (__x__ !== null && true && __x__.n !== null && true && __x__.n.n !== null && true && __x__.n.n.n === null) {
    let { v: x1, n: { v: y1, n: { v: z1 } } } = __x__;
    return ((x1 + y1) + z1);
  }
  else if (__x__ === null) {
    return 0;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(({ v: 1, n: { v: 2, n: { v: 3, n: { v: 5, n: { v: 8, n: null } } } } }));
    (true ? `ok` : `not ok`);
    (x => (__eq__(x, `ok`) ? 1 : 10))((x => x)((__eq__(1, 2) ? `ok` : `not ok`)));
    (__eq__(1, 2) ? `ok` : `not ok`);
    ((__x__) => {
  if (__x__ === 3) {
    return 48;
  }
  else if (true) {
    let n = __x__;
    return (1 + 1);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(3);
    (((__x__) => {
  if (__x__ === "3") {
    return 48;
  }
  else if (true) {
    let n = __x__;
    return 1;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(`3`) + 1);
    ((__x__) => {
  if (__x__ !== null && __x__.v === 2 && true) {
    let { n: rest } = __x__;
    return rest;
  }
  else if (__x__ !== null && __x__.v === 1 && __x__.n !== null && __x__.n.v === 2 && __x__.n.n !== null && __x__.n.n.v === 3 && true) {
    let { n: { n: { n: rest } } } = __x__;
    return rest;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(({ v: 1, n: { v: 2, n: { v: 3, n: { v: 4, n: { v: 5, n: null } } } } }));
    ((__x__) => {
  if (__x__.name === "Bob") {
    let {  } = __x__;
    return `Bob`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(({ x: 4, name: `John` }));
    let tup = ([1, 2, 3]);
    __eq__(([1, 2, 3]), ([1, 2, 3]));
    ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [a,b] = __x__;
    return (a + b);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(([1, 2]));
    __568c75136c0c369c440814a7af59434a__fst__3(([1, 2]));
    __568c75136c0c369c440814a7af59434a__snd__4(([1, 2]));
    return ({ __constructor: "Unit", __args: [] });
});
let __568c75136c0c369c440814a7af59434a__fst__3 = (tuple => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [a,] = __x__;
    return a;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(tuple));
let __568c75136c0c369c440814a7af59434a__snd__4 = (tuple => {
    let b = ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [,b1] = __x__;
    return b1;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(tuple);
    return b;
});
export default {};
const __makeArgs = () => {
  let list = {}
  let start = list
  Object.keys(process.argv.slice(0)).forEach((key) => {
    list = list.n = { v: process.argv[key], n: null }
  }, {})
  return {
    n: start.n.n.n,
    v: start.n.n.v
  }
}
__568c75136c0c369c440814a7af59434a__main(__makeArgs())
