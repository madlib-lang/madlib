// file: path
let Just = (a => ({ __constructor: "Just", __args: [ a ] }));
let Nothing = ({ __constructor: "Nothing", __args: [  ] });
Inspect['Maybe'] = {};
Inspect['Maybe']['inspect'] = () => (Inspect_v21) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let a0 = __x__.__args[0];
    return `Just(` + Inspect_v21.inspect()(a0) + `)`;
  }
  else if (__x__.__constructor === "Nothing") {
    return `Nothing`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
Inspect['Record_carsa'] = {};
Inspect['Record_carsa']['inspect'] = () => (Inspect_k36) => (__$a__ => `{ ` + `cars: ` + Inspect_k36.inspect()(__$a__.cars) + ` }`);
Inspect['Record_nameb_xa'] = {};
Inspect['Record_nameb_xa']['inspect'] = () => (Inspect_u46) => (Inspect_b53) => (__$a__ => `{ ` + `x: ` + Inspect_u46.inspect()(__$a__.x) + `, ` + `name: ` + Inspect_b53.inspect()(__$a__.name) + ` }`);
export let fn = (b => c => b + c);
let inc = (x => x + 1);
let dec = (x => x - 1);
let double = (x => x * 2);
let half = (x => x / 2);
double(half(3));
__eq__(3, 5);
let carResponse = ({ cars: (null) });
((__x__) => {
  if (true) {
    let { cars: cs } = __x__;
    return cs;
  }
  else if (true) {
    return (null);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(carResponse);
((__x__) => {
  if (__x__ === 3) {
    return 3;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(3);
((__x__) => {
  if (__x__ === "3") {
    return 3;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(`3`);
((__x__) => {
  if (__x__ === true) {
    return 3;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(true);
let log = (a =>  { console.log(a); return a; } );
(true ? `OK` : `NOT OK`);
let mapMaybe = (f => m => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let a = __x__.__args[0];
    return Just(f(a));
  }
  else if (__x__.__constructor === "Nothing") {
    return Nothing;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m));
let might = Just(3);
let q = ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let a = __x__.__args[0];
    return a;
  }
  else if (__x__.__constructor === "Nothing") {
    return 1;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(might);
true && false;
false || true;
false || true && false;
1 > 3;
1 < 3;
1 > 3 && 3 < 1 || true;
1 >= 3;
1 <= 3;
1 >= 3 && 3 <= 1 || true;
!(false);
!(true);
!(false) && !(true);
!(false) || !(true);
let arr = ({ v: 1, n: { v: 2, n: { v: 3, n: null } } });
let all = ({ v: 4, n: { v: 5, n: { v: 6, n: arr } } });
((__x__) => {
  if (__x__ !== null && __x__.v === 1 && __x__.n !== null && __x__.n.v === 2 && __x__.n.n !== null && __x__.n.n.v === 3 && __x__.n.n.n === null) {
    return 1;
  }
  else if (__x__ !== null && __x__.v === 1 && __x__.n !== null && __x__.n.v === 2 && __x__.n.n !== null && true && __x__.n.n.n === null) {
    let { n: { n: { v: n } } } = __x__;
    return n;
  }
  else if (__x__ !== null && true && __x__.n !== null && __x__.n.v === 3 && __x__.n.n === null) {
    let { v: n,  } = __x__;
    return n;
  }
  else if (__x__ !== null && true && __x__.n !== null && true && __x__.n.n !== null && true && __x__.n.n.n === null) {
    let { v: x1, n: { v: y1, n: { v: z1 } } } = __x__;
    return x1 + y1 + z1;
  }
  else if (__x__ === null) {
    return 0;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(({ v: 1, n: { v: 2, n: { v: 3, n: { v: 5, n: { v: 8, n: null } } } } }));
export let map = (f => xs => {
    let $_result_;
    let $_continue_ = true;
    let $_start_ = {};
    let $_end_ = $_start_;
    let $$f = f;
    let $$xs = xs;

    while($_continue_) {
      let $f = $$f;
      let $xs = $$xs;

        $_continue_ = false;
        ((__x__) => {
  if (__x__ !== null && true && __x__.n !== null && true && __x__.n.n !== null && true && __x__.n.n.n === null) {
    let { v: a, n: { v: b, n: { v: c } } } = __x__;
    ($_end_ = $_end_.n = { v: $f(a) }, $$f = $f, $$xs = ({ v: b, n: { v: c, n: null } }), $_continue_ = true);
  }
  else if (__x__ !== null && true && __x__.n !== null && true && __x__.n.n === null) {
    let { v: a, n: { v: b } } = __x__;
    ($_end_ = $_end_.n = { v: $f(a) }, $$f = $f, $$xs = ({ v: b, n: null }), $_continue_ = true);
  }
  else if (__x__ !== null && true && __x__.n === null) {
    let { v: a } = __x__;
    ($_end_.n = ({ v: $f(a), n: null }), $_result_ = $_start_.n);
  }
  else if (__x__ === null) {
    ($_end_.n = (null), $_result_ = $_start_.n);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})($xs)
    }
    return $_result_;
});
(true ? `ok` : `not ok`);
(x => x)((x => (__eq__(x, `ok`) ? 1 : 10))((x => x)((__eq__(1, 2) ? `ok` : `not ok`))));
(__eq__(1, 2) ? `ok` : `not ok`);
((__x__) => {
  if (__x__ === 3) {
    return 48;
  }
  else if (true) {
    let n = __x__;
    return (x => x + 1)(1);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(3);
(x => x + 1)(((__x__) => {
  if (__x__ === "3") {
    return 48;
  }
  else if (true) {
    let n = __x__;
    return 1;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(`3`));
(x => x)(((__x__) => {
  if (__x__ !== null && __x__.v === 2 && true) {
    let { n: rest } = __x__;
    return rest;
  }
  else if (__x__ !== null && __x__.v === 1 && __x__.n !== null && __x__.n.v === 2 && __x__.n.n !== null && __x__.n.n.v === 3 && true) {
    let { n: { n: { n: rest } } } = __x__;
    return rest;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(({ v: 1, n: { v: 2, n: { v: 3, n: { v: 4, n: { v: 5, n: null } } } } })));
((__x__) => {
  if (__x__.name === "Bob") {
    let {  } = __x__;
    return `Bob`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(({ x: 4, name: `John` }));
let addXAndY = (r => ((__x__) => {
  if (true && true) {
    let { y: y, x: x1 } = __x__;
    return x1 + y;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(r));
let fnTCHOU = (x => x.a.b.c.d.e);
let tup = ([1, 2, 3]);
__eq__(([1, 2, 3]), ([1, 2, 3]));
((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [a,b] = __x__;
    return a + b;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(([1, 2]));
let fn2 = (a => ([a, a]));
let fst = (tuple => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [a,] = __x__;
    return a;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(tuple));
let snd = (tuple => {
    let b = ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [,b1] = __x__;
    return b1;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(tuple);
    return b;
});
fst(([1, 2]));
snd(([1, 2]));
((__x__) => {
  if (__x__.length === 2 && __x__[0].__constructor === "Just" && true && __x__[1].__constructor === "Just" && true) {
    let [{ __args: [n]},{ __args: [m]}] = __x__;
    return n + m;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(([Just(3), Just(4)]));
export default { fn, map };
