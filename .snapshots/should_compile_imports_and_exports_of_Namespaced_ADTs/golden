// file: ./ADTs
export let Just = (a => ({ __constructor: "Just", __args: [ a ] }));
export let Nothing = ({ __constructor: "Nothing", __args: [  ] });
let NotExportedADT = (a => ({ __constructor: "NotExportedADT", __args: [ a ] }));
let StillNotExported = ({ __constructor: "StillNotExported", __args: [  ] });
Inspect['Maybe'] = {};
Inspect['Maybe']['inspect'] = () => (Inspect_d3) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let a0 = __x__.__args[0];
    return `Just(${Inspect_d3.inspect()(a0)})`;
  }
  else if (__x__.__constructor === "Nothing") {
    return "Nothing";
  }
  else if (true) {
    return "Unknown";
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__))
Inspect['NotExportedADT'] = {};
Inspect['NotExportedADT']['inspect'] = () => (Inspect_p15) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "NotExportedADT" && true) {
    let a0 = __x__.__args[0];
    return `NotExportedADT(${Inspect_p15.inspect()(a0)})`;
  }
  else if (__x__.__constructor === "StillNotExported") {
    return "StillNotExported";
  }
  else if (true) {
    return "Unknown";
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__))
export default { Just, Nothing };
// file: ./Module
import {} from "./__internals__.mjs"
import ADTs from "./ADTs.mjs";

ADTs.Just(3);
ADTs.Nothing;
export let fn = (m => m);
export let fn2 = (m => ((__x__) => {
  if (__x__.__constructor === "Just" && __x__.__args[0].__constructor === "Just" && true) {
    let n = __x__.__args[0].__args[0];
    return n;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m));
export default { fn, fn2 };
