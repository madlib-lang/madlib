// file: ./ADTs.mad
import {} from "./__internals__.mjs"
export let Just = (a => ({ __constructor: "Just", __args: [ a ] }));
export let Nothing = ({ __constructor: "Nothing", __args: [  ] });
let NotExportedADT = (a => ({ __constructor: "NotExportedADT", __args: [ a ] }));
let StillNotExported = ({ __constructor: "StillNotExported", __args: [  ] });
Inspect['Maybe_c5af8304491813973bc06c3e9cfa902b'] = {};
Inspect['Maybe_c5af8304491813973bc06c3e9cfa902b']['inspect'] = () => (Inspect_t45) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    let a0 = __x__.__args[0];
    return `Just(` + Inspect_t45.inspect()(a0) + `)`;
  }
  else if (__x__.__constructor === "Nothing") {
    return `Nothing`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
Inspect['NotExportedADT_c5af8304491813973bc06c3e9cfa902b'] = {};
Inspect['NotExportedADT_c5af8304491813973bc06c3e9cfa902b']['inspect'] = () => (Inspect_f57) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "NotExportedADT" && true) {
    let a0 = __x__.__args[0];
    return `NotExportedADT(` + Inspect_f57.inspect()(a0) + `)`;
  }
  else if (__x__.__constructor === "StillNotExported") {
    return `StillNotExported`;
  }
  else if (true) {
    return `Unknown`;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__));
export default { Just, Nothing };
// file: ./ModuleB.mad
import {} from "./__internals__.mjs"
import ADTs from "./ADTs.mjs";

let main = (_ => {
    ADTs.Just(3);
    ADTs.Nothing;
    return ({ __constructor: "Unit", __args: [] });
});
export let fn = (m => m);
export let fn2 = (m => ((__x__) => {
  if (__x__.__constructor === "Just" && __x__.__args[0].__constructor === "Just" && true) {
    let n = __x__.__args[0].__args[0];
    return n;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m));
export default { fn, fn2 };
const makeArgs = () => {
  let list = {}
  let start = list
  Object.keys(process.argv.slice(0)).forEach((key) => {
    list = list.n = { v: process.argv[key], n: null }
  }, {})
  return {
    n: start.n.n.n,
    v: start.n.n.v
  }
}
main(makeArgs())
