// file: path
export let WriterT = (a => ({ __constructor: "WriterT", __args: [ a ] }));
export let Identity = (a => ({ __constructor: "Identity", __args: [ a ] }));
export let StateT = (a => ({ __constructor: "StateT", __args: [ a ] }));
global.Ι6 = {};
global.Ι5 = {};
global.Ι3 = {};
global.Ι2 = {};
global.Ι1 = {};
global.Ι8 = {};
global.Ι4 = {};
global.Ι7 = {};
Ι9['τ11'] = {};
Ι9['τ11']['inspect'] = () => (Ι9τ15) => (Ι9τ17) => (Ι9τ16) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "WriterT" && true) {
    let a0 = __x__.__args[0];
    return `WriterT(${Ι9τ15.inspect()(a0)})`;
  }
  else if (true) {
    return "Unknown";
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__))
Ι9['τ9'] = {};
Ι9['τ9']['inspect'] = () => (Ι9τ18) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "Identity" && true) {
    let a0 = __x__.__args[0];
    return `Identity(${Ι9τ18.inspect()(a0)})`;
  }
  else if (true) {
    return "Unknown";
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__))
Ι9['τ8'] = {};
Ι9['τ8']['inspect'] = () => (Ι9τ22) => (Ι9τ21) => (Ι9τ20) => (__$a__ => ((__x__) => {
  if (__x__.__constructor === "StateT" && true) {
    let a0 = __x__.__args[0];
    return `StateT(${Ι9.τ19.inspect()(a0)})`;
  }
  else if (true) {
    return "Unknown";
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__$a__))
Ι6['τ10'] = {};
Ι6['τ10']['assoc'] = () => (xs1 => xs2 =>  xs1.concat(xs2) );
Ι5['τ10'] = {};
Ι5['τ10']['mappend'] = () => (xs1 => xs2 =>  xs1.concat(xs2) );
Ι5['τ10']['mempty'] = () => ([]);
Ι3['τ11'] = {};
Ι3['τ11']['map'] = () => (Ι3τ23) => (f => m => WriterT(Ι3τ23.map()((__x__ => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [a,w] = __x__;
    return ([f(a), w]);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__)))(runWriterT(m))))
Ι2['τ11'] = {};
Ι2['τ11']['ap'] = () => (Ι6τ25) => (Ι5τ25) => (Ι3τ24) => (Ι2τ24) => (mf => mm => WriterT(liftA2(Ι2τ24)((x1 => x2 => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [a,w] = __x__;
    return ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [b,ww] = __x__;
    return ([a(b), Ι5τ25.mappend()(w)(ww)]);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(x2);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(x1)))(runWriterT(mf))(runWriterT(mm))))
Ι2['τ11']['pure'] = () => (Ι6τ27) => (Ι5τ27) => (Ι3τ26) => (Ι2τ26) => (x => WriterT(Ι2τ26.pure()(([x, Ι5τ27.mempty()]))))
Ι1['τ11'] = {};
Ι1['τ11']['chain'] = () => (Ι3τ28) => (Ι2τ28) => (Ι1τ28) => (Ι6τ29) => (Ι5τ29) => (f => m => WriterT(Ι1τ28.chain()((__x__ => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [a,w] = __x__;
    return Ι1τ28.chain()((__x__ => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [b,ww] = __x__;
    return Ι1τ28.of()(([b, Ι5τ29.mappend()(w)(ww)]));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__)))(runWriterT(f(a)));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__)))(runWriterT(m))))
Ι1['τ11']['of'] = () => (Ι3τ30) => (Ι2τ30) => (Ι1τ30) => (Ι6τ31) => (Ι5τ31) => Ι2.τ11.pure()(Ι6τ31)(Ι5τ31)(Ι3τ30)(Ι2τ30)
Ι8['τ32'] = {};
Ι8['τ32']['lift'] = () => (Ι6τ34) => (Ι5τ34) => (Ι3τ33) => (Ι2τ33) => (Ι1τ33) => (m => WriterT(Ι1τ33.chain()((a => Ι1τ33.of()(([a, Ι5τ34.mempty()]))))(m)))
Ι3['τ9'] = {};
Ι3['τ9']['map'] = () => (f => m => Identity(f(runIdentity(m))));
Ι2['τ9'] = {};
Ι2['τ9']['ap'] = () => (mf => mm => Identity(runIdentity(mf)(runIdentity(mm))));
Ι2['τ9']['pure'] = () => Identity;
Ι1['τ9'] = {};
Ι1['τ9']['chain'] = () => (f => mm => f(runIdentity(mm)));
Ι1['τ9']['of'] = () => Ι2.τ9.pure();
Ι3['τ8'] = {};
Ι3['τ8']['map'] = () => (Ι3τ35) => (f => m => StateT((s => Ι3τ35.map()((__x__ => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [a,ss] = __x__;
    return ([f(a), ss]);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__)))(runStateT(m)(s)))))
Ι2['τ8'] = {};
Ι2['τ8']['ap'] = () => (Ι3τ36) => (Ι2τ36) => (Ι1τ36) => (mf => mm => StateT((s => Ι1τ36.chain()((__x__ => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [f,ss] = __x__;
    return Ι1τ36.chain()((__x__ => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [m,sss] = __x__;
    return Ι1τ36.of()(([f(m), sss]));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__)))(runStateT(mm)(ss));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__)))(runStateT(mf)(s)))))
Ι2['τ8']['pure'] = () => (Ι3τ37) => (Ι2τ37) => (Ι1τ37) => (a => StateT((s => Ι1τ37.of()(([a, s])))))
Ι1['τ8'] = {};
Ι1['τ8']['chain'] = () => (Ι3τ38) => (Ι2τ38) => (Ι1τ38) => (f => m => StateT((s => Ι1τ38.chain()((__x__ => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    let [a,ss] = __x__;
    return runStateT(f(a))(ss);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__)))(runStateT(m)(s)))))
Ι1['τ8']['of'] = () => (Ι3τ39) => (Ι2τ39) => (Ι1τ39) => (a => StateT((s => Ι1τ39.of()(([a, s])))))
Ι8['τ40'] = {};
Ι8['τ40']['lift'] = () => (Ι3τ41) => (Ι2τ41) => (Ι1τ41) => (m => StateT((s => Ι1τ41.chain()((a => Ι1τ41.of()(([a, s]))))(m))))
Ι4['τ12'] = {};
Ι4['τ12']['tell'] = () => (Ι3τ42) => (Ι2τ42) => (Ι1τ42) => (Ι6τ43) => (Ι5τ43) => (v => WriterT(Ι1τ42.of()(([({ __constructor: "Unit", __args: [] }), v]))))
Ι4['τ13'] = {};
Ι4['τ13']['tell'] = () => (Ι3τ44) => (Ι2τ44) => (Ι6τ46) => (Ι1τ44) => (Ι5τ46) => (Ι4τ45) => (Ι3τ44) => (Ι2τ44) => (Ι1τ44) => (Ι6τ46) => (Ι5τ46) => (_P_ => Ι8.τ40.lift()(Ι3τ44)(Ι2τ44)(Ι1τ44)(Ι4τ45.tell()(_P_)))
Ι7['τ14'] = {};
Ι7['τ14']['get'] = () => (Ι3τ47) => (Ι2τ47) => (Ι1τ47) => StateT((s => Ι1τ47.of()(([s, s]))))
Ι7['τ14']['modify'] = () => (Ι3τ48) => (Ι2τ48) => (Ι1τ48) => (f => StateT((s => Ι1τ48.of()(([({ __constructor: "Unit", __args: [] }), f(s)])))))
Ι7['τ14']['put'] = () => (Ι3τ49) => (Ι2τ49) => (Ι1τ49) => (s => StateT((_ => Ι1τ49.of()(([({ __constructor: "Unit", __args: [] }), s])))))
Ι7['τ50'] = {};
Ι7['τ50']['get'] = () => (Ι3τ51) => (Ι2τ51) => (Ι1τ51) => (Ι7τ53) => (Ι3τ51) => (Ι2τ51) => (Ι1τ51) => (Ι6τ52) => (Ι5τ52) => Ι8.τ32.lift()(Ι6τ52)(Ι5τ52)(Ι3τ51)(Ι2τ51)(Ι1τ51)(Ι7τ53.get())
Ι7['τ50']['modify'] = () => (Ι3τ54) => (Ι2τ54) => (Ι1τ54) => (Ι7τ56) => (Ι3τ54) => (Ι2τ54) => (Ι1τ54) => (Ι6τ55) => (Ι5τ55) => (_P_ => Ι8.τ32.lift()(Ι6τ55)(Ι5τ55)(Ι3τ54)(Ι2τ54)(Ι1τ54)(Ι7τ56.modify()(_P_)))
Ι7['τ50']['put'] = () => (Ι3τ57) => (Ι2τ57) => (Ι1τ57) => (Ι7τ59) => (Ι3τ57) => (Ι2τ57) => (Ι1τ57) => (Ι6τ58) => (Ι5τ58) => (_P_ => Ι8.τ32.lift()(Ι6τ58)(Ι5τ58)(Ι3τ57)(Ι2τ57)(Ι1τ57)(Ι7τ59.put()(_P_)))
export let andDo = (Ι3τ1) => (Ι2τ1) => (Ι1τ1) => (b => a => Ι1τ1.chain()((_ => b))(a));
export let runWriterT = (__x__ => ((__x__) => {
  if (__x__.__constructor === "WriterT" && true) {
    let m = __x__.__args[0];
    return m;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__));
let liftA2 = (Ι3τ2) => (Ι2τ2) => (f => x1 => x2 => Ι2τ2.ap()(Ι3τ2.map()(f)(x1))(x2));
export let runIdentity = (__x__ => ((__x__) => {
  if (__x__.__constructor === "Identity" && true) {
    let a = __x__.__args[0];
    return a;
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__x__));
export let runStateT = (m => ((__x__) => {
  if (__x__.__constructor === "StateT" && true) {
    let f = __x__.__args[0];
    return (a => f(a));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(m));
let hep = (Ι3τ5) => (Ι2τ5) => (Ι6τ4) => (Ι1τ5) => (Ι5τ4) => (Ι4τ3) => Ι4τ3.tell();
let sumAndLog = (Ι3τ6) => (Ι2τ6) => (Ι1τ6) => (Ι4τ7) => (_P_ => Ι1τ6.chain()((x => andDo(Ι3τ6)(Ι2τ6)(Ι1τ6)(Ι1τ6.of()(x))(Ι4τ7.tell()((['Summed 18'])))))(Ι1τ6.chain()((x => Ι1τ6.of()(x + 18)))(Ι1τ6.of()(_P_))));
let runStack = (x => _P_ => runIdentity(runWriterT((m => runStateT(m)(x))(_P_))));
runStack(37)(Ι1.τ8.chain()(λ3(Ι3.τ11, [Ι3.τ9]))(λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]))(λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]))(sumAndLog(λ3(Ι3.τ8, [λ3(Ι3.τ11, [Ι3.τ9])]))(λ3(Ι2.τ8, [λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10])]))(λ3(Ι1.τ8, [λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10])]))(λ3(Ι4.τ13, [λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), Ι6.τ10, λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]), Ι5.τ10, λ3(Ι4.τ12, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]), λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]), Ι6.τ10, Ι5.τ10])))(andDo(λ3(Ι3.τ8, [λ3(Ι3.τ11, [Ι3.τ9])]))(λ3(Ι2.τ8, [λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10])]))(λ3(Ι1.τ8, [λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10])]))(Ι1.τ8.of()(λ3(Ι3.τ11, [Ι3.τ9]))(λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]))(λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]))(5))(Ι1.τ8.chain()(λ3(Ι3.τ11, [Ι3.τ9]))(λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]))(λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]))((_ => hep(λ3(Ι3.τ8, [λ3(Ι3.τ11, [Ι3.τ9])]))(λ3(Ι2.τ8, [λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10])]))(Ι6.τ10)(λ3(Ι1.τ8, [λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10])]))(Ι5.τ10)(λ3(Ι4.τ13, [λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), Ι6.τ10, λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]), Ι5.τ10, λ3(Ι4.τ12, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]), λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]), Ι6.τ10, Ι5.τ10]))((['HAP']))))(Ι1.τ8.chain()(λ3(Ι3.τ11, [Ι3.τ9]))(λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]))(λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]))((_ => Ι7.τ14.put()(λ3(Ι3.τ11, [Ι3.τ9]))(λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]))(λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]))(157)))(Ι1.τ8.chain()(λ3(Ι3.τ11, [Ι3.τ9]))(λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]))(λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]))((_ => hep(λ3(Ι3.τ8, [λ3(Ι3.τ11, [Ι3.τ9])]))(λ3(Ι2.τ8, [λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10])]))(Ι6.τ10)(λ3(Ι1.τ8, [λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10])]))(Ι5.τ10)(λ3(Ι4.τ13, [λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), Ι6.τ10, λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]), Ι5.τ10, λ3(Ι4.τ12, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]), λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]), Ι6.τ10, Ι5.τ10]))((['HIP']))))(Ι1.τ8.chain()(λ3(Ι3.τ11, [Ι3.τ9]))(λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]))(λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]))((_ => hep(λ3(Ι3.τ8, [λ3(Ι3.τ11, [Ι3.τ9])]))(λ3(Ι2.τ8, [λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10])]))(Ι6.τ10)(λ3(Ι1.τ8, [λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10])]))(Ι5.τ10)(λ3(Ι4.τ13, [λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), Ι6.τ10, λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]), Ι5.τ10, λ3(Ι4.τ12, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]), λ3(Ι3.τ11, [Ι3.τ9]), λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]), λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]), Ι6.τ10, Ι5.τ10]))((['HOP']))))(Ι3.τ8.map()(λ3(Ι3.τ11, [Ι3.τ9]))((x => x * 17))(Ι1.τ8.chain()(λ3(Ι3.τ11, [Ι3.τ9]))(λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]))(λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]))((x => Ι1.τ8.of()(λ3(Ι3.τ11, [Ι3.τ9]))(λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]))(λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]))(29 * x)))(Ι1.τ8.of()(λ3(Ι3.τ11, [Ι3.τ9]))(λ3(Ι2.τ11, [Ι6.τ10, Ι5.τ10, Ι3.τ9, Ι2.τ9]))(λ3(Ι1.τ11, [Ι3.τ9, Ι2.τ9, Ι1.τ9, Ι6.τ10, Ι5.τ10]))(3))))))))));
export default { andDo, runWriterT, runIdentity, runStateT, WriterT, Identity, StateT };
