// file: Module.mad
import {} from "./__internals__.mjs"
let Just = (a => ({ __constructor: "Just", __args: [ a ] }));
let Nothing = ({ __constructor: "Nothing", __args: [  ] });
Inspect['Maybe_568c75136c0c369c440814a7af59434a'] = {};
Inspect['Maybe_568c75136c0c369c440814a7af59434a']['inspect'] = () => (Inspect_y284) => __hpFnWrap('Module.mad', 0, 'inspect')((__$a__ => ((__x__) => {
  if (__hp('Module.mad', 'line', 0, 0) || __x__.__constructor === "Just" && true) {
    let a0 = __x__.__args[0];
    return __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, `Just(`)) + __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, Inspect_y284.inspect())(__hpLineWrap('Module.mad', 0, a0)))) + __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, `)`));
  }
  else if (__hp('Module.mad', 'line', 0, 0) || __x__.__constructor === "Nothing") {
    return __hpLineWrap('Module.mad', 0, `Nothing`);
  }
  else if (__hp('Module.mad', 'line', 0, 0) || true) {
    return __hpLineWrap('Module.mad', 0, `Unknown`);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('Module.mad', 0, __$a__))));
Inspect['Record_carsf_0568c75136c0c369c440814a7af59434a'] = {};
Inspect['Record_carsf_0568c75136c0c369c440814a7af59434a']['inspect'] = () => (Inspect_n299) => __hpFnWrap('Module.mad', 0, 'inspect')((__$a__ => __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, `{ `)) + __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, `cars: `)) + __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, Inspect_n299.inspect())(__hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, __$a__).cars))))) + __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, ` }`))));
Inspect['Record_namef_0568c75136c0c369c440814a7af59434a_xf_1568c75136c0c369c440814a7af59434a'] = {};
Inspect['Record_namef_0568c75136c0c369c440814a7af59434a_xf_1568c75136c0c369c440814a7af59434a']['inspect'] = () => (Inspect_e316) => (Inspect_x309) => __hpFnWrap('Module.mad', 0, 'inspect')((__$a__ => __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, `{ `)) + __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, `name: `)) + __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, Inspect_x309.inspect())(__hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, __$a__).name))))) + __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, `, `)) + __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, `x: `)) + __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, Inspect_e316.inspect())(__hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, __$a__).x))))) + __hpLineWrap('Module.mad', 0, __hpLineWrap('Module.mad', 0, ` }`)))));
export let fn = __hpFnWrap('Module.mad', 1, 'fn')((b => c => __hpLineWrap('Module.mad', 1, __hpLineWrap('Module.mad', 1, b)) + __hpLineWrap('Module.mad', 1, __hpLineWrap('Module.mad', 1, c))));
let inc = __hpFnWrap('Module.mad', 3, 'inc')((x => __hpLineWrap('Module.mad', 3, __hpLineWrap('Module.mad', 3, x)) + __hpLineWrap('Module.mad', 3, __hpLineWrap('Module.mad', 3, 1))));
let dec = __hpFnWrap('Module.mad', 5, 'dec')((x => __hpLineWrap('Module.mad', 5, __hpLineWrap('Module.mad', 5, x)) - __hpLineWrap('Module.mad', 5, __hpLineWrap('Module.mad', 5, 1))));
let double = __hpFnWrap('Module.mad', 6, 'double')((x => __hpLineWrap('Module.mad', 7, __hpLineWrap('Module.mad', 7, x)) * __hpLineWrap('Module.mad', 7, __hpLineWrap('Module.mad', 7, 2))));
let half = __hpFnWrap('Module.mad', 9, 'half')((x => __hpLineWrap('Module.mad', 9, __hpLineWrap('Module.mad', 9, x)) / __hpLineWrap('Module.mad', 9, __hpLineWrap('Module.mad', 9, 2))));
let main = ( => {
    __hpLineWrap('Module.mad', 12, double)(__hpLineWrap('Module.mad', 12, half)(__hpLineWrap('Module.mad', 12, 3)));
    __eq__(__hpLineWrap('Module.mad', 13, __hpLineWrap('Module.mad', 13, 3)), __hpLineWrap('Module.mad', 13, __hpLineWrap('Module.mad', 13, 5)));
    let carResponse = ({ cars: __hpLineWrap('Module.mad', 14, (null)) });
    ((__x__) => {
  if (__hp('Module.mad', 'line', 16, 16) || true) {
    let { cars: cs } = __x__;
    return __hpLineWrap('Module.mad', 16, cs);
  }
  else if (__hp('Module.mad', 'line', 17, 17) || true) {
    return (null);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('Module.mad', 15, carResponse));
    ((__x__) => {
  if (__hp('Module.mad', 'line', 20, 20) || __x__ === 3) {
    return __hpLineWrap('Module.mad', 20, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('Module.mad', 19, 3));
    ((__x__) => {
  if (__hp('Module.mad', 'line', 23, 23) || __x__ === "3") {
    return __hpLineWrap('Module.mad', 23, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('Module.mad', 22, `3`));
    ((__x__) => {
  if (__hp('Module.mad', 'line', 26, 26) || __x__ === true) {
    return __hpLineWrap('Module.mad', 26, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('Module.mad', 25, true));
    (__hpLineWrap('Module.mad', 28, true) ? __hpLineWrap('Module.mad', 28, `OK`) : __hpLineWrap('Module.mad', 28, `NOT OK`));
    let might = __hpLineWrap('Module.mad', 29, Just)(__hpLineWrap('Module.mad', 29, 3));
    let q = ((__x__) => {
  if (__hp('Module.mad', 'line', 31, 31) || __x__.__constructor === "Just" && true) {
    let a = __x__.__args[0];
    return __hpLineWrap('Module.mad', 31, a);
  }
  else if (__hp('Module.mad', 'line', 32, 32) || __x__.__constructor === "Nothing") {
    return __hpLineWrap('Module.mad', 32, 1);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('Module.mad', 30, might));
    __hpLineWrap('Module.mad', 34, __hpLineWrap('Module.mad', 34, true)) && __hpLineWrap('Module.mad', 34, __hpLineWrap('Module.mad', 34, false));
    __hpLineWrap('Module.mad', 35, __hpLineWrap('Module.mad', 35, false)) || __hpLineWrap('Module.mad', 35, __hpLineWrap('Module.mad', 35, true));
    __hpLineWrap('Module.mad', 36, __hpLineWrap('Module.mad', 36, false)) || __hpLineWrap('Module.mad', 36, __hpLineWrap('Module.mad', 36, __hpLineWrap('Module.mad', 36, true)) && __hpLineWrap('Module.mad', 36, __hpLineWrap('Module.mad', 36, false)));
    __hpLineWrap('Module.mad', 37, __hpLineWrap('Module.mad', 37, 1)) > __hpLineWrap('Module.mad', 37, __hpLineWrap('Module.mad', 37, 3));
    __hpLineWrap('Module.mad', 38, __hpLineWrap('Module.mad', 38, 1)) < __hpLineWrap('Module.mad', 38, __hpLineWrap('Module.mad', 38, 3));
    __hpLineWrap('Module.mad', 39, __hpLineWrap('Module.mad', 39, __hpLineWrap('Module.mad', 39, __hpLineWrap('Module.mad', 39, 1)) > __hpLineWrap('Module.mad', 39, __hpLineWrap('Module.mad', 39, 3))) && __hpLineWrap('Module.mad', 39, __hpLineWrap('Module.mad', 39, __hpLineWrap('Module.mad', 39, 3)) < __hpLineWrap('Module.mad', 39, __hpLineWrap('Module.mad', 39, 1)))) || __hpLineWrap('Module.mad', 39, __hpLineWrap('Module.mad', 39, true));
    __hpLineWrap('Module.mad', 40, __hpLineWrap('Module.mad', 40, 1)) >= __hpLineWrap('Module.mad', 40, __hpLineWrap('Module.mad', 40, 3));
    __hpLineWrap('Module.mad', 41, __hpLineWrap('Module.mad', 41, 1)) <= __hpLineWrap('Module.mad', 41, __hpLineWrap('Module.mad', 41, 3));
    __hpLineWrap('Module.mad', 42, __hpLineWrap('Module.mad', 42, __hpLineWrap('Module.mad', 42, __hpLineWrap('Module.mad', 42, 1)) >= __hpLineWrap('Module.mad', 42, __hpLineWrap('Module.mad', 42, 3))) && __hpLineWrap('Module.mad', 42, __hpLineWrap('Module.mad', 42, __hpLineWrap('Module.mad', 42, 3)) <= __hpLineWrap('Module.mad', 42, __hpLineWrap('Module.mad', 42, 1)))) || __hpLineWrap('Module.mad', 42, __hpLineWrap('Module.mad', 42, true));
    !(__hpLineWrap('Module.mad', 43, false));
    !(__hpLineWrap('Module.mad', 44, true));
    __hpLineWrap('Module.mad', 45, !(__hpLineWrap('Module.mad', 45, false))) && __hpLineWrap('Module.mad', 45, !(__hpLineWrap('Module.mad', 45, true)));
    __hpLineWrap('Module.mad', 46, !(__hpLineWrap('Module.mad', 46, false))) || __hpLineWrap('Module.mad', 46, !(__hpLineWrap('Module.mad', 46, true)));
    let arr = ({ v: __hpLineWrap('Module.mad', 47, 1), n: { v: __hpLineWrap('Module.mad', 47, 2), n: { v: __hpLineWrap('Module.mad', 47, 3), n: null } } });
    let all = ({ v: __hpLineWrap('Module.mad', 48, 4), n: { v: __hpLineWrap('Module.mad', 48, 5), n: { v: __hpLineWrap('Module.mad', 48, 6), n: __hpLineWrap('Module.mad', 48, arr) } } });
    ((__x__) => {
  if (__hp('Module.mad', 'line', 50, 50) || __x__ !== null && __x__.v === 1 && __x__.n !== null && __x__.n.v === 2 && __x__.n.n !== null && __x__.n.n.v === 3 && __x__.n.n.n === null) {
    return __hpLineWrap('Module.mad', 50, 1);
  }
  else if (__hp('Module.mad', 'line', 51, 51) || __x__ !== null && __x__.v === 1 && __x__.n !== null && __x__.n.v === 2 && __x__.n.n !== null && true && __x__.n.n.n === null) {
    let { n: { n: { v: n } } } = __x__;
    return __hpLineWrap('Module.mad', 51, n);
  }
  else if (__hp('Module.mad', 'line', 52, 52) || __x__ !== null && true && __x__.n !== null && __x__.n.v === 3 && __x__.n.n === null) {
    let { v: n,  } = __x__;
    return __hpLineWrap('Module.mad', 52, n);
  }
  else if (__hp('Module.mad', 'line', 53, 53) || __x__ !== null && true && __x__.n !== null && true && __x__.n.n !== null && true && __x__.n.n.n === null) {
    let { v: x1, n: { v: y1, n: { v: z1 } } } = __x__;
    return __hpLineWrap('Module.mad', 53, __hpLineWrap('Module.mad', 53, __hpLineWrap('Module.mad', 53, x1)) + __hpLineWrap('Module.mad', 53, __hpLineWrap('Module.mad', 53, y1))) + __hpLineWrap('Module.mad', 53, __hpLineWrap('Module.mad', 53, z1));
  }
  else if (__hp('Module.mad', 'line', 54, 54) || __x__ === null) {
    return __hpLineWrap('Module.mad', 54, 0);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(({ v: __hpLineWrap('Module.mad', 49, 1), n: { v: __hpLineWrap('Module.mad', 49, 2), n: { v: __hpLineWrap('Module.mad', 49, 3), n: { v: __hpLineWrap('Module.mad', 49, 5), n: { v: __hpLineWrap('Module.mad', 49, 8), n: null } } } } }));
    ( => __hpLineWrap('Module.mad', 62, x))(( => (__eq__(__hpLineWrap('Module.mad', 61, __hpLineWrap('Module.mad', 61, x)), __hpLineWrap('Module.mad', 61, __hpLineWrap('Module.mad', 61, `ok`))) ? __hpLineWrap('Module.mad', 61, 1) : __hpLineWrap('Module.mad', 61, 10)))(( => __hpLineWrap('Module.mad', 60, x))((__hpLineWrap('Module.mad', 56, true) ? __hpLineWrap('Module.mad', 57, `ok`) : __hpLineWrap('Module.mad', 58, `not ok`))((__eq__(__hpLineWrap('Module.mad', 59, __hpLineWrap('Module.mad', 59, 1)), __hpLineWrap('Module.mad', 59, __hpLineWrap('Module.mad', 59, 2))) ? __hpLineWrap('Module.mad', 59, `ok`) : __hpLineWrap('Module.mad', 59, `not ok`))))));
    (__eq__(__hpLineWrap('Module.mad', 63, __hpLineWrap('Module.mad', 63, 1)), __hpLineWrap('Module.mad', 63, __hpLineWrap('Module.mad', 63, 2))) ? __hpLineWrap('Module.mad', 63, `ok`) : __hpLineWrap('Module.mad', 63, `not ok`));
    ((__x__) => {
  if (__hp('Module.mad', 'line', 65, 65) || __x__ === 3) {
    return __hpLineWrap('Module.mad', 65, 48);
  }
  else if (__hp('Module.mad', 'line', 66, 66) || true) {
    let n = __x__;
    return ( => __hpLineWrap('Module.mad', 66, __hpLineWrap('Module.mad', 66, x)) + __hpLineWrap('Module.mad', 66, __hpLineWrap('Module.mad', 66, 1)))(__hpLineWrap('Module.mad', 66, 1));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('Module.mad', 64, 3));
    ( => __hpLineWrap('Module.mad', 71, __hpLineWrap('Module.mad', 71, x)) + __hpLineWrap('Module.mad', 71, __hpLineWrap('Module.mad', 71, 1)))(((__x__) => {
  if (__hp('Module.mad', 'line', 69, 69) || __x__ === "3") {
    return __hpLineWrap('Module.mad', 69, 48);
  }
  else if (__hp('Module.mad', 'line', 70, 70) || true) {
    let n = __x__;
    return __hpLineWrap('Module.mad', 70, 1);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('Module.mad', 68, `3`)));
    ( => __hpLineWrap('Module.mad', 75, x))(((__x__) => {
  if (__hp('Module.mad', 'line', 73, 73) || __x__ !== null && __x__.v === 2 && true) {
    let { n: rest } = __x__;
    return __hpLineWrap('Module.mad', 73, rest);
  }
  else if (__hp('Module.mad', 'line', 74, 74) || __x__ !== null && __x__.v === 1 && __x__.n !== null && __x__.n.v === 2 && __x__.n.n !== null && __x__.n.n.v === 3 && true) {
    let { n: { n: { n: rest } } } = __x__;
    return __hpLineWrap('Module.mad', 74, rest);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(({ v: __hpLineWrap('Module.mad', 72, 1), n: { v: __hpLineWrap('Module.mad', 72, 2), n: { v: __hpLineWrap('Module.mad', 72, 3), n: { v: __hpLineWrap('Module.mad', 72, 4), n: { v: __hpLineWrap('Module.mad', 72, 5), n: null } } } } })));
    ((__x__) => {
  if (__hp('Module.mad', 'line', 77, 77) || __x__.name === "Bob") {
    let {  } = __x__;
    return __hpLineWrap('Module.mad', 77, `Bob`);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(({ x: __hpLineWrap('Module.mad', 76, __hpLineWrap('Module.mad', 76, 4)), name: __hpLineWrap('Module.mad', 76, __hpLineWrap('Module.mad', 76, `John`)) }));
    let tup = ([__hpLineWrap('Module.mad', 79, 1), __hpLineWrap('Module.mad', 79, 2), __hpLineWrap('Module.mad', 79, 3)]);
    __eq__(__hpLineWrap('Module.mad', 81, ([__hpLineWrap('Module.mad', 81, 1), __hpLineWrap('Module.mad', 81, 2), __hpLineWrap('Module.mad', 81, 3)])), __hpLineWrap('Module.mad', 81, ([__hpLineWrap('Module.mad', 81, 1), __hpLineWrap('Module.mad', 81, 2), __hpLineWrap('Module.mad', 81, 3)])));
    ((__x__) => {
  if (__hp('Module.mad', 'line', 84, 84) || __x__.length === 2 && true && true) {
    let [a,b] = __x__;
    return __hpLineWrap('Module.mad', 84, __hpLineWrap('Module.mad', 84, a)) + __hpLineWrap('Module.mad', 84, __hpLineWrap('Module.mad', 84, b));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(([__hpLineWrap('Module.mad', 83, 1), __hpLineWrap('Module.mad', 83, 2)]));
    __hpLineWrap('Module.mad', 87, fst)(([__hpLineWrap('Module.mad', 87, 1), __hpLineWrap('Module.mad', 87, 2)]));
    __hpLineWrap('Module.mad', 88, snd)(([__hpLineWrap('Module.mad', 88, 1), __hpLineWrap('Module.mad', 88, 2)]));
    return __hpLineWrap('Module.mad', 0, ({ __constructor: "Unit", __args: [] }));
});
let log = __hpFnWrap('Module.mad', 92, 'log')((a =>  { console.log(a); return a; } ));
let mapMaybe = __hpFnWrap('Module.mad', 95, 'mapMaybe')((f => m => ((__x__) => {
  if (__hp('Module.mad', 'line', 96, 96) || __x__.__constructor === "Just" && true) {
    let a = __x__.__args[0];
    return __hpLineWrap('Module.mad', 96, Just)(__hpLineWrap('Module.mad', 96, f)(__hpLineWrap('Module.mad', 96, a)));
  }
  else if (__hp('Module.mad', 'line', 97, 97) || __x__.__constructor === "Nothing") {
    return __hpLineWrap('Module.mad', 97, Nothing);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('Module.mad', 95, m))));
export let map = __hpFnWrap('Module.mad', 100, 'map')((f => xs => {
    let $_result_;
    let $_continue_ = true;
    let $_start_ = {};
    let $_end_ = $_start_;
    let $$f = f;
    let $$xs = xs;

    while($_continue_) {
      let $f = $$f;
      let $xs = $$xs;

        $_continue_ = false;
        ((__x__) => {
  if (__hp('Module.mad', 'line', 101, 101) || __x__ !== null && true && __x__.n !== null && true && __x__.n.n !== null && true && __x__.n.n.n === null) {
    let { v: a, n: { v: b, n: { v: c } } } = __x__;
    ($_end_ = $_end_.n = { v: __hpLineWrap('Module.mad', 101, $f)(__hpLineWrap('Module.mad', 101, a)) }, $$f = __hpLineWrap('Module.mad', 101, $f), $$xs = ({ v: __hpLineWrap('Module.mad', 101, b), n: { v: __hpLineWrap('Module.mad', 101, c), n: null } }), $_continue_ = true);
  }
  else if (__hp('Module.mad', 'line', 102, 102) || __x__ !== null && true && __x__.n !== null && true && __x__.n.n === null) {
    let { v: a, n: { v: b } } = __x__;
    ($_end_ = $_end_.n = { v: __hpLineWrap('Module.mad', 102, $f)(__hpLineWrap('Module.mad', 102, a)) }, $$f = __hpLineWrap('Module.mad', 102, $f), $$xs = ({ v: __hpLineWrap('Module.mad', 102, b), n: null }), $_continue_ = true);
  }
  else if (__hp('Module.mad', 'line', 103, 103) || __x__ !== null && true && __x__.n === null) {
    let { v: a } = __x__;
    ($_end_.n = ({ v: __hpLineWrap('Module.mad', 103, $f)(__hpLineWrap('Module.mad', 103, a)), n: null }), $_result_ = $_start_.n);
  }
  else if (__hp('Module.mad', 'line', 104, 104) || __x__ === null) {
    ($_end_.n = (null), $_result_ = $_start_.n);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('Module.mad', 100, $xs))
    }
    return $_result_;
}));
let addXAndY = __hpFnWrap('Module.mad', 106, 'addXAndY')((r => ((__x__) => {
  if (__hp('Module.mad', 'line', 108, 108) || true && true) {
    let { y: y, x: x1 } = __x__;
    return __hpLineWrap('Module.mad', 108, __hpLineWrap('Module.mad', 108, x1)) + __hpLineWrap('Module.mad', 108, __hpLineWrap('Module.mad', 108, y));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('Module.mad', 107, r))));
let fnTCHOU = __hpFnWrap('Module.mad', 111, 'fnTCHOU')((x => __hpLineWrap('Module.mad', 111, __hpLineWrap('Module.mad', 111, __hpLineWrap('Module.mad', 111, __hpLineWrap('Module.mad', 111, __hpLineWrap('Module.mad', 111, __hpLineWrap('Module.mad', 111, x).a).b).c).d).e)));
let fn2 = __hpFnWrap('Module.mad', 114, 'fn2')((a => ([__hpLineWrap('Module.mad', 114, a), __hpLineWrap('Module.mad', 114, a)])));
let fst = __hpFnWrap('Module.mad', 117, 'fst')((tuple => ((__x__) => {
  if (__hp('Module.mad', 'line', 118, 118) || __x__.length === 2 && true && true) {
    let [a,] = __x__;
    return __hpLineWrap('Module.mad', 118, a);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('Module.mad', 117, tuple))));
let snd = __hpFnWrap('Module.mad', 122, 'snd')((tuple => {
    let b = ((__x__) => {
  if (__hp('Module.mad', 'line', 124, 124) || __x__.length === 2 && true && true) {
    let [,b1] = __x__;
    return __hpLineWrap('Module.mad', 124, b1);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('Module.mad', 123, tuple));
    return __hpLineWrap('Module.mad', 126, b);
}));
((__x__) => {
  if (__hp('Module.mad', 'line', 129, 129) || __x__.length === 2 && __x__[0].__constructor === "Just" && true && __x__[1].__constructor === "Just" && true) {
    let [{ __args: [n]},{ __args: [m]}] = __x__;
    return __hpLineWrap('Module.mad', 129, __hpLineWrap('Module.mad', 129, n)) + __hpLineWrap('Module.mad', 129, __hpLineWrap('Module.mad', 129, m));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(([__hpLineWrap('Module.mad', 129, Just)(__hpLineWrap('Module.mad', 129, 3)), __hpLineWrap('Module.mad', 129, Just)(__hpLineWrap('Module.mad', 129, 4))]));
export default { fn, map };
const makeArgs = () => {
  let list = {}
  let start = list
  Object.keys(process.argv.slice(0)).forEach((key) => {
    list = list.n = { v: process.argv[key], n: null }
  }, {})
  return {
    n: start.n.n.n,
    v: start.n.n.v
  }
}
main(makeArgs())
