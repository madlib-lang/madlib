// file: path
let Just = (a => ({ __constructor: "Just", __args: [ a ] }));
let Nothing = ({ __constructor: "Nothing", __args: [  ] });
export let fn = __hpFnWrap('path', 1, 'fn')((b => c => __hpLineWrap('path', 1, __hpLineWrap('path', 1, b)) + __hpLineWrap('path', 1, __hpLineWrap('path', 1, c))));
let inc = __hpFnWrap('path', 3, 'inc')((x => __hpLineWrap('path', 3, __hpLineWrap('path', 3, x)) + __hpLineWrap('path', 3, __hpLineWrap('path', 3, 1))));
let dec = __hpFnWrap('path', 5, 'dec')((x => __hpLineWrap('path', 5, __hpLineWrap('path', 5, x)) - __hpLineWrap('path', 5, __hpLineWrap('path', 5, 1))));
let double = __hpFnWrap('path', 7, 'double')((x => __hpLineWrap('path', 7, __hpLineWrap('path', 7, x)) * __hpLineWrap('path', 7, __hpLineWrap('path', 7, 2))));
let half = __hpFnWrap('path', 9, 'half')((x => __hpLineWrap('path', 9, __hpLineWrap('path', 9, x)) / __hpLineWrap('path', 9, __hpLineWrap('path', 9, 2))));
__hpLineWrap('path', 10, __hpLineWrap('path', 10, double))(__hpLineWrap('path', 10, __hpLineWrap('path', 10, __hpLineWrap('path', 10, half))(__hpLineWrap('path', 10, __hpLineWrap('path', 10, 3)))));
__eq__(__hpLineWrap('path', 11, __hpLineWrap('path', 11, 3)), __hpLineWrap('path', 11, __hpLineWrap('path', 11, 5)));
let carResponse = ({ cars: __hpLineWrap('path', 12, ([])) });
((__x__) => {
  if (__hp('path', 'line', 14, 14) || true) {
    let { cars: cs } = __x__;
    return __hpLineWrap('path', 14, cs);
  }
  else if (__hp('path', 'line', 15, 15) || true) {
    return ([]);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 13, carResponse));
((__x__) => {
  if (__hp('path', 'line', 18, 18) || typeof __x__ === "number") {
    return __hpLineWrap('path', 18, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 17, 3));
((__x__) => {
  if (__hp('path', 'line', 21, 21) || typeof __x__ === "string") {
    return __hpLineWrap('path', 21, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 20, "3"));
((__x__) => {
  if (__hp('path', 'line', 24, 24) || typeof __x__ === "boolean") {
    return __hpLineWrap('path', 24, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 23, true));
((__x__) => {
  if (__hp('path', 'line', 27, 27) || __x__ === 3) {
    return __hpLineWrap('path', 27, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 26, 3));
((__x__) => {
  if (__hp('path', 'line', 30, 30) || __x__ === "3") {
    return __hpLineWrap('path', 30, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 29, "3"));
((__x__) => {
  if (__hp('path', 'line', 33, 33) || __x__ === true) {
    return __hpLineWrap('path', 33, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 32, true));
let log = __hpFnWrap('path', 36, 'log')((a => { console.log(a); return a; }));
(__hpLineWrap('path', 37, true) ? __hpLineWrap('path', 37, "OK") : __hpLineWrap('path', 37, "NOT OK"));
let mapMaybe = __hpFnWrap('path', 40, 'mapMaybe')((f => m => ((__x__) => {
  if (__hp('path', 'line', 41, 41) || __x__.__constructor === "Just" && true) {
    let a = __x__.__args[0];
    return __hpLineWrap('path', 41, __hpLineWrap('path', 41, Just)(__hpLineWrap('path', 41, __hpLineWrap('path', 41, __hpLineWrap('path', 41, f)(__hpLineWrap('path', 41, __hpLineWrap('path', 41, a)))))));
  }
  else if (__hp('path', 'line', 42, 42) || __x__.__constructor === "Nothing") {
    return __hpLineWrap('path', 42, Nothing);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 40, m))));
let might = __hpLineWrap('path', 44, __hpLineWrap('path', 44, Just)(__hpLineWrap('path', 44, __hpLineWrap('path', 44, 3))));
let q = ((__x__) => {
  if (__hp('path', 'line', 46, 46) || __x__.__constructor === "Just" && true) {
    let a = __x__.__args[0];
    return __hpLineWrap('path', 46, a);
  }
  else if (__hp('path', 'line', 47, 47) || __x__.__constructor === "Nothing") {
    return __hpLineWrap('path', 47, 1);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 45, might));
__hpLineWrap('path', 49, __hpLineWrap('path', 49, true)) && __hpLineWrap('path', 49, __hpLineWrap('path', 49, false));
__hpLineWrap('path', 50, __hpLineWrap('path', 50, false)) || __hpLineWrap('path', 50, __hpLineWrap('path', 50, true));
__hpLineWrap('path', 51, __hpLineWrap('path', 51, false)) || __hpLineWrap('path', 51, __hpLineWrap('path', 51, __hpLineWrap('path', 51, true)) && __hpLineWrap('path', 51, __hpLineWrap('path', 51, false)));
__hpLineWrap('path', 52, __hpLineWrap('path', 52, 1)) > __hpLineWrap('path', 52, __hpLineWrap('path', 52, 3));
__hpLineWrap('path', 53, __hpLineWrap('path', 53, 1)) < __hpLineWrap('path', 53, __hpLineWrap('path', 53, 3));
__hpLineWrap('path', 54, __hpLineWrap('path', 54, __hpLineWrap('path', 54, __hpLineWrap('path', 54, 1)) > __hpLineWrap('path', 54, __hpLineWrap('path', 54, 3))) && __hpLineWrap('path', 54, __hpLineWrap('path', 54, __hpLineWrap('path', 54, 3)) < __hpLineWrap('path', 54, __hpLineWrap('path', 54, 1)))) || __hpLineWrap('path', 54, __hpLineWrap('path', 54, true));
__hpLineWrap('path', 55, __hpLineWrap('path', 55, 1)) >= __hpLineWrap('path', 55, __hpLineWrap('path', 55, 3));
__hpLineWrap('path', 56, __hpLineWrap('path', 56, 1)) <= __hpLineWrap('path', 56, __hpLineWrap('path', 56, 3));
__hpLineWrap('path', 57, __hpLineWrap('path', 57, __hpLineWrap('path', 57, __hpLineWrap('path', 57, 1)) >= __hpLineWrap('path', 57, __hpLineWrap('path', 57, 3))) && __hpLineWrap('path', 57, __hpLineWrap('path', 57, __hpLineWrap('path', 57, 3)) <= __hpLineWrap('path', 57, __hpLineWrap('path', 57, 1)))) || __hpLineWrap('path', 57, __hpLineWrap('path', 57, true));
__hpLineWrap('path', 58, !(__hpLineWrap('path', 58, __hpLineWrap('path', 58, false))));
__hpLineWrap('path', 59, !(__hpLineWrap('path', 59, __hpLineWrap('path', 59, true))));
__hpLineWrap('path', 60, __hpLineWrap('path', 60, !(__hpLineWrap('path', 60, __hpLineWrap('path', 60, false))))) && __hpLineWrap('path', 60, __hpLineWrap('path', 60, !(__hpLineWrap('path', 60, __hpLineWrap('path', 60, true)))));
__hpLineWrap('path', 61, __hpLineWrap('path', 61, !(__hpLineWrap('path', 61, __hpLineWrap('path', 61, false))))) || __hpLineWrap('path', 61, __hpLineWrap('path', 61, !(__hpLineWrap('path', 61, __hpLineWrap('path', 61, true)))));
let arr = ([__hpLineWrap('path', 62, 1), __hpLineWrap('path', 62, 2), __hpLineWrap('path', 62, 3)]);
let all = ([ ...__hpLineWrap('path', 63, arr), __hpLineWrap('path', 63, 4), __hpLineWrap('path', 63, 5), __hpLineWrap('path', 63, 6)]);
((__x__) => {
  if (__hp('path', 'line', 65, 65) || __x__.length === 3 && __x__[0] === 1 && __x__[1] === 2 && __x__[2] === 3) {
    let [,,] = __x__;
    return __hpLineWrap('path', 65, 1);
  }
  else if (__hp('path', 'line', 66, 66) || __x__.length === 3 && __x__[0] === 1 && __x__[1] === 2 && true) {
    let [,,n] = __x__;
    return __hpLineWrap('path', 66, n);
  }
  else if (__hp('path', 'line', 67, 67) || __x__.length === 2 && true && __x__[1] === 3) {
    let [n,] = __x__;
    return __hpLineWrap('path', 67, n);
  }
  else if (__hp('path', 'line', 68, 68) || __x__.length === 3 && true && true && true) {
    let [x1,y1,z1] = __x__;
    return __hpLineWrap('path', 68, __hpLineWrap('path', 68, __hpLineWrap('path', 68, x1)) + __hpLineWrap('path', 68, __hpLineWrap('path', 68, y1))) + __hpLineWrap('path', 68, __hpLineWrap('path', 68, z1));
  }
  else if (__hp('path', 'line', 69, 69) || __x__.length === 0) {
    let [] = __x__;
    return __hpLineWrap('path', 69, 0);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(([__hpLineWrap('path', 64, 1), __hpLineWrap('path', 64, 2), __hpLineWrap('path', 64, 3), __hpLineWrap('path', 64, 5), __hpLineWrap('path', 64, 8)]));
export let map = __hpFnWrap('path', 72, 'map')((f => xs => ((__x__) => {
  if (__hp('path', 'line', 73, 73) || __x__.length === 3 && true && true && true) {
    let [a,b,c] = __x__;
    return ([__hpLineWrap('path', 73, __hpLineWrap('path', 73, f)(__hpLineWrap('path', 73, __hpLineWrap('path', 73, a)))),  ...__hpLineWrap('path', 73, __hpLineWrap('path', 73, __hpLineWrap('path', 73, map)(__hpLineWrap('path', 73, __hpLineWrap('path', 73, f)))(__hpLineWrap('path', 73, ([__hpLineWrap('path', 73, b), __hpLineWrap('path', 73, c)])))))]);
  }
  else if (__hp('path', 'line', 74, 74) || __x__.length === 2 && true && true) {
    let [a,b] = __x__;
    return ([__hpLineWrap('path', 74, __hpLineWrap('path', 74, f)(__hpLineWrap('path', 74, __hpLineWrap('path', 74, a)))),  ...__hpLineWrap('path', 74, __hpLineWrap('path', 74, __hpLineWrap('path', 74, map)(__hpLineWrap('path', 74, __hpLineWrap('path', 74, f)))(__hpLineWrap('path', 74, ([__hpLineWrap('path', 74, b)])))))]);
  }
  else if (__hp('path', 'line', 75, 75) || __x__.length === 1 && true) {
    let [a] = __x__;
    return ([__hpLineWrap('path', 75, __hpLineWrap('path', 75, f)(__hpLineWrap('path', 75, __hpLineWrap('path', 75, a))))]);
  }
  else if (__hp('path', 'line', 76, 76) || __x__.length === 0) {
    let [] = __x__;
    return ([]);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 72, xs))));
(__hpLineWrap('path', 78, true) ? __hpLineWrap('path', 79, "ok") : __hpLineWrap('path', 80, "not ok"));
__hpLineWrap('path', 81, (x => __hpLineWrap('path', 84, x)))(__hpLineWrap('path', 84, __hpLineWrap('path', 81, (x => (__eq__(__hpLineWrap('path', 83, __hpLineWrap('path', 83, x)), __hpLineWrap('path', 83, __hpLineWrap('path', 83, "ok"))) ? __hpLineWrap('path', 83, 1) : __hpLineWrap('path', 83, 10))))(__hpLineWrap('path', 83, __hpLineWrap('path', 81, (x => __hpLineWrap('path', 82, x)))(__hpLineWrap('path', 82, (__eq__(__hpLineWrap('path', 81, __hpLineWrap('path', 81, 1)), __hpLineWrap('path', 81, __hpLineWrap('path', 81, 2))) ? __hpLineWrap('path', 81, "ok") : __hpLineWrap('path', 81, "not ok"))))))));
(__eq__(__hpLineWrap('path', 85, __hpLineWrap('path', 85, 1)), __hpLineWrap('path', 85, __hpLineWrap('path', 85, 2))) ? __hpLineWrap('path', 85, "ok") : __hpLineWrap('path', 85, "not ok"));
((__x__) => {
  if (__hp('path', 'line', 87, 87) || __x__ === 3) {
    return __hpLineWrap('path', 87, 48);
  }
  else if (__hp('path', 'line', 88, 88) || true) {
    let n = __x__;
    return __hpLineWrap('path', 88, (x => __hpLineWrap('path', 88, __hpLineWrap('path', 88, x)) + __hpLineWrap('path', 88, __hpLineWrap('path', 88, 1))))(__hpLineWrap('path', 88, __hpLineWrap('path', 88, 1)));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 86, 3));
__hpLineWrap('path', 89, (x => __hpLineWrap('path', 92, __hpLineWrap('path', 92, x)) + __hpLineWrap('path', 92, __hpLineWrap('path', 92, 1))))(__hpLineWrap('path', 92, ((__x__) => {
  if (__hp('path', 'line', 90, 90) || __x__ === "3") {
    return __hpLineWrap('path', 90, 48);
  }
  else if (__hp('path', 'line', 91, 91) || true) {
    let n = __x__;
    return __hpLineWrap('path', 91, 1);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 89, "3"))));
__hpLineWrap('path', 93, (x => __hpLineWrap('path', 96, x)))(__hpLineWrap('path', 96, ((__x__) => {
  if (__hp('path', 'line', 94, 94) || __x__.length >= 2 && __x__[0] === 2 && true) {
    let [,...rest] = __x__;
    return __hpLineWrap('path', 94, rest);
  }
  else if (__hp('path', 'line', 95, 95) || __x__.length >= 4 && __x__[0] === 1 && __x__[1] === 2 && __x__[2] === 3 && true) {
    let [,,,...rest] = __x__;
    return __hpLineWrap('path', 95, rest);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(([__hpLineWrap('path', 93, 1), __hpLineWrap('path', 93, 2), __hpLineWrap('path', 93, 3), __hpLineWrap('path', 93, 4), __hpLineWrap('path', 93, 5)]))));
((__x__) => {
  if (__hp('path', 'line', 98, 98) || __x__.name === "Bob") {
    let {  } = __x__;
    return __hpLineWrap('path', 98, "Bob");
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(({ x: __hpLineWrap('path', 97, __hpLineWrap('path', 97, 4)), name: __hpLineWrap('path', 97, __hpLineWrap('path', 97, "John")) }));
let addXAndY = __hpFnWrap('path', 100, 'addXAndY')((r => ((__x__) => {
  if (__hp('path', 'line', 102, 102) || true && true) {
    let { y: y, x: x1 } = __x__;
    return __hpLineWrap('path', 102, __hpLineWrap('path', 102, x1)) + __hpLineWrap('path', 102, __hpLineWrap('path', 102, y));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 101, r))));
let fnTCHOU = __hpFnWrap('path', 105, 'fnTCHOU')((x => __hpLineWrap('path', 105, __hpLineWrap('path', 105, __hpLineWrap('path', 105, __hpLineWrap('path', 105, __hpLineWrap('path', 105, __hpLineWrap('path', 105, x).a).b).c).d).e)));
let tup = ([__hpLineWrap('path', 107, 1), __hpLineWrap('path', 107, 2), __hpLineWrap('path', 107, 3)]);
__eq__(__hpLineWrap('path', 109, ([__hpLineWrap('path', 109, 1), __hpLineWrap('path', 109, 2), __hpLineWrap('path', 109, 3)])), __hpLineWrap('path', 109, ([__hpLineWrap('path', 109, 1), __hpLineWrap('path', 109, 2), __hpLineWrap('path', 109, 3)])));
((__x__) => {
  if (__hp('path', 'line', 112, 112) || __x__.length === 2 && true && true) {
    let [a,b] = __x__;
    return __hpLineWrap('path', 112, __hpLineWrap('path', 112, a)) + __hpLineWrap('path', 112, __hpLineWrap('path', 112, b));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(([__hpLineWrap('path', 111, 1), __hpLineWrap('path', 111, 2)]));
let fn2 = __hpFnWrap('path', 116, 'fn2')((a => ([__hpLineWrap('path', 116, a), __hpLineWrap('path', 116, a)])));
let fst = __hpFnWrap('path', 119, 'fst')((tuple => ((__x__) => {
  if (__hp('path', 'line', 120, 120) || __x__.length === 2 && true && true) {
    let [a,] = __x__;
    return __hpLineWrap('path', 120, a);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 119, tuple))));
let snd = __hpFnWrap('path', 123, 'snd')((tuple => {
    let b = ((__x__) => {
  if (__hp('path', 'line', 125, 125) || __x__.length === 2 && true && true) {
    let [,b1] = __x__;
    return __hpLineWrap('path', 125, b1);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 124, tuple));
    return __hpLineWrap('path', 126, b);
}));
__hpLineWrap('path', 129, __hpLineWrap('path', 129, fst)(__hpLineWrap('path', 129, ([__hpLineWrap('path', 129, 1), __hpLineWrap('path', 129, 2)]))));
__hpLineWrap('path', 130, __hpLineWrap('path', 130, snd)(__hpLineWrap('path', 130, ([__hpLineWrap('path', 130, 1), __hpLineWrap('path', 130, 2)]))));
((__x__) => {
  if (__hp('path', 'line', 133, 133) || __x__.length === 2 && __x__[0].__constructor === "Just" && true && __x__[1].__constructor === "Just" && true) {
    let [{ __args: [n]},{ __args: [m]}] = __x__;
    return __hpLineWrap('path', 133, __hpLineWrap('path', 133, n)) + __hpLineWrap('path', 133, __hpLineWrap('path', 133, m));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    console.trace(); 
    throw 'non exhaustive patterns!';
  }
})(([__hpLineWrap('path', 132, __hpLineWrap('path', 132, Just)(__hpLineWrap('path', 132, __hpLineWrap('path', 132, 3)))), __hpLineWrap('path', 132, __hpLineWrap('path', 132, Just)(__hpLineWrap('path', 132, __hpLineWrap('path', 132, 4))))]));
export default { fn, map };
