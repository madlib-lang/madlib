// file: path
const Just = __curry__((a) => ({ __constructor: "Just", __args: [ a ] }));
const Nothing = ({ __constructor: "Nothing", __args: [  ] });
export const fn = __hpFnWrap('path', 1, 'fn')(__curry__((b, c) => __hpLineWrap('path', 1, __hpLineWrap('path', 1, b)) + __hpLineWrap('path', 1, __hpLineWrap('path', 1, c))));
const inc = __hpFnWrap('path', 3, 'inc')(__curry__((x) => __hpLineWrap('path', 3, __hpLineWrap('path', 3, x)) + __hpLineWrap('path', 3, __hpLineWrap('path', 3, 1))));
const dec = __hpFnWrap('path', 5, 'dec')(__curry__((x) => __hpLineWrap('path', 5, __hpLineWrap('path', 5, x)) - __hpLineWrap('path', 5, __hpLineWrap('path', 5, 1))));
const double = __hpFnWrap('path', 7, 'double')(__curry__((x) => __hpLineWrap('path', 7, __hpLineWrap('path', 7, x)) * __hpLineWrap('path', 7, __hpLineWrap('path', 7, 2))));
const half = __hpFnWrap('path', 9, 'half')(__curry__((x) => __hpLineWrap('path', 9, __hpLineWrap('path', 9, x)) / __hpLineWrap('path', 9, __hpLineWrap('path', 9, 2))));
__hpLineWrap('path', 10, __hpLineWrap('path', 10, double))(__hpLineWrap('path', 10, __hpLineWrap('path', 10, __hpLineWrap('path', 10, half))(__hpLineWrap('path', 10, __hpLineWrap('path', 10, 3)))));
__eq__(__hpLineWrap('path', 11, __hpLineWrap('path', 11, 3)), __hpLineWrap('path', 11, __hpLineWrap('path', 11, 5)));
const response = ({ users: __hpLineWrap('path', 12, ([])) });
const users = __hpLineWrap('path', 13, __hpLineWrap('path', 13, response).users);
const carResponse = ({ cars: __hpLineWrap('path', 14, ([])) });
const allResponses = ({ ...__hpLineWrap('path', 15, __hpLineWrap('path', 15, response)), ...__hpLineWrap('path', 15, __hpLineWrap('path', 15, carResponse)) });
((__x__) => {
  if (__hp('path', 'line', 17, 17) || true && true) {
    const { users: a, cars: cs } = __x__;
    return __hpLineWrap('path', 17, cs);
  }
  else if (__hp('path', 'line', 18, 18) || true) {
    return ([]);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 16, allResponses));
((__x__) => {
  if (__hp('path', 'line', 21, 21) || typeof __x__ === "number") {
    return __hpLineWrap('path', 21, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 20, 3));
((__x__) => {
  if (__hp('path', 'line', 24, 24) || typeof __x__ === "string") {
    return __hpLineWrap('path', 24, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 23, "3"));
((__x__) => {
  if (__hp('path', 'line', 27, 27) || typeof __x__ === "boolean") {
    return __hpLineWrap('path', 27, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 26, true));
((__x__) => {
  if (__hp('path', 'line', 30, 30) || __x__ === 3) {
    return __hpLineWrap('path', 30, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 29, 3));
((__x__) => {
  if (__hp('path', 'line', 33, 33) || __x__ === "3") {
    return __hpLineWrap('path', 33, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 32, "3"));
((__x__) => {
  if (__hp('path', 'line', 36, 36) || __x__ === true) {
    return __hpLineWrap('path', 36, 3);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 35, true));
const log = __hpFnWrap('path', 39, 'log')(__curry__((a) => { console.log(a); return a; }));
(__hpLineWrap('path', 40, true) ? __hpLineWrap('path', 40, "OK") : __hpLineWrap('path', 40, "NOT OK"));
const mapMaybe = __hpFnWrap('path', 43, 'mapMaybe')(__curry__((f, m) => ((__x__) => {
  if (__hp('path', 'line', 44, 44) || __x__.__constructor === "Just" && true) {
    const a = __x__.__args[0];
    return __hpLineWrap('path', 44, __hpLineWrap('path', 44, Just)(__hpLineWrap('path', 44, __hpLineWrap('path', 44, __hpLineWrap('path', 44, f)(__hpLineWrap('path', 44, __hpLineWrap('path', 44, a)))))));
  }
  else if (__hp('path', 'line', 45, 45) || __x__.__constructor === "Nothing") {
    return __hpLineWrap('path', 45, Nothing);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 43, m))));
const might = __hpLineWrap('path', 47, __hpLineWrap('path', 47, Just)(__hpLineWrap('path', 47, __hpLineWrap('path', 47, 3))));
const x = ((__x__) => {
  if (__hp('path', 'line', 49, 49) || __x__.__constructor === "Just" && true) {
    const a = __x__.__args[0];
    return __hpLineWrap('path', 49, a);
  }
  else if (__hp('path', 'line', 50, 50) || __x__.__constructor === "Nothing") {
    return __hpLineWrap('path', 50, 1);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 48, might));
__hpLineWrap('path', 52, __hpLineWrap('path', 52, true)) && __hpLineWrap('path', 52, __hpLineWrap('path', 52, false));
__hpLineWrap('path', 53, __hpLineWrap('path', 53, false)) || __hpLineWrap('path', 53, __hpLineWrap('path', 53, true));
__hpLineWrap('path', 54, __hpLineWrap('path', 54, false)) || __hpLineWrap('path', 54, __hpLineWrap('path', 54, __hpLineWrap('path', 54, true)) && __hpLineWrap('path', 54, __hpLineWrap('path', 54, false)));
__hpLineWrap('path', 55, __hpLineWrap('path', 55, 1)) > __hpLineWrap('path', 55, __hpLineWrap('path', 55, 3));
__hpLineWrap('path', 56, __hpLineWrap('path', 56, 1)) < __hpLineWrap('path', 56, __hpLineWrap('path', 56, 3));
__hpLineWrap('path', 57, __hpLineWrap('path', 57, __hpLineWrap('path', 57, __hpLineWrap('path', 57, 1)) > __hpLineWrap('path', 57, __hpLineWrap('path', 57, 3))) && __hpLineWrap('path', 57, __hpLineWrap('path', 57, __hpLineWrap('path', 57, 3)) < __hpLineWrap('path', 57, __hpLineWrap('path', 57, 1)))) || __hpLineWrap('path', 57, __hpLineWrap('path', 57, true));
__hpLineWrap('path', 58, __hpLineWrap('path', 58, 1)) >= __hpLineWrap('path', 58, __hpLineWrap('path', 58, 3));
__hpLineWrap('path', 59, __hpLineWrap('path', 59, 1)) <= __hpLineWrap('path', 59, __hpLineWrap('path', 59, 3));
__hpLineWrap('path', 60, __hpLineWrap('path', 60, __hpLineWrap('path', 60, __hpLineWrap('path', 60, 1)) >= __hpLineWrap('path', 60, __hpLineWrap('path', 60, 3))) && __hpLineWrap('path', 60, __hpLineWrap('path', 60, __hpLineWrap('path', 60, 3)) <= __hpLineWrap('path', 60, __hpLineWrap('path', 60, 1)))) || __hpLineWrap('path', 60, __hpLineWrap('path', 60, true));
__hpLineWrap('path', 61, !(__hpLineWrap('path', 61, __hpLineWrap('path', 61, false))));
__hpLineWrap('path', 62, !(__hpLineWrap('path', 62, __hpLineWrap('path', 62, true))));
__hpLineWrap('path', 63, __hpLineWrap('path', 63, !(__hpLineWrap('path', 63, __hpLineWrap('path', 63, false))))) && __hpLineWrap('path', 63, __hpLineWrap('path', 63, !(__hpLineWrap('path', 63, __hpLineWrap('path', 63, true)))));
__hpLineWrap('path', 64, __hpLineWrap('path', 64, !(__hpLineWrap('path', 64, __hpLineWrap('path', 64, false))))) || __hpLineWrap('path', 64, __hpLineWrap('path', 64, !(__hpLineWrap('path', 64, __hpLineWrap('path', 64, true)))));
const arr = ([__hpLineWrap('path', 65, 1), __hpLineWrap('path', 65, 2), __hpLineWrap('path', 65, 3)]);
const all = ([ ...__hpLineWrap('path', 66, arr), __hpLineWrap('path', 66, 4), __hpLineWrap('path', 66, 5), __hpLineWrap('path', 66, 6)]);
((__x__) => {
  if (__hp('path', 'line', 68, 68) || __x__.length === 3 && __x__[0] === 1 && __x__[1] === 2 && __x__[2] === 3) {
    const [,,] = __x__;
    return __hpLineWrap('path', 68, 1);
  }
  else if (__hp('path', 'line', 69, 69) || __x__.length === 3 && __x__[0] === 1 && __x__[1] === 2 && true) {
    const [,,n] = __x__;
    return __hpLineWrap('path', 69, n);
  }
  else if (__hp('path', 'line', 70, 70) || __x__.length === 2 && true && __x__[1] === 3) {
    const [n,] = __x__;
    return __hpLineWrap('path', 70, n);
  }
  else if (__hp('path', 'line', 71, 71) || __x__.length === 3 && true && true && true) {
    const [x1,y1,z1] = __x__;
    return __hpLineWrap('path', 71, __hpLineWrap('path', 71, __hpLineWrap('path', 71, x1)) + __hpLineWrap('path', 71, __hpLineWrap('path', 71, y1))) + __hpLineWrap('path', 71, __hpLineWrap('path', 71, z1));
  }
  else if (__hp('path', 'line', 72, 72) || __x__.length === 0) {
    const [] = __x__;
    return __hpLineWrap('path', 72, 0);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(([__hpLineWrap('path', 67, 1), __hpLineWrap('path', 67, 2), __hpLineWrap('path', 67, 3), __hpLineWrap('path', 67, 5), __hpLineWrap('path', 67, 8)]));
export const map = __hpFnWrap('path', 75, 'map')(__curry__((f, xs) => ((__x__) => {
  if (__hp('path', 'line', 76, 76) || __x__.length === 3 && true && true && true) {
    const [a,b,c] = __x__;
    return ([__hpLineWrap('path', 76, __hpLineWrap('path', 76, f)(__hpLineWrap('path', 76, __hpLineWrap('path', 76, a)))),  ...__hpLineWrap('path', 76, __hpLineWrap('path', 76, __hpLineWrap('path', 76, map)(__hpLineWrap('path', 76, __hpLineWrap('path', 76, f)))(__hpLineWrap('path', 76, ([__hpLineWrap('path', 76, b), __hpLineWrap('path', 76, c)])))))]);
  }
  else if (__hp('path', 'line', 77, 77) || __x__.length === 2 && true && true) {
    const [a,b] = __x__;
    return ([__hpLineWrap('path', 77, __hpLineWrap('path', 77, f)(__hpLineWrap('path', 77, __hpLineWrap('path', 77, a)))),  ...__hpLineWrap('path', 77, __hpLineWrap('path', 77, __hpLineWrap('path', 77, map)(__hpLineWrap('path', 77, __hpLineWrap('path', 77, f)))(__hpLineWrap('path', 77, ([__hpLineWrap('path', 77, b)])))))]);
  }
  else if (__hp('path', 'line', 78, 78) || __x__.length === 1 && true) {
    const [a] = __x__;
    return ([__hpLineWrap('path', 78, __hpLineWrap('path', 78, f)(__hpLineWrap('path', 78, __hpLineWrap('path', 78, a))))]);
  }
  else if (__hp('path', 'line', 79, 79) || __x__.length === 0) {
    const [] = __x__;
    return ([]);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 75, xs))));
(__hpLineWrap('path', 81, true) ? __hpLineWrap('path', 82, "ok") : __hpLineWrap('path', 83, "not ok"));
__hpLineWrap('path', 84, __curry__((x) => __hpLineWrap('path', 87, x)))(__hpLineWrap('path', 87, __hpLineWrap('path', 84, __curry__((x) => (__eq__(__hpLineWrap('path', 86, __hpLineWrap('path', 86, x)), __hpLineWrap('path', 86, __hpLineWrap('path', 86, "ok"))) ? __hpLineWrap('path', 86, 1) : __hpLineWrap('path', 86, 10))))(__hpLineWrap('path', 86, __hpLineWrap('path', 84, __curry__((x) => __hpLineWrap('path', 85, x)))(__hpLineWrap('path', 85, (__eq__(__hpLineWrap('path', 84, __hpLineWrap('path', 84, 1)), __hpLineWrap('path', 84, __hpLineWrap('path', 84, 2))) ? __hpLineWrap('path', 84, "ok") : __hpLineWrap('path', 84, "not ok"))))))));
(__eq__(__hpLineWrap('path', 88, __hpLineWrap('path', 88, 1)), __hpLineWrap('path', 88, __hpLineWrap('path', 88, 2))) ? __hpLineWrap('path', 88, "ok") : __hpLineWrap('path', 88, "not ok"));
((__x__) => {
  if (__hp('path', 'line', 90, 90) || __x__ === 3) {
    return __hpLineWrap('path', 90, 48);
  }
  else if (__hp('path', 'line', 91, 91) || true) {
    const n = __x__;
    return __hpLineWrap('path', 91, __curry__((x) => __hpLineWrap('path', 91, __hpLineWrap('path', 91, x)) + __hpLineWrap('path', 91, __hpLineWrap('path', 91, 1))))(__hpLineWrap('path', 91, __hpLineWrap('path', 91, 1)));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 89, 3));
__hpLineWrap('path', 92, __curry__((x) => __hpLineWrap('path', 95, __hpLineWrap('path', 95, x)) + __hpLineWrap('path', 95, __hpLineWrap('path', 95, 1))))(__hpLineWrap('path', 95, ((__x__) => {
  if (__hp('path', 'line', 93, 93) || __x__ === "3") {
    return __hpLineWrap('path', 93, 48);
  }
  else if (__hp('path', 'line', 94, 94) || true) {
    const n = __x__;
    return __hpLineWrap('path', 94, 1);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 92, "3"))));
__hpLineWrap('path', 96, __curry__((x) => __hpLineWrap('path', 99, x)))(__hpLineWrap('path', 99, ((__x__) => {
  if (__hp('path', 'line', 97, 97) || __x__.length >= 2 && __x__[0] === 2 && true) {
    const [,...rest] = __x__;
    return __hpLineWrap('path', 97, rest);
  }
  else if (__hp('path', 'line', 98, 98) || __x__.length >= 4 && __x__[0] === 1 && __x__[1] === 2 && __x__[2] === 3 && true) {
    const [,,,...rest] = __x__;
    return __hpLineWrap('path', 98, rest);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(([__hpLineWrap('path', 96, 1), __hpLineWrap('path', 96, 2), __hpLineWrap('path', 96, 3), __hpLineWrap('path', 96, 4), __hpLineWrap('path', 96, 5)]))));
((__x__) => {
  if (__hp('path', 'line', 101, 101) || __x__.name === "Bob") {
    const {  } = __x__;
    return __hpLineWrap('path', 101, "Bob");
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(({ x: __hpLineWrap('path', 100, __hpLineWrap('path', 100, 4)), name: __hpLineWrap('path', 100, __hpLineWrap('path', 100, "John")) }));
const addXAndY = __hpFnWrap('path', 103, 'addXAndY')(__curry__((r) => ((__x__) => {
  if (__hp('path', 'line', 105, 105) || true && true) {
    const { y: y, x: x1 } = __x__;
    return __hpLineWrap('path', 105, __hpLineWrap('path', 105, x1)) + __hpLineWrap('path', 105, __hpLineWrap('path', 105, y));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 104, r))));
const fnTCHOU = __hpFnWrap('path', 108, 'fnTCHOU')(__curry__((x) => __hpLineWrap('path', 108, __hpLineWrap('path', 108, __hpLineWrap('path', 108, __hpLineWrap('path', 108, __hpLineWrap('path', 108, __hpLineWrap('path', 108, x).a).b).c).d).e)));
const tup = ([__hpLineWrap('path', 110, 1), __hpLineWrap('path', 110, 2), __hpLineWrap('path', 110, 3)]);
__eq__(__hpLineWrap('path', 112, ([__hpLineWrap('path', 112, 1), __hpLineWrap('path', 112, 2), __hpLineWrap('path', 112, 3)])), __hpLineWrap('path', 112, ([__hpLineWrap('path', 112, 1), __hpLineWrap('path', 112, 2), __hpLineWrap('path', 112, 3)])));
((__x__) => {
  if (__hp('path', 'line', 115, 115) || __x__.length === 2 && true && true) {
    const [a,b] = __x__;
    return __hpLineWrap('path', 115, __hpLineWrap('path', 115, a)) + __hpLineWrap('path', 115, __hpLineWrap('path', 115, b));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(([__hpLineWrap('path', 114, 1), __hpLineWrap('path', 114, 2)]));
const fn2 = __hpFnWrap('path', 119, 'fn2')(__curry__((a) => ([__hpLineWrap('path', 119, a), __hpLineWrap('path', 119, a)])));
const fst = __hpFnWrap('path', 122, 'fst')(__curry__((tuple) => ((__x__) => {
  if (__hp('path', 'line', 123, 123) || __x__.length === 2 && true && true) {
    const [a,] = __x__;
    return __hpLineWrap('path', 123, a);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 122, tuple))));
const snd = __hpFnWrap('path', 126, 'snd')(__curry__((tuple) => {
    const b = ((__x__) => {
  if (__hp('path', 'line', 128, 128) || __x__.length === 2 && true && true) {
    const [,b1] = __x__;
    return __hpLineWrap('path', 128, b1);
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(__hpLineWrap('path', 127, tuple));
    return __hpLineWrap('path', 129, b);
}));
__hpLineWrap('path', 132, __hpLineWrap('path', 132, fst)(__hpLineWrap('path', 132, ([__hpLineWrap('path', 132, 1), __hpLineWrap('path', 132, 2)]))));
__hpLineWrap('path', 133, __hpLineWrap('path', 133, snd)(__hpLineWrap('path', 133, ([__hpLineWrap('path', 133, 1), __hpLineWrap('path', 133, 2)]))));
((__x__) => {
  if (__hp('path', 'line', 136, 136) || __x__.length === 2 && __x__[0].__constructor === "Just" && true && __x__[1].__constructor === "Just" && true) {
    const [{ __args: [n]},{ __args: [m]}] = __x__;
    return __hpLineWrap('path', 136, __hpLineWrap('path', 136, n)) + __hpLineWrap('path', 136, __hpLineWrap('path', 136, m));
  }
  else {
    console.log('non exhaustive patterns for value: ', __x__.toString()); 
    throw 'non exhaustive patterns!';
  }
})(([__hpLineWrap('path', 135, __hpLineWrap('path', 135, Just)(__hpLineWrap('path', 135, __hpLineWrap('path', 135, 3)))), __hpLineWrap('path', 135, __hpLineWrap('path', 135, Just)(__hpLineWrap('path', 135, __hpLineWrap('path', 135, 4))))]));
export default { fn, map };
