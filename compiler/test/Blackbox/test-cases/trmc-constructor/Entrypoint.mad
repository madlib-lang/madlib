import IO from "IO"


type Cons a
  = Empty
  | Cons(a, Cons a)


mapCons :: (a -> b) -> Cons a -> Cons b
mapCons = (f, tree) => where(tree) {
  Empty =>
    Empty

  Cons(a, n) =>
    Cons(f(a), mapCons(f, n))
}


main = () => {
  pipe(
    mapCons((x) => x + 1),
    IO.log
  )(Cons(1, Cons(2, Cons(3, Empty))))
}
